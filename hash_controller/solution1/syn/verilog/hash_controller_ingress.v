// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hash_controller_ingress (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_rd_0_AWVALID,
        m_axi_rd_0_AWREADY,
        m_axi_rd_0_AWADDR,
        m_axi_rd_0_AWID,
        m_axi_rd_0_AWLEN,
        m_axi_rd_0_AWSIZE,
        m_axi_rd_0_AWBURST,
        m_axi_rd_0_AWLOCK,
        m_axi_rd_0_AWCACHE,
        m_axi_rd_0_AWPROT,
        m_axi_rd_0_AWQOS,
        m_axi_rd_0_AWREGION,
        m_axi_rd_0_AWUSER,
        m_axi_rd_0_WVALID,
        m_axi_rd_0_WREADY,
        m_axi_rd_0_WDATA,
        m_axi_rd_0_WSTRB,
        m_axi_rd_0_WLAST,
        m_axi_rd_0_WID,
        m_axi_rd_0_WUSER,
        m_axi_rd_0_ARVALID,
        m_axi_rd_0_ARREADY,
        m_axi_rd_0_ARADDR,
        m_axi_rd_0_ARID,
        m_axi_rd_0_ARLEN,
        m_axi_rd_0_ARSIZE,
        m_axi_rd_0_ARBURST,
        m_axi_rd_0_ARLOCK,
        m_axi_rd_0_ARCACHE,
        m_axi_rd_0_ARPROT,
        m_axi_rd_0_ARQOS,
        m_axi_rd_0_ARREGION,
        m_axi_rd_0_ARUSER,
        m_axi_rd_0_RVALID,
        m_axi_rd_0_RREADY,
        m_axi_rd_0_RDATA,
        m_axi_rd_0_RLAST,
        m_axi_rd_0_RID,
        m_axi_rd_0_RFIFONUM,
        m_axi_rd_0_RUSER,
        m_axi_rd_0_RRESP,
        m_axi_rd_0_BVALID,
        m_axi_rd_0_BREADY,
        m_axi_rd_0_BRESP,
        m_axi_rd_0_BID,
        m_axi_rd_0_BUSER,
        ingress_0_TDATA,
        ingress_0_TVALID,
        ingress_0_TREADY,
        ingress_0_TKEEP,
        ingress_0_TSTRB,
        ingress_0_TLAST,
        ingress_0_TDEST,
        gmem,
        first,
        block_header
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_rd_0_AWVALID;
input   m_axi_rd_0_AWREADY;
output  [63:0] m_axi_rd_0_AWADDR;
output  [0:0] m_axi_rd_0_AWID;
output  [31:0] m_axi_rd_0_AWLEN;
output  [2:0] m_axi_rd_0_AWSIZE;
output  [1:0] m_axi_rd_0_AWBURST;
output  [1:0] m_axi_rd_0_AWLOCK;
output  [3:0] m_axi_rd_0_AWCACHE;
output  [2:0] m_axi_rd_0_AWPROT;
output  [3:0] m_axi_rd_0_AWQOS;
output  [3:0] m_axi_rd_0_AWREGION;
output  [0:0] m_axi_rd_0_AWUSER;
output   m_axi_rd_0_WVALID;
input   m_axi_rd_0_WREADY;
output  [255:0] m_axi_rd_0_WDATA;
output  [31:0] m_axi_rd_0_WSTRB;
output   m_axi_rd_0_WLAST;
output  [0:0] m_axi_rd_0_WID;
output  [0:0] m_axi_rd_0_WUSER;
output   m_axi_rd_0_ARVALID;
input   m_axi_rd_0_ARREADY;
output  [63:0] m_axi_rd_0_ARADDR;
output  [0:0] m_axi_rd_0_ARID;
output  [31:0] m_axi_rd_0_ARLEN;
output  [2:0] m_axi_rd_0_ARSIZE;
output  [1:0] m_axi_rd_0_ARBURST;
output  [1:0] m_axi_rd_0_ARLOCK;
output  [3:0] m_axi_rd_0_ARCACHE;
output  [2:0] m_axi_rd_0_ARPROT;
output  [3:0] m_axi_rd_0_ARQOS;
output  [3:0] m_axi_rd_0_ARREGION;
output  [0:0] m_axi_rd_0_ARUSER;
input   m_axi_rd_0_RVALID;
output   m_axi_rd_0_RREADY;
input  [255:0] m_axi_rd_0_RDATA;
input   m_axi_rd_0_RLAST;
input  [0:0] m_axi_rd_0_RID;
input  [8:0] m_axi_rd_0_RFIFONUM;
input  [0:0] m_axi_rd_0_RUSER;
input  [1:0] m_axi_rd_0_RRESP;
input   m_axi_rd_0_BVALID;
output   m_axi_rd_0_BREADY;
input  [1:0] m_axi_rd_0_BRESP;
input  [0:0] m_axi_rd_0_BID;
input  [0:0] m_axi_rd_0_BUSER;
output  [511:0] ingress_0_TDATA;
output   ingress_0_TVALID;
input   ingress_0_TREADY;
output  [63:0] ingress_0_TKEEP;
output  [63:0] ingress_0_TSTRB;
output  [0:0] ingress_0_TLAST;
output  [0:0] ingress_0_TDEST;
input  [63:0] gmem;
input   first;
input  [511:0] block_header;

reg ap_idle;
reg m_axi_rd_0_ARVALID;
reg m_axi_rd_0_RREADY;
reg ingress_0_TVALID;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln13_reg_281;
reg   [0:0] first_read_reg_277;
reg    ap_predicate_op38_readreq_state2;
reg    ap_block_state2_io;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg   [0:0] icmp_ln13_reg_281_pp0_iter4_reg;
reg   [0:0] first_read_reg_277_pp0_iter4_reg;
reg    ap_predicate_op46_read_state10;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_done_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ingress_0_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    rd_0_blk_n_AR;
wire    ap_block_pp0_stage1;
reg    rd_0_blk_n_R;
reg   [0:0] icmp_ln13_reg_281_pp0_iter3_reg;
reg   [0:0] first_read_reg_277_pp0_iter3_reg;
reg   [511:0] block_header_read_reg_271;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_predicate_op45_read_state9;
reg    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [511:0] block_header_read_reg_271_pp0_iter1_reg;
reg   [511:0] block_header_read_reg_271_pp0_iter2_reg;
reg   [511:0] block_header_read_reg_271_pp0_iter3_reg;
reg   [511:0] block_header_read_reg_271_pp0_iter4_reg;
wire   [0:0] first_read_read_fu_104_p2;
reg   [0:0] first_read_reg_277_pp0_iter1_reg;
reg   [0:0] first_read_reg_277_pp0_iter2_reg;
wire   [0:0] icmp_ln13_fu_169_p2;
reg   [0:0] icmp_ln13_reg_281_pp0_iter1_reg;
reg   [0:0] icmp_ln13_reg_281_pp0_iter2_reg;
wire   [24:0] trunc_ln16_fu_181_p1;
reg   [24:0] trunc_ln16_reg_285;
reg   [24:0] trunc_ln16_reg_285_pp0_iter1_reg;
reg   [24:0] trunc_ln16_reg_285_pp0_iter2_reg;
reg   [24:0] trunc_ln16_reg_285_pp0_iter3_reg;
reg   [24:0] trunc_ln16_reg_285_pp0_iter4_reg;
reg   [58:0] trunc_ln232_1_reg_290;
reg    ap_block_pp0_stage1_11001;
reg   [255:0] rd_0_addr_read_reg_301;
reg   [255:0] rd_0_addr_read_1_reg_306;
wire   [511:0] p_Result_4_fu_249_p3;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg   [511:0] ap_phi_mux_tmp_data_V_phi_fu_154_p4;
wire   [511:0] p_Result_s_fu_257_p3;
reg   [511:0] ap_phi_reg_pp0_iter5_tmp_data_V_reg_151;
wire   [511:0] ap_phi_reg_pp0_iter0_tmp_data_V_reg_151;
reg   [511:0] ap_phi_reg_pp0_iter1_tmp_data_V_reg_151;
reg   [511:0] ap_phi_reg_pp0_iter2_tmp_data_V_reg_151;
reg   [511:0] ap_phi_reg_pp0_iter3_tmp_data_V_reg_151;
reg   [511:0] ap_phi_reg_pp0_iter4_tmp_data_V_reg_151;
wire  signed [63:0] sext_ln232_fu_218_p1;
reg   [25:0] i_fu_94;
wire   [25:0] add_ln13_fu_175_p2;
wire    ap_loop_init;
reg   [25:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [30:0] shl_ln_fu_185_p3;
wire   [63:0] zext_ln16_fu_193_p1;
wire   [63:0] add_ln16_fu_197_p2;
wire   [31:0] trunc_ln674_fu_237_p1;
wire   [31:0] zext_ln232_fu_240_p1;
wire   [479:0] p_Result_s_32_fu_228_p4;
wire   [31:0] add_ln232_fu_243_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_254;
reg    ap_condition_305;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

hash_controller_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_254)) begin
        if (((first_read_reg_277_pp0_iter4_reg == 1'd1) & (icmp_ln13_reg_281_pp0_iter4_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_tmp_data_V_reg_151 <= p_Result_4_fu_249_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter4_tmp_data_V_reg_151;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_305)) begin
        if ((icmp_ln13_fu_169_p2 == 1'd0)) begin
            i_fu_94 <= add_ln13_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_94 <= 26'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter2_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter1_tmp_data_V_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter3_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter2_tmp_data_V_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter4_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter3_tmp_data_V_reg_151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_header_read_reg_271 <= block_header;
        block_header_read_reg_271_pp0_iter1_reg <= block_header_read_reg_271;
        block_header_read_reg_271_pp0_iter2_reg <= block_header_read_reg_271_pp0_iter1_reg;
        block_header_read_reg_271_pp0_iter3_reg <= block_header_read_reg_271_pp0_iter2_reg;
        block_header_read_reg_271_pp0_iter4_reg <= block_header_read_reg_271_pp0_iter3_reg;
        first_read_reg_277 <= first;
        first_read_reg_277_pp0_iter1_reg <= first_read_reg_277;
        first_read_reg_277_pp0_iter2_reg <= first_read_reg_277_pp0_iter1_reg;
        first_read_reg_277_pp0_iter3_reg <= first_read_reg_277_pp0_iter2_reg;
        first_read_reg_277_pp0_iter4_reg <= first_read_reg_277_pp0_iter3_reg;
        icmp_ln13_reg_281 <= icmp_ln13_fu_169_p2;
        icmp_ln13_reg_281_pp0_iter1_reg <= icmp_ln13_reg_281;
        icmp_ln13_reg_281_pp0_iter2_reg <= icmp_ln13_reg_281_pp0_iter1_reg;
        icmp_ln13_reg_281_pp0_iter3_reg <= icmp_ln13_reg_281_pp0_iter2_reg;
        icmp_ln13_reg_281_pp0_iter4_reg <= icmp_ln13_reg_281_pp0_iter3_reg;
        trunc_ln16_reg_285_pp0_iter1_reg <= trunc_ln16_reg_285;
        trunc_ln16_reg_285_pp0_iter2_reg <= trunc_ln16_reg_285_pp0_iter1_reg;
        trunc_ln16_reg_285_pp0_iter3_reg <= trunc_ln16_reg_285_pp0_iter2_reg;
        trunc_ln16_reg_285_pp0_iter4_reg <= trunc_ln16_reg_285_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op46_read_state10 == 1'b1))) begin
        rd_0_addr_read_1_reg_306 <= m_axi_rd_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op45_read_state9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rd_0_addr_read_reg_301 <= m_axi_rd_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_169_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln16_reg_285 <= trunc_ln16_fu_181_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_169_p2 == 1'd0) & (first_read_read_fu_104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln232_1_reg_290 <= {{add_ln16_fu_197_p2[63:5]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln13_reg_281 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln13_reg_281_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((first_read_reg_277_pp0_iter4_reg == 1'd0) & (icmp_ln13_reg_281_pp0_iter4_reg == 1'd0))) begin
        ap_phi_mux_tmp_data_V_phi_fu_154_p4 = p_Result_s_fu_257_p3;
    end else begin
        ap_phi_mux_tmp_data_V_phi_fu_154_p4 = ap_phi_reg_pp0_iter5_tmp_data_V_reg_151;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 26'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_94;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ingress_0_TDATA_blk_n = ingress_0_TREADY;
    end else begin
        ingress_0_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ingress_0_TVALID = 1'b1;
    end else begin
        ingress_0_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op38_readreq_state2 == 1'b1))) begin
        m_axi_rd_0_ARVALID = 1'b1;
    end else begin
        m_axi_rd_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op46_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op45_read_state9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_rd_0_RREADY = 1'b1;
    end else begin
        m_axi_rd_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op38_readreq_state2 == 1'b1))) begin
        rd_0_blk_n_AR = m_axi_rd_0_ARREADY;
    end else begin
        rd_0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op46_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (first_read_reg_277_pp0_iter3_reg == 1'd0) & (icmp_ln13_reg_281_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        rd_0_blk_n_R = m_axi_rd_0_RVALID;
    end else begin
        rd_0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_175_p2 = (ap_sig_allocacmp_i_2 + 26'd1);

assign add_ln16_fu_197_p2 = (zext_ln16_fu_193_p1 + gmem);

assign add_ln232_fu_243_p2 = (trunc_ln674_fu_237_p1 + zext_ln232_fu_240_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (ingress_0_TREADY == 1'b0)) | ((m_axi_rd_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op45_read_state9 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (ingress_0_TREADY == 1'b0)) | ((m_axi_rd_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op45_read_state9 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (ingress_0_TREADY == 1'b0)) | ((m_axi_rd_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op45_read_state9 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((m_axi_rd_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op46_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((m_axi_rd_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op46_read_state10 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((m_axi_rd_0_RVALID == 1'b0) & (ap_predicate_op46_read_state10 == 1'b1));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter5 = (ingress_0_TREADY == 1'b0);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_rd_0_ARREADY == 1'b0) & (ap_predicate_op38_readreq_state2 == 1'b1));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter4 = ((m_axi_rd_0_RVALID == 1'b0) & (ap_predicate_op45_read_state9 == 1'b1));
end

always @ (*) begin
    ap_condition_254 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_305 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_tmp_data_V_reg_151 = 'bx;

always @ (*) begin
    ap_predicate_op38_readreq_state2 = ((first_read_reg_277 == 1'd0) & (icmp_ln13_reg_281 == 1'd0));
end

always @ (*) begin
    ap_predicate_op45_read_state9 = ((first_read_reg_277_pp0_iter3_reg == 1'd0) & (icmp_ln13_reg_281_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op46_read_state10 = ((first_read_reg_277_pp0_iter4_reg == 1'd0) & (icmp_ln13_reg_281_pp0_iter4_reg == 1'd0));
end

assign first_read_read_fu_104_p2 = first;

assign icmp_ln13_fu_169_p2 = ((ap_sig_allocacmp_i_2 == 26'd33554432) ? 1'b1 : 1'b0);

assign ingress_0_TDATA = ap_phi_mux_tmp_data_V_phi_fu_154_p4;

assign ingress_0_TDEST = 1'd0;

assign ingress_0_TKEEP = 64'd0;

assign ingress_0_TLAST = 1'd0;

assign ingress_0_TSTRB = 64'd0;

assign m_axi_rd_0_ARADDR = sext_ln232_fu_218_p1;

assign m_axi_rd_0_ARBURST = 2'd0;

assign m_axi_rd_0_ARCACHE = 4'd0;

assign m_axi_rd_0_ARID = 1'd0;

assign m_axi_rd_0_ARLEN = 32'd2;

assign m_axi_rd_0_ARLOCK = 2'd0;

assign m_axi_rd_0_ARPROT = 3'd0;

assign m_axi_rd_0_ARQOS = 4'd0;

assign m_axi_rd_0_ARREGION = 4'd0;

assign m_axi_rd_0_ARSIZE = 3'd0;

assign m_axi_rd_0_ARUSER = 1'd0;

assign m_axi_rd_0_AWADDR = 64'd0;

assign m_axi_rd_0_AWBURST = 2'd0;

assign m_axi_rd_0_AWCACHE = 4'd0;

assign m_axi_rd_0_AWID = 1'd0;

assign m_axi_rd_0_AWLEN = 32'd0;

assign m_axi_rd_0_AWLOCK = 2'd0;

assign m_axi_rd_0_AWPROT = 3'd0;

assign m_axi_rd_0_AWQOS = 4'd0;

assign m_axi_rd_0_AWREGION = 4'd0;

assign m_axi_rd_0_AWSIZE = 3'd0;

assign m_axi_rd_0_AWUSER = 1'd0;

assign m_axi_rd_0_AWVALID = 1'b0;

assign m_axi_rd_0_BREADY = 1'b0;

assign m_axi_rd_0_WDATA = 256'd0;

assign m_axi_rd_0_WID = 1'd0;

assign m_axi_rd_0_WLAST = 1'b0;

assign m_axi_rd_0_WSTRB = 32'd0;

assign m_axi_rd_0_WUSER = 1'd0;

assign m_axi_rd_0_WVALID = 1'b0;

assign p_Result_4_fu_249_p3 = {{p_Result_s_32_fu_228_p4}, {add_ln232_fu_243_p2}};

assign p_Result_s_32_fu_228_p4 = {{block_header_read_reg_271_pp0_iter4_reg[511:32]}};

assign p_Result_s_fu_257_p3 = {{rd_0_addr_read_1_reg_306}, {rd_0_addr_read_reg_301}};

assign sext_ln232_fu_218_p1 = $signed(trunc_ln232_1_reg_290);

assign shl_ln_fu_185_p3 = {{trunc_ln16_fu_181_p1}, {6'd0}};

assign trunc_ln16_fu_181_p1 = ap_sig_allocacmp_i_2[24:0];

assign trunc_ln674_fu_237_p1 = block_header_read_reg_271_pp0_iter4_reg[31:0];

assign zext_ln16_fu_193_p1 = shl_ln_fu_185_p3;

assign zext_ln232_fu_240_p1 = trunc_ln16_reg_285_pp0_iter4_reg;

endmodule //hash_controller_ingress
