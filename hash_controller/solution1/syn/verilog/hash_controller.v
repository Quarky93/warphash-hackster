// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hash_controller_hash_controller,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.220000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.620600,HLS_SYN_LAT=67108877,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=0,HLS_SYN_FF=17440,HLS_SYN_LUT=9168,HLS_VERSION=2021_2}" *)

module hash_controller (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        m_axi_rd_0_AWVALID,
        m_axi_rd_0_AWREADY,
        m_axi_rd_0_AWADDR,
        m_axi_rd_0_AWID,
        m_axi_rd_0_AWLEN,
        m_axi_rd_0_AWSIZE,
        m_axi_rd_0_AWBURST,
        m_axi_rd_0_AWLOCK,
        m_axi_rd_0_AWCACHE,
        m_axi_rd_0_AWPROT,
        m_axi_rd_0_AWQOS,
        m_axi_rd_0_AWREGION,
        m_axi_rd_0_AWUSER,
        m_axi_rd_0_WVALID,
        m_axi_rd_0_WREADY,
        m_axi_rd_0_WDATA,
        m_axi_rd_0_WSTRB,
        m_axi_rd_0_WLAST,
        m_axi_rd_0_WID,
        m_axi_rd_0_WUSER,
        m_axi_rd_0_ARVALID,
        m_axi_rd_0_ARREADY,
        m_axi_rd_0_ARADDR,
        m_axi_rd_0_ARID,
        m_axi_rd_0_ARLEN,
        m_axi_rd_0_ARSIZE,
        m_axi_rd_0_ARBURST,
        m_axi_rd_0_ARLOCK,
        m_axi_rd_0_ARCACHE,
        m_axi_rd_0_ARPROT,
        m_axi_rd_0_ARQOS,
        m_axi_rd_0_ARREGION,
        m_axi_rd_0_ARUSER,
        m_axi_rd_0_RVALID,
        m_axi_rd_0_RREADY,
        m_axi_rd_0_RDATA,
        m_axi_rd_0_RLAST,
        m_axi_rd_0_RID,
        m_axi_rd_0_RUSER,
        m_axi_rd_0_RRESP,
        m_axi_rd_0_BVALID,
        m_axi_rd_0_BREADY,
        m_axi_rd_0_BRESP,
        m_axi_rd_0_BID,
        m_axi_rd_0_BUSER,
        m_axi_rd_1_AWVALID,
        m_axi_rd_1_AWREADY,
        m_axi_rd_1_AWADDR,
        m_axi_rd_1_AWID,
        m_axi_rd_1_AWLEN,
        m_axi_rd_1_AWSIZE,
        m_axi_rd_1_AWBURST,
        m_axi_rd_1_AWLOCK,
        m_axi_rd_1_AWCACHE,
        m_axi_rd_1_AWPROT,
        m_axi_rd_1_AWQOS,
        m_axi_rd_1_AWREGION,
        m_axi_rd_1_AWUSER,
        m_axi_rd_1_WVALID,
        m_axi_rd_1_WREADY,
        m_axi_rd_1_WDATA,
        m_axi_rd_1_WSTRB,
        m_axi_rd_1_WLAST,
        m_axi_rd_1_WID,
        m_axi_rd_1_WUSER,
        m_axi_rd_1_ARVALID,
        m_axi_rd_1_ARREADY,
        m_axi_rd_1_ARADDR,
        m_axi_rd_1_ARID,
        m_axi_rd_1_ARLEN,
        m_axi_rd_1_ARSIZE,
        m_axi_rd_1_ARBURST,
        m_axi_rd_1_ARLOCK,
        m_axi_rd_1_ARCACHE,
        m_axi_rd_1_ARPROT,
        m_axi_rd_1_ARQOS,
        m_axi_rd_1_ARREGION,
        m_axi_rd_1_ARUSER,
        m_axi_rd_1_RVALID,
        m_axi_rd_1_RREADY,
        m_axi_rd_1_RDATA,
        m_axi_rd_1_RLAST,
        m_axi_rd_1_RID,
        m_axi_rd_1_RUSER,
        m_axi_rd_1_RRESP,
        m_axi_rd_1_BVALID,
        m_axi_rd_1_BREADY,
        m_axi_rd_1_BRESP,
        m_axi_rd_1_BID,
        m_axi_rd_1_BUSER,
        m_axi_wr_0_AWVALID,
        m_axi_wr_0_AWREADY,
        m_axi_wr_0_AWADDR,
        m_axi_wr_0_AWID,
        m_axi_wr_0_AWLEN,
        m_axi_wr_0_AWSIZE,
        m_axi_wr_0_AWBURST,
        m_axi_wr_0_AWLOCK,
        m_axi_wr_0_AWCACHE,
        m_axi_wr_0_AWPROT,
        m_axi_wr_0_AWQOS,
        m_axi_wr_0_AWREGION,
        m_axi_wr_0_AWUSER,
        m_axi_wr_0_WVALID,
        m_axi_wr_0_WREADY,
        m_axi_wr_0_WDATA,
        m_axi_wr_0_WSTRB,
        m_axi_wr_0_WLAST,
        m_axi_wr_0_WID,
        m_axi_wr_0_WUSER,
        m_axi_wr_0_ARVALID,
        m_axi_wr_0_ARREADY,
        m_axi_wr_0_ARADDR,
        m_axi_wr_0_ARID,
        m_axi_wr_0_ARLEN,
        m_axi_wr_0_ARSIZE,
        m_axi_wr_0_ARBURST,
        m_axi_wr_0_ARLOCK,
        m_axi_wr_0_ARCACHE,
        m_axi_wr_0_ARPROT,
        m_axi_wr_0_ARQOS,
        m_axi_wr_0_ARREGION,
        m_axi_wr_0_ARUSER,
        m_axi_wr_0_RVALID,
        m_axi_wr_0_RREADY,
        m_axi_wr_0_RDATA,
        m_axi_wr_0_RLAST,
        m_axi_wr_0_RID,
        m_axi_wr_0_RUSER,
        m_axi_wr_0_RRESP,
        m_axi_wr_0_BVALID,
        m_axi_wr_0_BREADY,
        m_axi_wr_0_BRESP,
        m_axi_wr_0_BID,
        m_axi_wr_0_BUSER,
        m_axi_wr_1_AWVALID,
        m_axi_wr_1_AWREADY,
        m_axi_wr_1_AWADDR,
        m_axi_wr_1_AWID,
        m_axi_wr_1_AWLEN,
        m_axi_wr_1_AWSIZE,
        m_axi_wr_1_AWBURST,
        m_axi_wr_1_AWLOCK,
        m_axi_wr_1_AWCACHE,
        m_axi_wr_1_AWPROT,
        m_axi_wr_1_AWQOS,
        m_axi_wr_1_AWREGION,
        m_axi_wr_1_AWUSER,
        m_axi_wr_1_WVALID,
        m_axi_wr_1_WREADY,
        m_axi_wr_1_WDATA,
        m_axi_wr_1_WSTRB,
        m_axi_wr_1_WLAST,
        m_axi_wr_1_WID,
        m_axi_wr_1_WUSER,
        m_axi_wr_1_ARVALID,
        m_axi_wr_1_ARREADY,
        m_axi_wr_1_ARADDR,
        m_axi_wr_1_ARID,
        m_axi_wr_1_ARLEN,
        m_axi_wr_1_ARSIZE,
        m_axi_wr_1_ARBURST,
        m_axi_wr_1_ARLOCK,
        m_axi_wr_1_ARCACHE,
        m_axi_wr_1_ARPROT,
        m_axi_wr_1_ARQOS,
        m_axi_wr_1_ARREGION,
        m_axi_wr_1_ARUSER,
        m_axi_wr_1_RVALID,
        m_axi_wr_1_RREADY,
        m_axi_wr_1_RDATA,
        m_axi_wr_1_RLAST,
        m_axi_wr_1_RID,
        m_axi_wr_1_RUSER,
        m_axi_wr_1_RRESP,
        m_axi_wr_1_BVALID,
        m_axi_wr_1_BREADY,
        m_axi_wr_1_BRESP,
        m_axi_wr_1_BID,
        m_axi_wr_1_BUSER,
        ingress_0_TDATA,
        ingress_0_TVALID,
        ingress_0_TREADY,
        ingress_0_TKEEP,
        ingress_0_TSTRB,
        ingress_0_TLAST,
        ingress_0_TDEST,
        ingress_1_TDATA,
        ingress_1_TVALID,
        ingress_1_TREADY,
        ingress_1_TKEEP,
        ingress_1_TSTRB,
        ingress_1_TLAST,
        ingress_1_TDEST,
        egress_0_TDATA,
        egress_0_TVALID,
        egress_0_TREADY,
        egress_0_TKEEP,
        egress_0_TSTRB,
        egress_0_TLAST,
        egress_0_TDEST,
        egress_1_TDATA,
        egress_1_TVALID,
        egress_1_TREADY,
        egress_1_TKEEP,
        egress_1_TSTRB,
        egress_1_TLAST,
        egress_1_TDEST,
        golden_fifo_0_TDATA,
        golden_fifo_0_TVALID,
        golden_fifo_0_TREADY,
        golden_fifo_1_TDATA,
        golden_fifo_1_TVALID,
        golden_fifo_1_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RD_0_ID_WIDTH = 1;
parameter    C_M_AXI_RD_0_ADDR_WIDTH = 64;
parameter    C_M_AXI_RD_0_DATA_WIDTH = 256;
parameter    C_M_AXI_RD_0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RD_0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RD_0_WUSER_WIDTH = 1;
parameter    C_M_AXI_RD_0_RUSER_WIDTH = 1;
parameter    C_M_AXI_RD_0_BUSER_WIDTH = 1;
parameter    C_M_AXI_RD_0_USER_VALUE = 0;
parameter    C_M_AXI_RD_0_PROT_VALUE = 0;
parameter    C_M_AXI_RD_0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RD_1_ID_WIDTH = 1;
parameter    C_M_AXI_RD_1_ADDR_WIDTH = 64;
parameter    C_M_AXI_RD_1_DATA_WIDTH = 256;
parameter    C_M_AXI_RD_1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RD_1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RD_1_WUSER_WIDTH = 1;
parameter    C_M_AXI_RD_1_RUSER_WIDTH = 1;
parameter    C_M_AXI_RD_1_BUSER_WIDTH = 1;
parameter    C_M_AXI_RD_1_USER_VALUE = 0;
parameter    C_M_AXI_RD_1_PROT_VALUE = 0;
parameter    C_M_AXI_RD_1_CACHE_VALUE = 3;
parameter    C_M_AXI_WR_0_ID_WIDTH = 1;
parameter    C_M_AXI_WR_0_ADDR_WIDTH = 64;
parameter    C_M_AXI_WR_0_DATA_WIDTH = 256;
parameter    C_M_AXI_WR_0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_WR_0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WR_0_WUSER_WIDTH = 1;
parameter    C_M_AXI_WR_0_RUSER_WIDTH = 1;
parameter    C_M_AXI_WR_0_BUSER_WIDTH = 1;
parameter    C_M_AXI_WR_0_USER_VALUE = 0;
parameter    C_M_AXI_WR_0_PROT_VALUE = 0;
parameter    C_M_AXI_WR_0_CACHE_VALUE = 3;
parameter    C_M_AXI_WR_1_ID_WIDTH = 1;
parameter    C_M_AXI_WR_1_ADDR_WIDTH = 64;
parameter    C_M_AXI_WR_1_DATA_WIDTH = 256;
parameter    C_M_AXI_WR_1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_WR_1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WR_1_WUSER_WIDTH = 1;
parameter    C_M_AXI_WR_1_RUSER_WIDTH = 1;
parameter    C_M_AXI_WR_1_BUSER_WIDTH = 1;
parameter    C_M_AXI_WR_1_USER_VALUE = 0;
parameter    C_M_AXI_WR_1_PROT_VALUE = 0;
parameter    C_M_AXI_WR_1_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RD_0_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RD_1_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WR_0_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WR_1_WSTRB_WIDTH = (256 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
output   m_axi_rd_0_AWVALID;
input   m_axi_rd_0_AWREADY;
output  [C_M_AXI_RD_0_ADDR_WIDTH - 1:0] m_axi_rd_0_AWADDR;
output  [C_M_AXI_RD_0_ID_WIDTH - 1:0] m_axi_rd_0_AWID;
output  [7:0] m_axi_rd_0_AWLEN;
output  [2:0] m_axi_rd_0_AWSIZE;
output  [1:0] m_axi_rd_0_AWBURST;
output  [1:0] m_axi_rd_0_AWLOCK;
output  [3:0] m_axi_rd_0_AWCACHE;
output  [2:0] m_axi_rd_0_AWPROT;
output  [3:0] m_axi_rd_0_AWQOS;
output  [3:0] m_axi_rd_0_AWREGION;
output  [C_M_AXI_RD_0_AWUSER_WIDTH - 1:0] m_axi_rd_0_AWUSER;
output   m_axi_rd_0_WVALID;
input   m_axi_rd_0_WREADY;
output  [C_M_AXI_RD_0_DATA_WIDTH - 1:0] m_axi_rd_0_WDATA;
output  [C_M_AXI_RD_0_WSTRB_WIDTH - 1:0] m_axi_rd_0_WSTRB;
output   m_axi_rd_0_WLAST;
output  [C_M_AXI_RD_0_ID_WIDTH - 1:0] m_axi_rd_0_WID;
output  [C_M_AXI_RD_0_WUSER_WIDTH - 1:0] m_axi_rd_0_WUSER;
output   m_axi_rd_0_ARVALID;
input   m_axi_rd_0_ARREADY;
output  [C_M_AXI_RD_0_ADDR_WIDTH - 1:0] m_axi_rd_0_ARADDR;
output  [C_M_AXI_RD_0_ID_WIDTH - 1:0] m_axi_rd_0_ARID;
output  [7:0] m_axi_rd_0_ARLEN;
output  [2:0] m_axi_rd_0_ARSIZE;
output  [1:0] m_axi_rd_0_ARBURST;
output  [1:0] m_axi_rd_0_ARLOCK;
output  [3:0] m_axi_rd_0_ARCACHE;
output  [2:0] m_axi_rd_0_ARPROT;
output  [3:0] m_axi_rd_0_ARQOS;
output  [3:0] m_axi_rd_0_ARREGION;
output  [C_M_AXI_RD_0_ARUSER_WIDTH - 1:0] m_axi_rd_0_ARUSER;
input   m_axi_rd_0_RVALID;
output   m_axi_rd_0_RREADY;
input  [C_M_AXI_RD_0_DATA_WIDTH - 1:0] m_axi_rd_0_RDATA;
input   m_axi_rd_0_RLAST;
input  [C_M_AXI_RD_0_ID_WIDTH - 1:0] m_axi_rd_0_RID;
input  [C_M_AXI_RD_0_RUSER_WIDTH - 1:0] m_axi_rd_0_RUSER;
input  [1:0] m_axi_rd_0_RRESP;
input   m_axi_rd_0_BVALID;
output   m_axi_rd_0_BREADY;
input  [1:0] m_axi_rd_0_BRESP;
input  [C_M_AXI_RD_0_ID_WIDTH - 1:0] m_axi_rd_0_BID;
input  [C_M_AXI_RD_0_BUSER_WIDTH - 1:0] m_axi_rd_0_BUSER;
output   m_axi_rd_1_AWVALID;
input   m_axi_rd_1_AWREADY;
output  [C_M_AXI_RD_1_ADDR_WIDTH - 1:0] m_axi_rd_1_AWADDR;
output  [C_M_AXI_RD_1_ID_WIDTH - 1:0] m_axi_rd_1_AWID;
output  [7:0] m_axi_rd_1_AWLEN;
output  [2:0] m_axi_rd_1_AWSIZE;
output  [1:0] m_axi_rd_1_AWBURST;
output  [1:0] m_axi_rd_1_AWLOCK;
output  [3:0] m_axi_rd_1_AWCACHE;
output  [2:0] m_axi_rd_1_AWPROT;
output  [3:0] m_axi_rd_1_AWQOS;
output  [3:0] m_axi_rd_1_AWREGION;
output  [C_M_AXI_RD_1_AWUSER_WIDTH - 1:0] m_axi_rd_1_AWUSER;
output   m_axi_rd_1_WVALID;
input   m_axi_rd_1_WREADY;
output  [C_M_AXI_RD_1_DATA_WIDTH - 1:0] m_axi_rd_1_WDATA;
output  [C_M_AXI_RD_1_WSTRB_WIDTH - 1:0] m_axi_rd_1_WSTRB;
output   m_axi_rd_1_WLAST;
output  [C_M_AXI_RD_1_ID_WIDTH - 1:0] m_axi_rd_1_WID;
output  [C_M_AXI_RD_1_WUSER_WIDTH - 1:0] m_axi_rd_1_WUSER;
output   m_axi_rd_1_ARVALID;
input   m_axi_rd_1_ARREADY;
output  [C_M_AXI_RD_1_ADDR_WIDTH - 1:0] m_axi_rd_1_ARADDR;
output  [C_M_AXI_RD_1_ID_WIDTH - 1:0] m_axi_rd_1_ARID;
output  [7:0] m_axi_rd_1_ARLEN;
output  [2:0] m_axi_rd_1_ARSIZE;
output  [1:0] m_axi_rd_1_ARBURST;
output  [1:0] m_axi_rd_1_ARLOCK;
output  [3:0] m_axi_rd_1_ARCACHE;
output  [2:0] m_axi_rd_1_ARPROT;
output  [3:0] m_axi_rd_1_ARQOS;
output  [3:0] m_axi_rd_1_ARREGION;
output  [C_M_AXI_RD_1_ARUSER_WIDTH - 1:0] m_axi_rd_1_ARUSER;
input   m_axi_rd_1_RVALID;
output   m_axi_rd_1_RREADY;
input  [C_M_AXI_RD_1_DATA_WIDTH - 1:0] m_axi_rd_1_RDATA;
input   m_axi_rd_1_RLAST;
input  [C_M_AXI_RD_1_ID_WIDTH - 1:0] m_axi_rd_1_RID;
input  [C_M_AXI_RD_1_RUSER_WIDTH - 1:0] m_axi_rd_1_RUSER;
input  [1:0] m_axi_rd_1_RRESP;
input   m_axi_rd_1_BVALID;
output   m_axi_rd_1_BREADY;
input  [1:0] m_axi_rd_1_BRESP;
input  [C_M_AXI_RD_1_ID_WIDTH - 1:0] m_axi_rd_1_BID;
input  [C_M_AXI_RD_1_BUSER_WIDTH - 1:0] m_axi_rd_1_BUSER;
output   m_axi_wr_0_AWVALID;
input   m_axi_wr_0_AWREADY;
output  [C_M_AXI_WR_0_ADDR_WIDTH - 1:0] m_axi_wr_0_AWADDR;
output  [C_M_AXI_WR_0_ID_WIDTH - 1:0] m_axi_wr_0_AWID;
output  [7:0] m_axi_wr_0_AWLEN;
output  [2:0] m_axi_wr_0_AWSIZE;
output  [1:0] m_axi_wr_0_AWBURST;
output  [1:0] m_axi_wr_0_AWLOCK;
output  [3:0] m_axi_wr_0_AWCACHE;
output  [2:0] m_axi_wr_0_AWPROT;
output  [3:0] m_axi_wr_0_AWQOS;
output  [3:0] m_axi_wr_0_AWREGION;
output  [C_M_AXI_WR_0_AWUSER_WIDTH - 1:0] m_axi_wr_0_AWUSER;
output   m_axi_wr_0_WVALID;
input   m_axi_wr_0_WREADY;
output  [C_M_AXI_WR_0_DATA_WIDTH - 1:0] m_axi_wr_0_WDATA;
output  [C_M_AXI_WR_0_WSTRB_WIDTH - 1:0] m_axi_wr_0_WSTRB;
output   m_axi_wr_0_WLAST;
output  [C_M_AXI_WR_0_ID_WIDTH - 1:0] m_axi_wr_0_WID;
output  [C_M_AXI_WR_0_WUSER_WIDTH - 1:0] m_axi_wr_0_WUSER;
output   m_axi_wr_0_ARVALID;
input   m_axi_wr_0_ARREADY;
output  [C_M_AXI_WR_0_ADDR_WIDTH - 1:0] m_axi_wr_0_ARADDR;
output  [C_M_AXI_WR_0_ID_WIDTH - 1:0] m_axi_wr_0_ARID;
output  [7:0] m_axi_wr_0_ARLEN;
output  [2:0] m_axi_wr_0_ARSIZE;
output  [1:0] m_axi_wr_0_ARBURST;
output  [1:0] m_axi_wr_0_ARLOCK;
output  [3:0] m_axi_wr_0_ARCACHE;
output  [2:0] m_axi_wr_0_ARPROT;
output  [3:0] m_axi_wr_0_ARQOS;
output  [3:0] m_axi_wr_0_ARREGION;
output  [C_M_AXI_WR_0_ARUSER_WIDTH - 1:0] m_axi_wr_0_ARUSER;
input   m_axi_wr_0_RVALID;
output   m_axi_wr_0_RREADY;
input  [C_M_AXI_WR_0_DATA_WIDTH - 1:0] m_axi_wr_0_RDATA;
input   m_axi_wr_0_RLAST;
input  [C_M_AXI_WR_0_ID_WIDTH - 1:0] m_axi_wr_0_RID;
input  [C_M_AXI_WR_0_RUSER_WIDTH - 1:0] m_axi_wr_0_RUSER;
input  [1:0] m_axi_wr_0_RRESP;
input   m_axi_wr_0_BVALID;
output   m_axi_wr_0_BREADY;
input  [1:0] m_axi_wr_0_BRESP;
input  [C_M_AXI_WR_0_ID_WIDTH - 1:0] m_axi_wr_0_BID;
input  [C_M_AXI_WR_0_BUSER_WIDTH - 1:0] m_axi_wr_0_BUSER;
output   m_axi_wr_1_AWVALID;
input   m_axi_wr_1_AWREADY;
output  [C_M_AXI_WR_1_ADDR_WIDTH - 1:0] m_axi_wr_1_AWADDR;
output  [C_M_AXI_WR_1_ID_WIDTH - 1:0] m_axi_wr_1_AWID;
output  [7:0] m_axi_wr_1_AWLEN;
output  [2:0] m_axi_wr_1_AWSIZE;
output  [1:0] m_axi_wr_1_AWBURST;
output  [1:0] m_axi_wr_1_AWLOCK;
output  [3:0] m_axi_wr_1_AWCACHE;
output  [2:0] m_axi_wr_1_AWPROT;
output  [3:0] m_axi_wr_1_AWQOS;
output  [3:0] m_axi_wr_1_AWREGION;
output  [C_M_AXI_WR_1_AWUSER_WIDTH - 1:0] m_axi_wr_1_AWUSER;
output   m_axi_wr_1_WVALID;
input   m_axi_wr_1_WREADY;
output  [C_M_AXI_WR_1_DATA_WIDTH - 1:0] m_axi_wr_1_WDATA;
output  [C_M_AXI_WR_1_WSTRB_WIDTH - 1:0] m_axi_wr_1_WSTRB;
output   m_axi_wr_1_WLAST;
output  [C_M_AXI_WR_1_ID_WIDTH - 1:0] m_axi_wr_1_WID;
output  [C_M_AXI_WR_1_WUSER_WIDTH - 1:0] m_axi_wr_1_WUSER;
output   m_axi_wr_1_ARVALID;
input   m_axi_wr_1_ARREADY;
output  [C_M_AXI_WR_1_ADDR_WIDTH - 1:0] m_axi_wr_1_ARADDR;
output  [C_M_AXI_WR_1_ID_WIDTH - 1:0] m_axi_wr_1_ARID;
output  [7:0] m_axi_wr_1_ARLEN;
output  [2:0] m_axi_wr_1_ARSIZE;
output  [1:0] m_axi_wr_1_ARBURST;
output  [1:0] m_axi_wr_1_ARLOCK;
output  [3:0] m_axi_wr_1_ARCACHE;
output  [2:0] m_axi_wr_1_ARPROT;
output  [3:0] m_axi_wr_1_ARQOS;
output  [3:0] m_axi_wr_1_ARREGION;
output  [C_M_AXI_WR_1_ARUSER_WIDTH - 1:0] m_axi_wr_1_ARUSER;
input   m_axi_wr_1_RVALID;
output   m_axi_wr_1_RREADY;
input  [C_M_AXI_WR_1_DATA_WIDTH - 1:0] m_axi_wr_1_RDATA;
input   m_axi_wr_1_RLAST;
input  [C_M_AXI_WR_1_ID_WIDTH - 1:0] m_axi_wr_1_RID;
input  [C_M_AXI_WR_1_RUSER_WIDTH - 1:0] m_axi_wr_1_RUSER;
input  [1:0] m_axi_wr_1_RRESP;
input   m_axi_wr_1_BVALID;
output   m_axi_wr_1_BREADY;
input  [1:0] m_axi_wr_1_BRESP;
input  [C_M_AXI_WR_1_ID_WIDTH - 1:0] m_axi_wr_1_BID;
input  [C_M_AXI_WR_1_BUSER_WIDTH - 1:0] m_axi_wr_1_BUSER;
output  [511:0] ingress_0_TDATA;
output   ingress_0_TVALID;
input   ingress_0_TREADY;
output  [63:0] ingress_0_TKEEP;
output  [63:0] ingress_0_TSTRB;
output  [0:0] ingress_0_TLAST;
output  [0:0] ingress_0_TDEST;
output  [511:0] ingress_1_TDATA;
output   ingress_1_TVALID;
input   ingress_1_TREADY;
output  [63:0] ingress_1_TKEEP;
output  [63:0] ingress_1_TSTRB;
output  [0:0] ingress_1_TLAST;
output  [0:0] ingress_1_TDEST;
input  [511:0] egress_0_TDATA;
input   egress_0_TVALID;
output   egress_0_TREADY;
input  [63:0] egress_0_TKEEP;
input  [63:0] egress_0_TSTRB;
input  [0:0] egress_0_TLAST;
input  [0:0] egress_0_TDEST;
input  [511:0] egress_1_TDATA;
input   egress_1_TVALID;
output   egress_1_TREADY;
input  [63:0] egress_1_TKEEP;
input  [63:0] egress_1_TSTRB;
input  [0:0] egress_1_TLAST;
input  [0:0] egress_1_TDEST;
output  [31:0] golden_fifo_0_TDATA;
output   golden_fifo_0_TVALID;
input   golden_fifo_0_TREADY;
output  [31:0] golden_fifo_1_TDATA;
output   golden_fifo_1_TVALID;
input   golden_fifo_1_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

wire   [0:0] ap_local_deadlock;
 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] rd_0_offset;
wire   [63:0] rd_1_offset;
wire   [63:0] wr_0_offset;
wire   [63:0] wr_1_offset;
wire    first;
wire    last;
wire   [511:0] block_header;
wire   [511:0] target;
reg   [511:0] target_read_reg_244;
reg   [511:0] block_header_read_reg_249;
reg   [0:0] last_read_reg_254;
reg   [0:0] first_read_reg_259;
reg   [63:0] wr_1_offset_read_reg_264;
reg   [63:0] wr_0_offset_read_reg_269;
reg   [63:0] rd_1_offset_read_reg_274;
reg   [63:0] rd_0_offset_read_reg_279;
wire    grp_pass_fu_180_m_axi_rd_0_AWVALID;
wire   [63:0] grp_pass_fu_180_m_axi_rd_0_AWADDR;
wire   [0:0] grp_pass_fu_180_m_axi_rd_0_AWID;
wire   [31:0] grp_pass_fu_180_m_axi_rd_0_AWLEN;
wire   [2:0] grp_pass_fu_180_m_axi_rd_0_AWSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_rd_0_AWBURST;
wire   [1:0] grp_pass_fu_180_m_axi_rd_0_AWLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_rd_0_AWCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_rd_0_AWPROT;
wire   [3:0] grp_pass_fu_180_m_axi_rd_0_AWQOS;
wire   [3:0] grp_pass_fu_180_m_axi_rd_0_AWREGION;
wire   [0:0] grp_pass_fu_180_m_axi_rd_0_AWUSER;
wire    grp_pass_fu_180_m_axi_rd_0_WVALID;
wire   [255:0] grp_pass_fu_180_m_axi_rd_0_WDATA;
wire   [31:0] grp_pass_fu_180_m_axi_rd_0_WSTRB;
wire    grp_pass_fu_180_m_axi_rd_0_WLAST;
wire   [0:0] grp_pass_fu_180_m_axi_rd_0_WID;
wire   [0:0] grp_pass_fu_180_m_axi_rd_0_WUSER;
wire    grp_pass_fu_180_m_axi_rd_0_ARVALID;
wire   [63:0] grp_pass_fu_180_m_axi_rd_0_ARADDR;
wire   [0:0] grp_pass_fu_180_m_axi_rd_0_ARID;
wire   [31:0] grp_pass_fu_180_m_axi_rd_0_ARLEN;
wire   [2:0] grp_pass_fu_180_m_axi_rd_0_ARSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_rd_0_ARBURST;
wire   [1:0] grp_pass_fu_180_m_axi_rd_0_ARLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_rd_0_ARCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_rd_0_ARPROT;
wire   [3:0] grp_pass_fu_180_m_axi_rd_0_ARQOS;
wire   [3:0] grp_pass_fu_180_m_axi_rd_0_ARREGION;
wire   [0:0] grp_pass_fu_180_m_axi_rd_0_ARUSER;
wire    grp_pass_fu_180_m_axi_rd_0_RREADY;
wire    grp_pass_fu_180_m_axi_rd_0_BREADY;
wire    grp_pass_fu_180_m_axi_rd_1_AWVALID;
wire   [63:0] grp_pass_fu_180_m_axi_rd_1_AWADDR;
wire   [0:0] grp_pass_fu_180_m_axi_rd_1_AWID;
wire   [31:0] grp_pass_fu_180_m_axi_rd_1_AWLEN;
wire   [2:0] grp_pass_fu_180_m_axi_rd_1_AWSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_rd_1_AWBURST;
wire   [1:0] grp_pass_fu_180_m_axi_rd_1_AWLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_rd_1_AWCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_rd_1_AWPROT;
wire   [3:0] grp_pass_fu_180_m_axi_rd_1_AWQOS;
wire   [3:0] grp_pass_fu_180_m_axi_rd_1_AWREGION;
wire   [0:0] grp_pass_fu_180_m_axi_rd_1_AWUSER;
wire    grp_pass_fu_180_m_axi_rd_1_WVALID;
wire   [255:0] grp_pass_fu_180_m_axi_rd_1_WDATA;
wire   [31:0] grp_pass_fu_180_m_axi_rd_1_WSTRB;
wire    grp_pass_fu_180_m_axi_rd_1_WLAST;
wire   [0:0] grp_pass_fu_180_m_axi_rd_1_WID;
wire   [0:0] grp_pass_fu_180_m_axi_rd_1_WUSER;
wire    grp_pass_fu_180_m_axi_rd_1_ARVALID;
wire   [63:0] grp_pass_fu_180_m_axi_rd_1_ARADDR;
wire   [0:0] grp_pass_fu_180_m_axi_rd_1_ARID;
wire   [31:0] grp_pass_fu_180_m_axi_rd_1_ARLEN;
wire   [2:0] grp_pass_fu_180_m_axi_rd_1_ARSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_rd_1_ARBURST;
wire   [1:0] grp_pass_fu_180_m_axi_rd_1_ARLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_rd_1_ARCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_rd_1_ARPROT;
wire   [3:0] grp_pass_fu_180_m_axi_rd_1_ARQOS;
wire   [3:0] grp_pass_fu_180_m_axi_rd_1_ARREGION;
wire   [0:0] grp_pass_fu_180_m_axi_rd_1_ARUSER;
wire    grp_pass_fu_180_m_axi_rd_1_RREADY;
wire    grp_pass_fu_180_m_axi_rd_1_BREADY;
wire    grp_pass_fu_180_m_axi_wr_0_AWVALID;
wire   [63:0] grp_pass_fu_180_m_axi_wr_0_AWADDR;
wire   [0:0] grp_pass_fu_180_m_axi_wr_0_AWID;
wire   [31:0] grp_pass_fu_180_m_axi_wr_0_AWLEN;
wire   [2:0] grp_pass_fu_180_m_axi_wr_0_AWSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_wr_0_AWBURST;
wire   [1:0] grp_pass_fu_180_m_axi_wr_0_AWLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_wr_0_AWCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_wr_0_AWPROT;
wire   [3:0] grp_pass_fu_180_m_axi_wr_0_AWQOS;
wire   [3:0] grp_pass_fu_180_m_axi_wr_0_AWREGION;
wire   [0:0] grp_pass_fu_180_m_axi_wr_0_AWUSER;
wire    grp_pass_fu_180_m_axi_wr_0_WVALID;
wire   [255:0] grp_pass_fu_180_m_axi_wr_0_WDATA;
wire   [31:0] grp_pass_fu_180_m_axi_wr_0_WSTRB;
wire    grp_pass_fu_180_m_axi_wr_0_WLAST;
wire   [0:0] grp_pass_fu_180_m_axi_wr_0_WID;
wire   [0:0] grp_pass_fu_180_m_axi_wr_0_WUSER;
wire    grp_pass_fu_180_m_axi_wr_0_ARVALID;
wire   [63:0] grp_pass_fu_180_m_axi_wr_0_ARADDR;
wire   [0:0] grp_pass_fu_180_m_axi_wr_0_ARID;
wire   [31:0] grp_pass_fu_180_m_axi_wr_0_ARLEN;
wire   [2:0] grp_pass_fu_180_m_axi_wr_0_ARSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_wr_0_ARBURST;
wire   [1:0] grp_pass_fu_180_m_axi_wr_0_ARLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_wr_0_ARCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_wr_0_ARPROT;
wire   [3:0] grp_pass_fu_180_m_axi_wr_0_ARQOS;
wire   [3:0] grp_pass_fu_180_m_axi_wr_0_ARREGION;
wire   [0:0] grp_pass_fu_180_m_axi_wr_0_ARUSER;
wire    grp_pass_fu_180_m_axi_wr_0_RREADY;
wire    grp_pass_fu_180_m_axi_wr_0_BREADY;
wire    grp_pass_fu_180_m_axi_wr_1_AWVALID;
wire   [63:0] grp_pass_fu_180_m_axi_wr_1_AWADDR;
wire   [0:0] grp_pass_fu_180_m_axi_wr_1_AWID;
wire   [31:0] grp_pass_fu_180_m_axi_wr_1_AWLEN;
wire   [2:0] grp_pass_fu_180_m_axi_wr_1_AWSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_wr_1_AWBURST;
wire   [1:0] grp_pass_fu_180_m_axi_wr_1_AWLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_wr_1_AWCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_wr_1_AWPROT;
wire   [3:0] grp_pass_fu_180_m_axi_wr_1_AWQOS;
wire   [3:0] grp_pass_fu_180_m_axi_wr_1_AWREGION;
wire   [0:0] grp_pass_fu_180_m_axi_wr_1_AWUSER;
wire    grp_pass_fu_180_m_axi_wr_1_WVALID;
wire   [255:0] grp_pass_fu_180_m_axi_wr_1_WDATA;
wire   [31:0] grp_pass_fu_180_m_axi_wr_1_WSTRB;
wire    grp_pass_fu_180_m_axi_wr_1_WLAST;
wire   [0:0] grp_pass_fu_180_m_axi_wr_1_WID;
wire   [0:0] grp_pass_fu_180_m_axi_wr_1_WUSER;
wire    grp_pass_fu_180_m_axi_wr_1_ARVALID;
wire   [63:0] grp_pass_fu_180_m_axi_wr_1_ARADDR;
wire   [0:0] grp_pass_fu_180_m_axi_wr_1_ARID;
wire   [31:0] grp_pass_fu_180_m_axi_wr_1_ARLEN;
wire   [2:0] grp_pass_fu_180_m_axi_wr_1_ARSIZE;
wire   [1:0] grp_pass_fu_180_m_axi_wr_1_ARBURST;
wire   [1:0] grp_pass_fu_180_m_axi_wr_1_ARLOCK;
wire   [3:0] grp_pass_fu_180_m_axi_wr_1_ARCACHE;
wire   [2:0] grp_pass_fu_180_m_axi_wr_1_ARPROT;
wire   [3:0] grp_pass_fu_180_m_axi_wr_1_ARQOS;
wire   [3:0] grp_pass_fu_180_m_axi_wr_1_ARREGION;
wire   [0:0] grp_pass_fu_180_m_axi_wr_1_ARUSER;
wire    grp_pass_fu_180_m_axi_wr_1_RREADY;
wire    grp_pass_fu_180_m_axi_wr_1_BREADY;
wire   [511:0] grp_pass_fu_180_ingress_0_TDATA;
wire   [63:0] grp_pass_fu_180_ingress_0_TKEEP;
wire   [63:0] grp_pass_fu_180_ingress_0_TSTRB;
wire   [0:0] grp_pass_fu_180_ingress_0_TLAST;
wire   [0:0] grp_pass_fu_180_ingress_0_TDEST;
wire   [511:0] grp_pass_fu_180_ingress_1_TDATA;
wire   [63:0] grp_pass_fu_180_ingress_1_TKEEP;
wire   [63:0] grp_pass_fu_180_ingress_1_TSTRB;
wire   [0:0] grp_pass_fu_180_ingress_1_TLAST;
wire   [0:0] grp_pass_fu_180_ingress_1_TDEST;
wire   [31:0] grp_pass_fu_180_golden_fifo_0_TDATA;
wire   [31:0] grp_pass_fu_180_golden_fifo_1_TDATA;
wire    grp_pass_fu_180_ingress_0_TVALID;
wire    grp_pass_fu_180_ingress_0_TREADY;
wire    grp_pass_fu_180_ap_start;
wire    grp_pass_fu_180_ap_done;
wire    grp_pass_fu_180_ingress_1_TVALID;
wire    grp_pass_fu_180_ingress_1_TREADY;
wire    grp_pass_fu_180_egress_0_TREADY;
wire    grp_pass_fu_180_golden_fifo_0_TVALID;
wire    grp_pass_fu_180_golden_fifo_0_TREADY;
wire    grp_pass_fu_180_egress_1_TREADY;
wire    grp_pass_fu_180_golden_fifo_1_TVALID;
wire    grp_pass_fu_180_golden_fifo_1_TREADY;
wire    grp_pass_fu_180_ap_ready;
wire    grp_pass_fu_180_ap_idle;
reg    grp_pass_fu_180_ap_continue;
wire    rd_0_AWREADY;
wire    rd_0_WREADY;
reg    rd_0_ARVALID;
wire    rd_0_ARREADY;
wire    rd_0_RVALID;
reg    rd_0_RREADY;
wire   [255:0] rd_0_RDATA;
wire    rd_0_RLAST;
wire   [0:0] rd_0_RID;
wire   [8:0] rd_0_RFIFONUM;
wire   [0:0] rd_0_RUSER;
wire   [1:0] rd_0_RRESP;
wire    rd_0_BVALID;
wire   [1:0] rd_0_BRESP;
wire   [0:0] rd_0_BID;
wire   [0:0] rd_0_BUSER;
wire    rd_1_AWREADY;
wire    rd_1_WREADY;
reg    rd_1_ARVALID;
wire    rd_1_ARREADY;
wire    rd_1_RVALID;
reg    rd_1_RREADY;
wire   [255:0] rd_1_RDATA;
wire    rd_1_RLAST;
wire   [0:0] rd_1_RID;
wire   [8:0] rd_1_RFIFONUM;
wire   [0:0] rd_1_RUSER;
wire   [1:0] rd_1_RRESP;
wire    rd_1_BVALID;
wire   [1:0] rd_1_BRESP;
wire   [0:0] rd_1_BID;
wire   [0:0] rd_1_BUSER;
reg    wr_0_AWVALID;
wire    wr_0_AWREADY;
reg    wr_0_WVALID;
wire    wr_0_WREADY;
wire    wr_0_ARREADY;
wire    wr_0_RVALID;
wire   [255:0] wr_0_RDATA;
wire    wr_0_RLAST;
wire   [0:0] wr_0_RID;
wire   [8:0] wr_0_RFIFONUM;
wire   [0:0] wr_0_RUSER;
wire   [1:0] wr_0_RRESP;
wire    wr_0_BVALID;
reg    wr_0_BREADY;
wire   [1:0] wr_0_BRESP;
wire   [0:0] wr_0_BID;
wire   [0:0] wr_0_BUSER;
reg    wr_1_AWVALID;
wire    wr_1_AWREADY;
reg    wr_1_WVALID;
wire    wr_1_WREADY;
wire    wr_1_ARREADY;
wire    wr_1_RVALID;
wire   [255:0] wr_1_RDATA;
wire    wr_1_RLAST;
wire   [0:0] wr_1_RID;
wire   [8:0] wr_1_RFIFONUM;
wire   [0:0] wr_1_RUSER;
wire   [1:0] wr_1_RRESP;
wire    wr_1_BVALID;
reg    wr_1_BREADY;
wire   [1:0] wr_1_BRESP;
wire   [0:0] wr_1_BID;
wire   [0:0] wr_1_BUSER;
reg    grp_pass_fu_180_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_sync_grp_pass_fu_180_ap_ready;
wire    ap_sync_grp_pass_fu_180_ap_done;
reg    ap_block_state3_on_subcall_done;
reg    ap_sync_reg_grp_pass_fu_180_ap_ready;
reg    ap_sync_reg_grp_pass_fu_180_ap_done;
wire    ap_CS_fsm_state4;
wire    regslice_both_ingress_0_V_data_V_U_apdone_blk;
wire    regslice_both_ingress_1_V_data_V_U_apdone_blk;
wire    regslice_both_golden_fifo_0_U_apdone_blk;
wire    regslice_both_golden_fifo_1_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ingress_0_TVALID_int_regslice;
wire    ingress_0_TREADY_int_regslice;
wire    regslice_both_ingress_0_V_data_V_U_vld_out;
wire    regslice_both_ingress_0_V_keep_V_U_apdone_blk;
wire    regslice_both_ingress_0_V_keep_V_U_ack_in_dummy;
wire    regslice_both_ingress_0_V_keep_V_U_vld_out;
wire    regslice_both_ingress_0_V_strb_V_U_apdone_blk;
wire    regslice_both_ingress_0_V_strb_V_U_ack_in_dummy;
wire    regslice_both_ingress_0_V_strb_V_U_vld_out;
wire    regslice_both_ingress_0_V_last_V_U_apdone_blk;
wire    regslice_both_ingress_0_V_last_V_U_ack_in_dummy;
wire    regslice_both_ingress_0_V_last_V_U_vld_out;
wire    regslice_both_ingress_0_V_dest_V_U_apdone_blk;
wire    regslice_both_ingress_0_V_dest_V_U_ack_in_dummy;
wire    regslice_both_ingress_0_V_dest_V_U_vld_out;
wire    ingress_1_TVALID_int_regslice;
wire    ingress_1_TREADY_int_regslice;
wire    regslice_both_ingress_1_V_data_V_U_vld_out;
wire    regslice_both_ingress_1_V_keep_V_U_apdone_blk;
wire    regslice_both_ingress_1_V_keep_V_U_ack_in_dummy;
wire    regslice_both_ingress_1_V_keep_V_U_vld_out;
wire    regslice_both_ingress_1_V_strb_V_U_apdone_blk;
wire    regslice_both_ingress_1_V_strb_V_U_ack_in_dummy;
wire    regslice_both_ingress_1_V_strb_V_U_vld_out;
wire    regslice_both_ingress_1_V_last_V_U_apdone_blk;
wire    regslice_both_ingress_1_V_last_V_U_ack_in_dummy;
wire    regslice_both_ingress_1_V_last_V_U_vld_out;
wire    regslice_both_ingress_1_V_dest_V_U_apdone_blk;
wire    regslice_both_ingress_1_V_dest_V_U_ack_in_dummy;
wire    regslice_both_ingress_1_V_dest_V_U_vld_out;
wire    regslice_both_egress_0_V_data_V_U_apdone_blk;
wire   [511:0] egress_0_TDATA_int_regslice;
wire    egress_0_TVALID_int_regslice;
reg    egress_0_TREADY_int_regslice;
wire    regslice_both_egress_0_V_data_V_U_ack_in;
wire    regslice_both_egress_0_V_keep_V_U_apdone_blk;
wire   [63:0] egress_0_TKEEP_int_regslice;
wire    regslice_both_egress_0_V_keep_V_U_vld_out;
wire    regslice_both_egress_0_V_keep_V_U_ack_in;
wire    regslice_both_egress_0_V_strb_V_U_apdone_blk;
wire   [63:0] egress_0_TSTRB_int_regslice;
wire    regslice_both_egress_0_V_strb_V_U_vld_out;
wire    regslice_both_egress_0_V_strb_V_U_ack_in;
wire    regslice_both_egress_0_V_last_V_U_apdone_blk;
wire   [0:0] egress_0_TLAST_int_regslice;
wire    regslice_both_egress_0_V_last_V_U_vld_out;
wire    regslice_both_egress_0_V_last_V_U_ack_in;
wire    regslice_both_egress_0_V_dest_V_U_apdone_blk;
wire   [0:0] egress_0_TDEST_int_regslice;
wire    regslice_both_egress_0_V_dest_V_U_vld_out;
wire    regslice_both_egress_0_V_dest_V_U_ack_in;
wire    regslice_both_egress_1_V_data_V_U_apdone_blk;
wire   [511:0] egress_1_TDATA_int_regslice;
wire    egress_1_TVALID_int_regslice;
reg    egress_1_TREADY_int_regslice;
wire    regslice_both_egress_1_V_data_V_U_ack_in;
wire    regslice_both_egress_1_V_keep_V_U_apdone_blk;
wire   [63:0] egress_1_TKEEP_int_regslice;
wire    regslice_both_egress_1_V_keep_V_U_vld_out;
wire    regslice_both_egress_1_V_keep_V_U_ack_in;
wire    regslice_both_egress_1_V_strb_V_U_apdone_blk;
wire   [63:0] egress_1_TSTRB_int_regslice;
wire    regslice_both_egress_1_V_strb_V_U_vld_out;
wire    regslice_both_egress_1_V_strb_V_U_ack_in;
wire    regslice_both_egress_1_V_last_V_U_apdone_blk;
wire   [0:0] egress_1_TLAST_int_regslice;
wire    regslice_both_egress_1_V_last_V_U_vld_out;
wire    regslice_both_egress_1_V_last_V_U_ack_in;
wire    regslice_both_egress_1_V_dest_V_U_apdone_blk;
wire   [0:0] egress_1_TDEST_int_regslice;
wire    regslice_both_egress_1_V_dest_V_U_vld_out;
wire    regslice_both_egress_1_V_dest_V_U_ack_in;
wire    golden_fifo_0_TREADY_int_regslice;
wire    regslice_both_golden_fifo_0_U_vld_out;
wire    golden_fifo_1_TREADY_int_regslice;
wire    regslice_both_golden_fifo_1_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_pass_fu_180_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_pass_fu_180_ap_ready = 1'b0;
#0 ap_sync_reg_grp_pass_fu_180_ap_done = 1'b0;
end

hash_controller_pass grp_pass_fu_180(
    .m_axi_rd_0_AWVALID(grp_pass_fu_180_m_axi_rd_0_AWVALID),
    .m_axi_rd_0_AWREADY(1'b0),
    .m_axi_rd_0_AWADDR(grp_pass_fu_180_m_axi_rd_0_AWADDR),
    .m_axi_rd_0_AWID(grp_pass_fu_180_m_axi_rd_0_AWID),
    .m_axi_rd_0_AWLEN(grp_pass_fu_180_m_axi_rd_0_AWLEN),
    .m_axi_rd_0_AWSIZE(grp_pass_fu_180_m_axi_rd_0_AWSIZE),
    .m_axi_rd_0_AWBURST(grp_pass_fu_180_m_axi_rd_0_AWBURST),
    .m_axi_rd_0_AWLOCK(grp_pass_fu_180_m_axi_rd_0_AWLOCK),
    .m_axi_rd_0_AWCACHE(grp_pass_fu_180_m_axi_rd_0_AWCACHE),
    .m_axi_rd_0_AWPROT(grp_pass_fu_180_m_axi_rd_0_AWPROT),
    .m_axi_rd_0_AWQOS(grp_pass_fu_180_m_axi_rd_0_AWQOS),
    .m_axi_rd_0_AWREGION(grp_pass_fu_180_m_axi_rd_0_AWREGION),
    .m_axi_rd_0_AWUSER(grp_pass_fu_180_m_axi_rd_0_AWUSER),
    .m_axi_rd_0_WVALID(grp_pass_fu_180_m_axi_rd_0_WVALID),
    .m_axi_rd_0_WREADY(1'b0),
    .m_axi_rd_0_WDATA(grp_pass_fu_180_m_axi_rd_0_WDATA),
    .m_axi_rd_0_WSTRB(grp_pass_fu_180_m_axi_rd_0_WSTRB),
    .m_axi_rd_0_WLAST(grp_pass_fu_180_m_axi_rd_0_WLAST),
    .m_axi_rd_0_WID(grp_pass_fu_180_m_axi_rd_0_WID),
    .m_axi_rd_0_WUSER(grp_pass_fu_180_m_axi_rd_0_WUSER),
    .m_axi_rd_0_ARVALID(grp_pass_fu_180_m_axi_rd_0_ARVALID),
    .m_axi_rd_0_ARREADY(rd_0_ARREADY),
    .m_axi_rd_0_ARADDR(grp_pass_fu_180_m_axi_rd_0_ARADDR),
    .m_axi_rd_0_ARID(grp_pass_fu_180_m_axi_rd_0_ARID),
    .m_axi_rd_0_ARLEN(grp_pass_fu_180_m_axi_rd_0_ARLEN),
    .m_axi_rd_0_ARSIZE(grp_pass_fu_180_m_axi_rd_0_ARSIZE),
    .m_axi_rd_0_ARBURST(grp_pass_fu_180_m_axi_rd_0_ARBURST),
    .m_axi_rd_0_ARLOCK(grp_pass_fu_180_m_axi_rd_0_ARLOCK),
    .m_axi_rd_0_ARCACHE(grp_pass_fu_180_m_axi_rd_0_ARCACHE),
    .m_axi_rd_0_ARPROT(grp_pass_fu_180_m_axi_rd_0_ARPROT),
    .m_axi_rd_0_ARQOS(grp_pass_fu_180_m_axi_rd_0_ARQOS),
    .m_axi_rd_0_ARREGION(grp_pass_fu_180_m_axi_rd_0_ARREGION),
    .m_axi_rd_0_ARUSER(grp_pass_fu_180_m_axi_rd_0_ARUSER),
    .m_axi_rd_0_RVALID(rd_0_RVALID),
    .m_axi_rd_0_RREADY(grp_pass_fu_180_m_axi_rd_0_RREADY),
    .m_axi_rd_0_RDATA(rd_0_RDATA),
    .m_axi_rd_0_RLAST(rd_0_RLAST),
    .m_axi_rd_0_RID(rd_0_RID),
    .m_axi_rd_0_RFIFONUM(rd_0_RFIFONUM),
    .m_axi_rd_0_RUSER(rd_0_RUSER),
    .m_axi_rd_0_RRESP(rd_0_RRESP),
    .m_axi_rd_0_BVALID(1'b0),
    .m_axi_rd_0_BREADY(grp_pass_fu_180_m_axi_rd_0_BREADY),
    .m_axi_rd_0_BRESP(2'd0),
    .m_axi_rd_0_BID(1'd0),
    .m_axi_rd_0_BUSER(1'd0),
    .rd_01(rd_0_offset_read_reg_279),
    .m_axi_rd_1_AWVALID(grp_pass_fu_180_m_axi_rd_1_AWVALID),
    .m_axi_rd_1_AWREADY(1'b0),
    .m_axi_rd_1_AWADDR(grp_pass_fu_180_m_axi_rd_1_AWADDR),
    .m_axi_rd_1_AWID(grp_pass_fu_180_m_axi_rd_1_AWID),
    .m_axi_rd_1_AWLEN(grp_pass_fu_180_m_axi_rd_1_AWLEN),
    .m_axi_rd_1_AWSIZE(grp_pass_fu_180_m_axi_rd_1_AWSIZE),
    .m_axi_rd_1_AWBURST(grp_pass_fu_180_m_axi_rd_1_AWBURST),
    .m_axi_rd_1_AWLOCK(grp_pass_fu_180_m_axi_rd_1_AWLOCK),
    .m_axi_rd_1_AWCACHE(grp_pass_fu_180_m_axi_rd_1_AWCACHE),
    .m_axi_rd_1_AWPROT(grp_pass_fu_180_m_axi_rd_1_AWPROT),
    .m_axi_rd_1_AWQOS(grp_pass_fu_180_m_axi_rd_1_AWQOS),
    .m_axi_rd_1_AWREGION(grp_pass_fu_180_m_axi_rd_1_AWREGION),
    .m_axi_rd_1_AWUSER(grp_pass_fu_180_m_axi_rd_1_AWUSER),
    .m_axi_rd_1_WVALID(grp_pass_fu_180_m_axi_rd_1_WVALID),
    .m_axi_rd_1_WREADY(1'b0),
    .m_axi_rd_1_WDATA(grp_pass_fu_180_m_axi_rd_1_WDATA),
    .m_axi_rd_1_WSTRB(grp_pass_fu_180_m_axi_rd_1_WSTRB),
    .m_axi_rd_1_WLAST(grp_pass_fu_180_m_axi_rd_1_WLAST),
    .m_axi_rd_1_WID(grp_pass_fu_180_m_axi_rd_1_WID),
    .m_axi_rd_1_WUSER(grp_pass_fu_180_m_axi_rd_1_WUSER),
    .m_axi_rd_1_ARVALID(grp_pass_fu_180_m_axi_rd_1_ARVALID),
    .m_axi_rd_1_ARREADY(rd_1_ARREADY),
    .m_axi_rd_1_ARADDR(grp_pass_fu_180_m_axi_rd_1_ARADDR),
    .m_axi_rd_1_ARID(grp_pass_fu_180_m_axi_rd_1_ARID),
    .m_axi_rd_1_ARLEN(grp_pass_fu_180_m_axi_rd_1_ARLEN),
    .m_axi_rd_1_ARSIZE(grp_pass_fu_180_m_axi_rd_1_ARSIZE),
    .m_axi_rd_1_ARBURST(grp_pass_fu_180_m_axi_rd_1_ARBURST),
    .m_axi_rd_1_ARLOCK(grp_pass_fu_180_m_axi_rd_1_ARLOCK),
    .m_axi_rd_1_ARCACHE(grp_pass_fu_180_m_axi_rd_1_ARCACHE),
    .m_axi_rd_1_ARPROT(grp_pass_fu_180_m_axi_rd_1_ARPROT),
    .m_axi_rd_1_ARQOS(grp_pass_fu_180_m_axi_rd_1_ARQOS),
    .m_axi_rd_1_ARREGION(grp_pass_fu_180_m_axi_rd_1_ARREGION),
    .m_axi_rd_1_ARUSER(grp_pass_fu_180_m_axi_rd_1_ARUSER),
    .m_axi_rd_1_RVALID(rd_1_RVALID),
    .m_axi_rd_1_RREADY(grp_pass_fu_180_m_axi_rd_1_RREADY),
    .m_axi_rd_1_RDATA(rd_1_RDATA),
    .m_axi_rd_1_RLAST(rd_1_RLAST),
    .m_axi_rd_1_RID(rd_1_RID),
    .m_axi_rd_1_RFIFONUM(rd_1_RFIFONUM),
    .m_axi_rd_1_RUSER(rd_1_RUSER),
    .m_axi_rd_1_RRESP(rd_1_RRESP),
    .m_axi_rd_1_BVALID(1'b0),
    .m_axi_rd_1_BREADY(grp_pass_fu_180_m_axi_rd_1_BREADY),
    .m_axi_rd_1_BRESP(2'd0),
    .m_axi_rd_1_BID(1'd0),
    .m_axi_rd_1_BUSER(1'd0),
    .rd_12(rd_1_offset_read_reg_274),
    .m_axi_wr_0_AWVALID(grp_pass_fu_180_m_axi_wr_0_AWVALID),
    .m_axi_wr_0_AWREADY(wr_0_AWREADY),
    .m_axi_wr_0_AWADDR(grp_pass_fu_180_m_axi_wr_0_AWADDR),
    .m_axi_wr_0_AWID(grp_pass_fu_180_m_axi_wr_0_AWID),
    .m_axi_wr_0_AWLEN(grp_pass_fu_180_m_axi_wr_0_AWLEN),
    .m_axi_wr_0_AWSIZE(grp_pass_fu_180_m_axi_wr_0_AWSIZE),
    .m_axi_wr_0_AWBURST(grp_pass_fu_180_m_axi_wr_0_AWBURST),
    .m_axi_wr_0_AWLOCK(grp_pass_fu_180_m_axi_wr_0_AWLOCK),
    .m_axi_wr_0_AWCACHE(grp_pass_fu_180_m_axi_wr_0_AWCACHE),
    .m_axi_wr_0_AWPROT(grp_pass_fu_180_m_axi_wr_0_AWPROT),
    .m_axi_wr_0_AWQOS(grp_pass_fu_180_m_axi_wr_0_AWQOS),
    .m_axi_wr_0_AWREGION(grp_pass_fu_180_m_axi_wr_0_AWREGION),
    .m_axi_wr_0_AWUSER(grp_pass_fu_180_m_axi_wr_0_AWUSER),
    .m_axi_wr_0_WVALID(grp_pass_fu_180_m_axi_wr_0_WVALID),
    .m_axi_wr_0_WREADY(wr_0_WREADY),
    .m_axi_wr_0_WDATA(grp_pass_fu_180_m_axi_wr_0_WDATA),
    .m_axi_wr_0_WSTRB(grp_pass_fu_180_m_axi_wr_0_WSTRB),
    .m_axi_wr_0_WLAST(grp_pass_fu_180_m_axi_wr_0_WLAST),
    .m_axi_wr_0_WID(grp_pass_fu_180_m_axi_wr_0_WID),
    .m_axi_wr_0_WUSER(grp_pass_fu_180_m_axi_wr_0_WUSER),
    .m_axi_wr_0_ARVALID(grp_pass_fu_180_m_axi_wr_0_ARVALID),
    .m_axi_wr_0_ARREADY(1'b0),
    .m_axi_wr_0_ARADDR(grp_pass_fu_180_m_axi_wr_0_ARADDR),
    .m_axi_wr_0_ARID(grp_pass_fu_180_m_axi_wr_0_ARID),
    .m_axi_wr_0_ARLEN(grp_pass_fu_180_m_axi_wr_0_ARLEN),
    .m_axi_wr_0_ARSIZE(grp_pass_fu_180_m_axi_wr_0_ARSIZE),
    .m_axi_wr_0_ARBURST(grp_pass_fu_180_m_axi_wr_0_ARBURST),
    .m_axi_wr_0_ARLOCK(grp_pass_fu_180_m_axi_wr_0_ARLOCK),
    .m_axi_wr_0_ARCACHE(grp_pass_fu_180_m_axi_wr_0_ARCACHE),
    .m_axi_wr_0_ARPROT(grp_pass_fu_180_m_axi_wr_0_ARPROT),
    .m_axi_wr_0_ARQOS(grp_pass_fu_180_m_axi_wr_0_ARQOS),
    .m_axi_wr_0_ARREGION(grp_pass_fu_180_m_axi_wr_0_ARREGION),
    .m_axi_wr_0_ARUSER(grp_pass_fu_180_m_axi_wr_0_ARUSER),
    .m_axi_wr_0_RVALID(1'b0),
    .m_axi_wr_0_RREADY(grp_pass_fu_180_m_axi_wr_0_RREADY),
    .m_axi_wr_0_RDATA(256'd0),
    .m_axi_wr_0_RLAST(1'b0),
    .m_axi_wr_0_RID(1'd0),
    .m_axi_wr_0_RFIFONUM(9'd0),
    .m_axi_wr_0_RUSER(1'd0),
    .m_axi_wr_0_RRESP(2'd0),
    .m_axi_wr_0_BVALID(wr_0_BVALID),
    .m_axi_wr_0_BREADY(grp_pass_fu_180_m_axi_wr_0_BREADY),
    .m_axi_wr_0_BRESP(wr_0_BRESP),
    .m_axi_wr_0_BID(wr_0_BID),
    .m_axi_wr_0_BUSER(wr_0_BUSER),
    .wr_03(wr_0_offset_read_reg_269),
    .m_axi_wr_1_AWVALID(grp_pass_fu_180_m_axi_wr_1_AWVALID),
    .m_axi_wr_1_AWREADY(wr_1_AWREADY),
    .m_axi_wr_1_AWADDR(grp_pass_fu_180_m_axi_wr_1_AWADDR),
    .m_axi_wr_1_AWID(grp_pass_fu_180_m_axi_wr_1_AWID),
    .m_axi_wr_1_AWLEN(grp_pass_fu_180_m_axi_wr_1_AWLEN),
    .m_axi_wr_1_AWSIZE(grp_pass_fu_180_m_axi_wr_1_AWSIZE),
    .m_axi_wr_1_AWBURST(grp_pass_fu_180_m_axi_wr_1_AWBURST),
    .m_axi_wr_1_AWLOCK(grp_pass_fu_180_m_axi_wr_1_AWLOCK),
    .m_axi_wr_1_AWCACHE(grp_pass_fu_180_m_axi_wr_1_AWCACHE),
    .m_axi_wr_1_AWPROT(grp_pass_fu_180_m_axi_wr_1_AWPROT),
    .m_axi_wr_1_AWQOS(grp_pass_fu_180_m_axi_wr_1_AWQOS),
    .m_axi_wr_1_AWREGION(grp_pass_fu_180_m_axi_wr_1_AWREGION),
    .m_axi_wr_1_AWUSER(grp_pass_fu_180_m_axi_wr_1_AWUSER),
    .m_axi_wr_1_WVALID(grp_pass_fu_180_m_axi_wr_1_WVALID),
    .m_axi_wr_1_WREADY(wr_1_WREADY),
    .m_axi_wr_1_WDATA(grp_pass_fu_180_m_axi_wr_1_WDATA),
    .m_axi_wr_1_WSTRB(grp_pass_fu_180_m_axi_wr_1_WSTRB),
    .m_axi_wr_1_WLAST(grp_pass_fu_180_m_axi_wr_1_WLAST),
    .m_axi_wr_1_WID(grp_pass_fu_180_m_axi_wr_1_WID),
    .m_axi_wr_1_WUSER(grp_pass_fu_180_m_axi_wr_1_WUSER),
    .m_axi_wr_1_ARVALID(grp_pass_fu_180_m_axi_wr_1_ARVALID),
    .m_axi_wr_1_ARREADY(1'b0),
    .m_axi_wr_1_ARADDR(grp_pass_fu_180_m_axi_wr_1_ARADDR),
    .m_axi_wr_1_ARID(grp_pass_fu_180_m_axi_wr_1_ARID),
    .m_axi_wr_1_ARLEN(grp_pass_fu_180_m_axi_wr_1_ARLEN),
    .m_axi_wr_1_ARSIZE(grp_pass_fu_180_m_axi_wr_1_ARSIZE),
    .m_axi_wr_1_ARBURST(grp_pass_fu_180_m_axi_wr_1_ARBURST),
    .m_axi_wr_1_ARLOCK(grp_pass_fu_180_m_axi_wr_1_ARLOCK),
    .m_axi_wr_1_ARCACHE(grp_pass_fu_180_m_axi_wr_1_ARCACHE),
    .m_axi_wr_1_ARPROT(grp_pass_fu_180_m_axi_wr_1_ARPROT),
    .m_axi_wr_1_ARQOS(grp_pass_fu_180_m_axi_wr_1_ARQOS),
    .m_axi_wr_1_ARREGION(grp_pass_fu_180_m_axi_wr_1_ARREGION),
    .m_axi_wr_1_ARUSER(grp_pass_fu_180_m_axi_wr_1_ARUSER),
    .m_axi_wr_1_RVALID(1'b0),
    .m_axi_wr_1_RREADY(grp_pass_fu_180_m_axi_wr_1_RREADY),
    .m_axi_wr_1_RDATA(256'd0),
    .m_axi_wr_1_RLAST(1'b0),
    .m_axi_wr_1_RID(1'd0),
    .m_axi_wr_1_RFIFONUM(9'd0),
    .m_axi_wr_1_RUSER(1'd0),
    .m_axi_wr_1_RRESP(2'd0),
    .m_axi_wr_1_BVALID(wr_1_BVALID),
    .m_axi_wr_1_BREADY(grp_pass_fu_180_m_axi_wr_1_BREADY),
    .m_axi_wr_1_BRESP(wr_1_BRESP),
    .m_axi_wr_1_BID(wr_1_BID),
    .m_axi_wr_1_BUSER(wr_1_BUSER),
    .wr_14(wr_1_offset_read_reg_264),
    .ingress_0_TDATA(grp_pass_fu_180_ingress_0_TDATA),
    .ingress_0_TKEEP(grp_pass_fu_180_ingress_0_TKEEP),
    .ingress_0_TSTRB(grp_pass_fu_180_ingress_0_TSTRB),
    .ingress_0_TLAST(grp_pass_fu_180_ingress_0_TLAST),
    .ingress_0_TDEST(grp_pass_fu_180_ingress_0_TDEST),
    .ingress_1_TDATA(grp_pass_fu_180_ingress_1_TDATA),
    .ingress_1_TKEEP(grp_pass_fu_180_ingress_1_TKEEP),
    .ingress_1_TSTRB(grp_pass_fu_180_ingress_1_TSTRB),
    .ingress_1_TLAST(grp_pass_fu_180_ingress_1_TLAST),
    .ingress_1_TDEST(grp_pass_fu_180_ingress_1_TDEST),
    .egress_0_TDATA(egress_0_TDATA_int_regslice),
    .egress_0_TKEEP(egress_0_TKEEP_int_regslice),
    .egress_0_TSTRB(egress_0_TSTRB_int_regslice),
    .egress_0_TLAST(egress_0_TLAST_int_regslice),
    .egress_0_TDEST(egress_0_TDEST_int_regslice),
    .egress_1_TDATA(egress_1_TDATA_int_regslice),
    .egress_1_TKEEP(egress_1_TKEEP_int_regslice),
    .egress_1_TSTRB(egress_1_TSTRB_int_regslice),
    .egress_1_TLAST(egress_1_TLAST_int_regslice),
    .egress_1_TDEST(egress_1_TDEST_int_regslice),
    .golden_fifo_0_TDATA(grp_pass_fu_180_golden_fifo_0_TDATA),
    .golden_fifo_1_TDATA(grp_pass_fu_180_golden_fifo_1_TDATA),
    .first(first_read_reg_259),
    .last(last_read_reg_254),
    .block_header(block_header_read_reg_249),
    .target(target_read_reg_244),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ingress_0_TVALID(grp_pass_fu_180_ingress_0_TVALID),
    .ingress_0_TREADY(grp_pass_fu_180_ingress_0_TREADY),
    .rd_01_ap_vld(1'b1),
    .first_ap_vld(1'b1),
    .block_header_ap_vld(1'b1),
    .ap_start(grp_pass_fu_180_ap_start),
    .ap_done(grp_pass_fu_180_ap_done),
    .ingress_1_TVALID(grp_pass_fu_180_ingress_1_TVALID),
    .ingress_1_TREADY(grp_pass_fu_180_ingress_1_TREADY),
    .rd_12_ap_vld(1'b1),
    .wr_03_ap_vld(1'b1),
    .egress_0_TVALID(egress_0_TVALID_int_regslice),
    .egress_0_TREADY(grp_pass_fu_180_egress_0_TREADY),
    .last_ap_vld(1'b1),
    .target_ap_vld(1'b1),
    .golden_fifo_0_TVALID(grp_pass_fu_180_golden_fifo_0_TVALID),
    .golden_fifo_0_TREADY(grp_pass_fu_180_golden_fifo_0_TREADY),
    .wr_14_ap_vld(1'b1),
    .egress_1_TVALID(egress_1_TVALID_int_regslice),
    .egress_1_TREADY(grp_pass_fu_180_egress_1_TREADY),
    .golden_fifo_1_TVALID(grp_pass_fu_180_golden_fifo_1_TVALID),
    .golden_fifo_1_TREADY(grp_pass_fu_180_golden_fifo_1_TREADY),
    .ap_ready(grp_pass_fu_180_ap_ready),
    .ap_idle(grp_pass_fu_180_ap_idle),
    .ap_continue(grp_pass_fu_180_ap_continue)
);

hash_controller_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .rd_0_offset(rd_0_offset),
    .rd_1_offset(rd_1_offset),
    .wr_0_offset(wr_0_offset),
    .wr_1_offset(wr_1_offset),
    .first(first),
    .last(last),
    .block_header(block_header),
    .target(target),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_local_deadlock(ap_local_deadlock)
);

hash_controller_rd_0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RD_0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RD_0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RD_0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RD_0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RD_0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RD_0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RD_0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RD_0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_RD_0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RD_0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RD_0_CACHE_VALUE ))
rd_0_m_axi_U(
    .AWVALID(m_axi_rd_0_AWVALID),
    .AWREADY(m_axi_rd_0_AWREADY),
    .AWADDR(m_axi_rd_0_AWADDR),
    .AWID(m_axi_rd_0_AWID),
    .AWLEN(m_axi_rd_0_AWLEN),
    .AWSIZE(m_axi_rd_0_AWSIZE),
    .AWBURST(m_axi_rd_0_AWBURST),
    .AWLOCK(m_axi_rd_0_AWLOCK),
    .AWCACHE(m_axi_rd_0_AWCACHE),
    .AWPROT(m_axi_rd_0_AWPROT),
    .AWQOS(m_axi_rd_0_AWQOS),
    .AWREGION(m_axi_rd_0_AWREGION),
    .AWUSER(m_axi_rd_0_AWUSER),
    .WVALID(m_axi_rd_0_WVALID),
    .WREADY(m_axi_rd_0_WREADY),
    .WDATA(m_axi_rd_0_WDATA),
    .WSTRB(m_axi_rd_0_WSTRB),
    .WLAST(m_axi_rd_0_WLAST),
    .WID(m_axi_rd_0_WID),
    .WUSER(m_axi_rd_0_WUSER),
    .ARVALID(m_axi_rd_0_ARVALID),
    .ARREADY(m_axi_rd_0_ARREADY),
    .ARADDR(m_axi_rd_0_ARADDR),
    .ARID(m_axi_rd_0_ARID),
    .ARLEN(m_axi_rd_0_ARLEN),
    .ARSIZE(m_axi_rd_0_ARSIZE),
    .ARBURST(m_axi_rd_0_ARBURST),
    .ARLOCK(m_axi_rd_0_ARLOCK),
    .ARCACHE(m_axi_rd_0_ARCACHE),
    .ARPROT(m_axi_rd_0_ARPROT),
    .ARQOS(m_axi_rd_0_ARQOS),
    .ARREGION(m_axi_rd_0_ARREGION),
    .ARUSER(m_axi_rd_0_ARUSER),
    .RVALID(m_axi_rd_0_RVALID),
    .RREADY(m_axi_rd_0_RREADY),
    .RDATA(m_axi_rd_0_RDATA),
    .RLAST(m_axi_rd_0_RLAST),
    .RID(m_axi_rd_0_RID),
    .RUSER(m_axi_rd_0_RUSER),
    .RRESP(m_axi_rd_0_RRESP),
    .BVALID(m_axi_rd_0_BVALID),
    .BREADY(m_axi_rd_0_BREADY),
    .BRESP(m_axi_rd_0_BRESP),
    .BID(m_axi_rd_0_BID),
    .BUSER(m_axi_rd_0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(rd_0_ARVALID),
    .I_ARREADY(rd_0_ARREADY),
    .I_ARADDR(grp_pass_fu_180_m_axi_rd_0_ARADDR),
    .I_ARID(grp_pass_fu_180_m_axi_rd_0_ARID),
    .I_ARLEN(grp_pass_fu_180_m_axi_rd_0_ARLEN),
    .I_ARSIZE(grp_pass_fu_180_m_axi_rd_0_ARSIZE),
    .I_ARLOCK(grp_pass_fu_180_m_axi_rd_0_ARLOCK),
    .I_ARCACHE(grp_pass_fu_180_m_axi_rd_0_ARCACHE),
    .I_ARQOS(grp_pass_fu_180_m_axi_rd_0_ARQOS),
    .I_ARPROT(grp_pass_fu_180_m_axi_rd_0_ARPROT),
    .I_ARUSER(grp_pass_fu_180_m_axi_rd_0_ARUSER),
    .I_ARBURST(grp_pass_fu_180_m_axi_rd_0_ARBURST),
    .I_ARREGION(grp_pass_fu_180_m_axi_rd_0_ARREGION),
    .I_RVALID(rd_0_RVALID),
    .I_RREADY(rd_0_RREADY),
    .I_RDATA(rd_0_RDATA),
    .I_RFIFONUM(rd_0_RFIFONUM),
    .I_RID(rd_0_RID),
    .I_RUSER(rd_0_RUSER),
    .I_RRESP(rd_0_RRESP),
    .I_RLAST(rd_0_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(rd_0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(rd_0_WREADY),
    .I_WDATA(256'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(32'd0),
    .I_BVALID(rd_0_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(rd_0_BRESP),
    .I_BID(rd_0_BID),
    .I_BUSER(rd_0_BUSER)
);

hash_controller_rd_1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RD_1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RD_1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RD_1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RD_1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RD_1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RD_1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RD_1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RD_1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_RD_1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RD_1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RD_1_CACHE_VALUE ))
rd_1_m_axi_U(
    .AWVALID(m_axi_rd_1_AWVALID),
    .AWREADY(m_axi_rd_1_AWREADY),
    .AWADDR(m_axi_rd_1_AWADDR),
    .AWID(m_axi_rd_1_AWID),
    .AWLEN(m_axi_rd_1_AWLEN),
    .AWSIZE(m_axi_rd_1_AWSIZE),
    .AWBURST(m_axi_rd_1_AWBURST),
    .AWLOCK(m_axi_rd_1_AWLOCK),
    .AWCACHE(m_axi_rd_1_AWCACHE),
    .AWPROT(m_axi_rd_1_AWPROT),
    .AWQOS(m_axi_rd_1_AWQOS),
    .AWREGION(m_axi_rd_1_AWREGION),
    .AWUSER(m_axi_rd_1_AWUSER),
    .WVALID(m_axi_rd_1_WVALID),
    .WREADY(m_axi_rd_1_WREADY),
    .WDATA(m_axi_rd_1_WDATA),
    .WSTRB(m_axi_rd_1_WSTRB),
    .WLAST(m_axi_rd_1_WLAST),
    .WID(m_axi_rd_1_WID),
    .WUSER(m_axi_rd_1_WUSER),
    .ARVALID(m_axi_rd_1_ARVALID),
    .ARREADY(m_axi_rd_1_ARREADY),
    .ARADDR(m_axi_rd_1_ARADDR),
    .ARID(m_axi_rd_1_ARID),
    .ARLEN(m_axi_rd_1_ARLEN),
    .ARSIZE(m_axi_rd_1_ARSIZE),
    .ARBURST(m_axi_rd_1_ARBURST),
    .ARLOCK(m_axi_rd_1_ARLOCK),
    .ARCACHE(m_axi_rd_1_ARCACHE),
    .ARPROT(m_axi_rd_1_ARPROT),
    .ARQOS(m_axi_rd_1_ARQOS),
    .ARREGION(m_axi_rd_1_ARREGION),
    .ARUSER(m_axi_rd_1_ARUSER),
    .RVALID(m_axi_rd_1_RVALID),
    .RREADY(m_axi_rd_1_RREADY),
    .RDATA(m_axi_rd_1_RDATA),
    .RLAST(m_axi_rd_1_RLAST),
    .RID(m_axi_rd_1_RID),
    .RUSER(m_axi_rd_1_RUSER),
    .RRESP(m_axi_rd_1_RRESP),
    .BVALID(m_axi_rd_1_BVALID),
    .BREADY(m_axi_rd_1_BREADY),
    .BRESP(m_axi_rd_1_BRESP),
    .BID(m_axi_rd_1_BID),
    .BUSER(m_axi_rd_1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(rd_1_ARVALID),
    .I_ARREADY(rd_1_ARREADY),
    .I_ARADDR(grp_pass_fu_180_m_axi_rd_1_ARADDR),
    .I_ARID(grp_pass_fu_180_m_axi_rd_1_ARID),
    .I_ARLEN(grp_pass_fu_180_m_axi_rd_1_ARLEN),
    .I_ARSIZE(grp_pass_fu_180_m_axi_rd_1_ARSIZE),
    .I_ARLOCK(grp_pass_fu_180_m_axi_rd_1_ARLOCK),
    .I_ARCACHE(grp_pass_fu_180_m_axi_rd_1_ARCACHE),
    .I_ARQOS(grp_pass_fu_180_m_axi_rd_1_ARQOS),
    .I_ARPROT(grp_pass_fu_180_m_axi_rd_1_ARPROT),
    .I_ARUSER(grp_pass_fu_180_m_axi_rd_1_ARUSER),
    .I_ARBURST(grp_pass_fu_180_m_axi_rd_1_ARBURST),
    .I_ARREGION(grp_pass_fu_180_m_axi_rd_1_ARREGION),
    .I_RVALID(rd_1_RVALID),
    .I_RREADY(rd_1_RREADY),
    .I_RDATA(rd_1_RDATA),
    .I_RFIFONUM(rd_1_RFIFONUM),
    .I_RID(rd_1_RID),
    .I_RUSER(rd_1_RUSER),
    .I_RRESP(rd_1_RRESP),
    .I_RLAST(rd_1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(rd_1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(rd_1_WREADY),
    .I_WDATA(256'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(32'd0),
    .I_BVALID(rd_1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(rd_1_BRESP),
    .I_BID(rd_1_BID),
    .I_BUSER(rd_1_BUSER)
);

hash_controller_wr_0_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_WR_0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_WR_0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_WR_0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_WR_0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_WR_0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_WR_0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_WR_0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_WR_0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_WR_0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_WR_0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_WR_0_CACHE_VALUE ))
wr_0_m_axi_U(
    .AWVALID(m_axi_wr_0_AWVALID),
    .AWREADY(m_axi_wr_0_AWREADY),
    .AWADDR(m_axi_wr_0_AWADDR),
    .AWID(m_axi_wr_0_AWID),
    .AWLEN(m_axi_wr_0_AWLEN),
    .AWSIZE(m_axi_wr_0_AWSIZE),
    .AWBURST(m_axi_wr_0_AWBURST),
    .AWLOCK(m_axi_wr_0_AWLOCK),
    .AWCACHE(m_axi_wr_0_AWCACHE),
    .AWPROT(m_axi_wr_0_AWPROT),
    .AWQOS(m_axi_wr_0_AWQOS),
    .AWREGION(m_axi_wr_0_AWREGION),
    .AWUSER(m_axi_wr_0_AWUSER),
    .WVALID(m_axi_wr_0_WVALID),
    .WREADY(m_axi_wr_0_WREADY),
    .WDATA(m_axi_wr_0_WDATA),
    .WSTRB(m_axi_wr_0_WSTRB),
    .WLAST(m_axi_wr_0_WLAST),
    .WID(m_axi_wr_0_WID),
    .WUSER(m_axi_wr_0_WUSER),
    .ARVALID(m_axi_wr_0_ARVALID),
    .ARREADY(m_axi_wr_0_ARREADY),
    .ARADDR(m_axi_wr_0_ARADDR),
    .ARID(m_axi_wr_0_ARID),
    .ARLEN(m_axi_wr_0_ARLEN),
    .ARSIZE(m_axi_wr_0_ARSIZE),
    .ARBURST(m_axi_wr_0_ARBURST),
    .ARLOCK(m_axi_wr_0_ARLOCK),
    .ARCACHE(m_axi_wr_0_ARCACHE),
    .ARPROT(m_axi_wr_0_ARPROT),
    .ARQOS(m_axi_wr_0_ARQOS),
    .ARREGION(m_axi_wr_0_ARREGION),
    .ARUSER(m_axi_wr_0_ARUSER),
    .RVALID(m_axi_wr_0_RVALID),
    .RREADY(m_axi_wr_0_RREADY),
    .RDATA(m_axi_wr_0_RDATA),
    .RLAST(m_axi_wr_0_RLAST),
    .RID(m_axi_wr_0_RID),
    .RUSER(m_axi_wr_0_RUSER),
    .RRESP(m_axi_wr_0_RRESP),
    .BVALID(m_axi_wr_0_BVALID),
    .BREADY(m_axi_wr_0_BREADY),
    .BRESP(m_axi_wr_0_BRESP),
    .BID(m_axi_wr_0_BID),
    .BUSER(m_axi_wr_0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(wr_0_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(wr_0_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(wr_0_RDATA),
    .I_RFIFONUM(wr_0_RFIFONUM),
    .I_RID(wr_0_RID),
    .I_RUSER(wr_0_RUSER),
    .I_RRESP(wr_0_RRESP),
    .I_RLAST(wr_0_RLAST),
    .I_AWVALID(wr_0_AWVALID),
    .I_AWREADY(wr_0_AWREADY),
    .I_AWADDR(grp_pass_fu_180_m_axi_wr_0_AWADDR),
    .I_AWID(grp_pass_fu_180_m_axi_wr_0_AWID),
    .I_AWLEN(grp_pass_fu_180_m_axi_wr_0_AWLEN),
    .I_AWSIZE(grp_pass_fu_180_m_axi_wr_0_AWSIZE),
    .I_AWLOCK(grp_pass_fu_180_m_axi_wr_0_AWLOCK),
    .I_AWCACHE(grp_pass_fu_180_m_axi_wr_0_AWCACHE),
    .I_AWQOS(grp_pass_fu_180_m_axi_wr_0_AWQOS),
    .I_AWPROT(grp_pass_fu_180_m_axi_wr_0_AWPROT),
    .I_AWUSER(grp_pass_fu_180_m_axi_wr_0_AWUSER),
    .I_AWBURST(grp_pass_fu_180_m_axi_wr_0_AWBURST),
    .I_AWREGION(grp_pass_fu_180_m_axi_wr_0_AWREGION),
    .I_WVALID(wr_0_WVALID),
    .I_WREADY(wr_0_WREADY),
    .I_WDATA(grp_pass_fu_180_m_axi_wr_0_WDATA),
    .I_WID(grp_pass_fu_180_m_axi_wr_0_WID),
    .I_WUSER(grp_pass_fu_180_m_axi_wr_0_WUSER),
    .I_WLAST(grp_pass_fu_180_m_axi_wr_0_WLAST),
    .I_WSTRB(grp_pass_fu_180_m_axi_wr_0_WSTRB),
    .I_BVALID(wr_0_BVALID),
    .I_BREADY(wr_0_BREADY),
    .I_BRESP(wr_0_BRESP),
    .I_BID(wr_0_BID),
    .I_BUSER(wr_0_BUSER)
);

hash_controller_wr_1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 256 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_WR_1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_WR_1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_WR_1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_WR_1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_WR_1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_WR_1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_WR_1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_WR_1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_WR_1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_WR_1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_WR_1_CACHE_VALUE ))
wr_1_m_axi_U(
    .AWVALID(m_axi_wr_1_AWVALID),
    .AWREADY(m_axi_wr_1_AWREADY),
    .AWADDR(m_axi_wr_1_AWADDR),
    .AWID(m_axi_wr_1_AWID),
    .AWLEN(m_axi_wr_1_AWLEN),
    .AWSIZE(m_axi_wr_1_AWSIZE),
    .AWBURST(m_axi_wr_1_AWBURST),
    .AWLOCK(m_axi_wr_1_AWLOCK),
    .AWCACHE(m_axi_wr_1_AWCACHE),
    .AWPROT(m_axi_wr_1_AWPROT),
    .AWQOS(m_axi_wr_1_AWQOS),
    .AWREGION(m_axi_wr_1_AWREGION),
    .AWUSER(m_axi_wr_1_AWUSER),
    .WVALID(m_axi_wr_1_WVALID),
    .WREADY(m_axi_wr_1_WREADY),
    .WDATA(m_axi_wr_1_WDATA),
    .WSTRB(m_axi_wr_1_WSTRB),
    .WLAST(m_axi_wr_1_WLAST),
    .WID(m_axi_wr_1_WID),
    .WUSER(m_axi_wr_1_WUSER),
    .ARVALID(m_axi_wr_1_ARVALID),
    .ARREADY(m_axi_wr_1_ARREADY),
    .ARADDR(m_axi_wr_1_ARADDR),
    .ARID(m_axi_wr_1_ARID),
    .ARLEN(m_axi_wr_1_ARLEN),
    .ARSIZE(m_axi_wr_1_ARSIZE),
    .ARBURST(m_axi_wr_1_ARBURST),
    .ARLOCK(m_axi_wr_1_ARLOCK),
    .ARCACHE(m_axi_wr_1_ARCACHE),
    .ARPROT(m_axi_wr_1_ARPROT),
    .ARQOS(m_axi_wr_1_ARQOS),
    .ARREGION(m_axi_wr_1_ARREGION),
    .ARUSER(m_axi_wr_1_ARUSER),
    .RVALID(m_axi_wr_1_RVALID),
    .RREADY(m_axi_wr_1_RREADY),
    .RDATA(m_axi_wr_1_RDATA),
    .RLAST(m_axi_wr_1_RLAST),
    .RID(m_axi_wr_1_RID),
    .RUSER(m_axi_wr_1_RUSER),
    .RRESP(m_axi_wr_1_RRESP),
    .BVALID(m_axi_wr_1_BVALID),
    .BREADY(m_axi_wr_1_BREADY),
    .BRESP(m_axi_wr_1_BRESP),
    .BID(m_axi_wr_1_BID),
    .BUSER(m_axi_wr_1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(wr_1_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(wr_1_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(wr_1_RDATA),
    .I_RFIFONUM(wr_1_RFIFONUM),
    .I_RID(wr_1_RID),
    .I_RUSER(wr_1_RUSER),
    .I_RRESP(wr_1_RRESP),
    .I_RLAST(wr_1_RLAST),
    .I_AWVALID(wr_1_AWVALID),
    .I_AWREADY(wr_1_AWREADY),
    .I_AWADDR(grp_pass_fu_180_m_axi_wr_1_AWADDR),
    .I_AWID(grp_pass_fu_180_m_axi_wr_1_AWID),
    .I_AWLEN(grp_pass_fu_180_m_axi_wr_1_AWLEN),
    .I_AWSIZE(grp_pass_fu_180_m_axi_wr_1_AWSIZE),
    .I_AWLOCK(grp_pass_fu_180_m_axi_wr_1_AWLOCK),
    .I_AWCACHE(grp_pass_fu_180_m_axi_wr_1_AWCACHE),
    .I_AWQOS(grp_pass_fu_180_m_axi_wr_1_AWQOS),
    .I_AWPROT(grp_pass_fu_180_m_axi_wr_1_AWPROT),
    .I_AWUSER(grp_pass_fu_180_m_axi_wr_1_AWUSER),
    .I_AWBURST(grp_pass_fu_180_m_axi_wr_1_AWBURST),
    .I_AWREGION(grp_pass_fu_180_m_axi_wr_1_AWREGION),
    .I_WVALID(wr_1_WVALID),
    .I_WREADY(wr_1_WREADY),
    .I_WDATA(grp_pass_fu_180_m_axi_wr_1_WDATA),
    .I_WID(grp_pass_fu_180_m_axi_wr_1_WID),
    .I_WUSER(grp_pass_fu_180_m_axi_wr_1_WUSER),
    .I_WLAST(grp_pass_fu_180_m_axi_wr_1_WLAST),
    .I_WSTRB(grp_pass_fu_180_m_axi_wr_1_WSTRB),
    .I_BVALID(wr_1_BVALID),
    .I_BREADY(wr_1_BREADY),
    .I_BRESP(wr_1_BRESP),
    .I_BID(wr_1_BID),
    .I_BUSER(wr_1_BUSER)
);

hash_controller_regslice_both #(
    .DataWidth( 512 ))
regslice_both_ingress_0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_0_TDATA),
    .vld_in(grp_pass_fu_180_ingress_0_TVALID),
    .ack_in(ingress_0_TREADY_int_regslice),
    .data_out(ingress_0_TDATA),
    .vld_out(regslice_both_ingress_0_V_data_V_U_vld_out),
    .ack_out(ingress_0_TREADY),
    .apdone_blk(regslice_both_ingress_0_V_data_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_ingress_0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_0_TKEEP),
    .vld_in(grp_pass_fu_180_ingress_0_TVALID),
    .ack_in(regslice_both_ingress_0_V_keep_V_U_ack_in_dummy),
    .data_out(ingress_0_TKEEP),
    .vld_out(regslice_both_ingress_0_V_keep_V_U_vld_out),
    .ack_out(ingress_0_TREADY),
    .apdone_blk(regslice_both_ingress_0_V_keep_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_ingress_0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_0_TSTRB),
    .vld_in(grp_pass_fu_180_ingress_0_TVALID),
    .ack_in(regslice_both_ingress_0_V_strb_V_U_ack_in_dummy),
    .data_out(ingress_0_TSTRB),
    .vld_out(regslice_both_ingress_0_V_strb_V_U_vld_out),
    .ack_out(ingress_0_TREADY),
    .apdone_blk(regslice_both_ingress_0_V_strb_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ingress_0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_0_TLAST),
    .vld_in(grp_pass_fu_180_ingress_0_TVALID),
    .ack_in(regslice_both_ingress_0_V_last_V_U_ack_in_dummy),
    .data_out(ingress_0_TLAST),
    .vld_out(regslice_both_ingress_0_V_last_V_U_vld_out),
    .ack_out(ingress_0_TREADY),
    .apdone_blk(regslice_both_ingress_0_V_last_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ingress_0_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_0_TDEST),
    .vld_in(grp_pass_fu_180_ingress_0_TVALID),
    .ack_in(regslice_both_ingress_0_V_dest_V_U_ack_in_dummy),
    .data_out(ingress_0_TDEST),
    .vld_out(regslice_both_ingress_0_V_dest_V_U_vld_out),
    .ack_out(ingress_0_TREADY),
    .apdone_blk(regslice_both_ingress_0_V_dest_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 512 ))
regslice_both_ingress_1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_1_TDATA),
    .vld_in(grp_pass_fu_180_ingress_1_TVALID),
    .ack_in(ingress_1_TREADY_int_regslice),
    .data_out(ingress_1_TDATA),
    .vld_out(regslice_both_ingress_1_V_data_V_U_vld_out),
    .ack_out(ingress_1_TREADY),
    .apdone_blk(regslice_both_ingress_1_V_data_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_ingress_1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_1_TKEEP),
    .vld_in(grp_pass_fu_180_ingress_1_TVALID),
    .ack_in(regslice_both_ingress_1_V_keep_V_U_ack_in_dummy),
    .data_out(ingress_1_TKEEP),
    .vld_out(regslice_both_ingress_1_V_keep_V_U_vld_out),
    .ack_out(ingress_1_TREADY),
    .apdone_blk(regslice_both_ingress_1_V_keep_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_ingress_1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_1_TSTRB),
    .vld_in(grp_pass_fu_180_ingress_1_TVALID),
    .ack_in(regslice_both_ingress_1_V_strb_V_U_ack_in_dummy),
    .data_out(ingress_1_TSTRB),
    .vld_out(regslice_both_ingress_1_V_strb_V_U_vld_out),
    .ack_out(ingress_1_TREADY),
    .apdone_blk(regslice_both_ingress_1_V_strb_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ingress_1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_1_TLAST),
    .vld_in(grp_pass_fu_180_ingress_1_TVALID),
    .ack_in(regslice_both_ingress_1_V_last_V_U_ack_in_dummy),
    .data_out(ingress_1_TLAST),
    .vld_out(regslice_both_ingress_1_V_last_V_U_vld_out),
    .ack_out(ingress_1_TREADY),
    .apdone_blk(regslice_both_ingress_1_V_last_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_ingress_1_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_ingress_1_TDEST),
    .vld_in(grp_pass_fu_180_ingress_1_TVALID),
    .ack_in(regslice_both_ingress_1_V_dest_V_U_ack_in_dummy),
    .data_out(ingress_1_TDEST),
    .vld_out(regslice_both_ingress_1_V_dest_V_U_vld_out),
    .ack_out(ingress_1_TREADY),
    .apdone_blk(regslice_both_ingress_1_V_dest_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 512 ))
regslice_both_egress_0_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_0_TDATA),
    .vld_in(egress_0_TVALID),
    .ack_in(regslice_both_egress_0_V_data_V_U_ack_in),
    .data_out(egress_0_TDATA_int_regslice),
    .vld_out(egress_0_TVALID_int_regslice),
    .ack_out(egress_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_0_V_data_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_egress_0_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_0_TKEEP),
    .vld_in(egress_0_TVALID),
    .ack_in(regslice_both_egress_0_V_keep_V_U_ack_in),
    .data_out(egress_0_TKEEP_int_regslice),
    .vld_out(regslice_both_egress_0_V_keep_V_U_vld_out),
    .ack_out(egress_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_0_V_keep_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_egress_0_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_0_TSTRB),
    .vld_in(egress_0_TVALID),
    .ack_in(regslice_both_egress_0_V_strb_V_U_ack_in),
    .data_out(egress_0_TSTRB_int_regslice),
    .vld_out(regslice_both_egress_0_V_strb_V_U_vld_out),
    .ack_out(egress_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_0_V_strb_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_egress_0_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_0_TLAST),
    .vld_in(egress_0_TVALID),
    .ack_in(regslice_both_egress_0_V_last_V_U_ack_in),
    .data_out(egress_0_TLAST_int_regslice),
    .vld_out(regslice_both_egress_0_V_last_V_U_vld_out),
    .ack_out(egress_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_0_V_last_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_egress_0_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_0_TDEST),
    .vld_in(egress_0_TVALID),
    .ack_in(regslice_both_egress_0_V_dest_V_U_ack_in),
    .data_out(egress_0_TDEST_int_regslice),
    .vld_out(regslice_both_egress_0_V_dest_V_U_vld_out),
    .ack_out(egress_0_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_0_V_dest_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 512 ))
regslice_both_egress_1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_1_TDATA),
    .vld_in(egress_1_TVALID),
    .ack_in(regslice_both_egress_1_V_data_V_U_ack_in),
    .data_out(egress_1_TDATA_int_regslice),
    .vld_out(egress_1_TVALID_int_regslice),
    .ack_out(egress_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_1_V_data_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_egress_1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_1_TKEEP),
    .vld_in(egress_1_TVALID),
    .ack_in(regslice_both_egress_1_V_keep_V_U_ack_in),
    .data_out(egress_1_TKEEP_int_regslice),
    .vld_out(regslice_both_egress_1_V_keep_V_U_vld_out),
    .ack_out(egress_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_1_V_keep_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 64 ))
regslice_both_egress_1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_1_TSTRB),
    .vld_in(egress_1_TVALID),
    .ack_in(regslice_both_egress_1_V_strb_V_U_ack_in),
    .data_out(egress_1_TSTRB_int_regslice),
    .vld_out(regslice_both_egress_1_V_strb_V_U_vld_out),
    .ack_out(egress_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_1_V_strb_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_egress_1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_1_TLAST),
    .vld_in(egress_1_TVALID),
    .ack_in(regslice_both_egress_1_V_last_V_U_ack_in),
    .data_out(egress_1_TLAST_int_regslice),
    .vld_out(regslice_both_egress_1_V_last_V_U_vld_out),
    .ack_out(egress_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_1_V_last_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 1 ))
regslice_both_egress_1_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(egress_1_TDEST),
    .vld_in(egress_1_TVALID),
    .ack_in(regslice_both_egress_1_V_dest_V_U_ack_in),
    .data_out(egress_1_TDEST_int_regslice),
    .vld_out(regslice_both_egress_1_V_dest_V_U_vld_out),
    .ack_out(egress_1_TREADY_int_regslice),
    .apdone_blk(regslice_both_egress_1_V_dest_V_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 32 ))
regslice_both_golden_fifo_0_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_golden_fifo_0_TDATA),
    .vld_in(grp_pass_fu_180_golden_fifo_0_TVALID),
    .ack_in(golden_fifo_0_TREADY_int_regslice),
    .data_out(golden_fifo_0_TDATA),
    .vld_out(regslice_both_golden_fifo_0_U_vld_out),
    .ack_out(golden_fifo_0_TREADY),
    .apdone_blk(regslice_both_golden_fifo_0_U_apdone_blk)
);

hash_controller_regslice_both #(
    .DataWidth( 32 ))
regslice_both_golden_fifo_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_pass_fu_180_golden_fifo_1_TDATA),
    .vld_in(grp_pass_fu_180_golden_fifo_1_TVALID),
    .ack_in(golden_fifo_1_TREADY_int_regslice),
    .data_out(golden_fifo_1_TDATA),
    .vld_out(regslice_both_golden_fifo_1_U_vld_out),
    .ack_out(golden_fifo_1_TREADY),
    .apdone_blk(regslice_both_golden_fifo_1_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pass_fu_180_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_pass_fu_180_ap_done <= 1'b0;
        end else if ((grp_pass_fu_180_ap_done == 1'b1)) begin
            ap_sync_reg_grp_pass_fu_180_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_pass_fu_180_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_sync_reg_grp_pass_fu_180_ap_ready <= 1'b0;
        end else if ((grp_pass_fu_180_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_pass_fu_180_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pass_fu_180_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((ap_sync_grp_pass_fu_180_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
            grp_pass_fu_180_ap_start_reg <= 1'b1;
        end else if ((grp_pass_fu_180_ap_ready == 1'b1)) begin
            grp_pass_fu_180_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_header_read_reg_249 <= block_header;
        first_read_reg_259 <= first;
        last_read_reg_254 <= last;
        rd_0_offset_read_reg_279 <= rd_0_offset;
        rd_1_offset_read_reg_274 <= rd_1_offset;
        target_read_reg_244 <= target;
        wr_0_offset_read_reg_269 <= wr_0_offset;
        wr_1_offset_read_reg_264 <= wr_1_offset;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_golden_fifo_1_U_apdone_blk == 1'b1) | (regslice_both_golden_fifo_0_U_apdone_blk == 1'b1) | (regslice_both_ingress_1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ingress_0_V_data_V_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_golden_fifo_1_U_apdone_blk == 1'b1) | (regslice_both_golden_fifo_0_U_apdone_blk == 1'b1) | (regslice_both_ingress_1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ingress_0_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_golden_fifo_1_U_apdone_blk == 1'b1) | (regslice_both_golden_fifo_0_U_apdone_blk == 1'b1) | (regslice_both_ingress_1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ingress_0_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        egress_0_TREADY_int_regslice = grp_pass_fu_180_egress_0_TREADY;
    end else begin
        egress_0_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        egress_1_TREADY_int_regslice = grp_pass_fu_180_egress_1_TREADY;
    end else begin
        egress_1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        grp_pass_fu_180_ap_continue = 1'b1;
    end else begin
        grp_pass_fu_180_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        rd_0_ARVALID = grp_pass_fu_180_m_axi_rd_0_ARVALID;
    end else begin
        rd_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        rd_0_RREADY = grp_pass_fu_180_m_axi_rd_0_RREADY;
    end else begin
        rd_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        rd_1_ARVALID = grp_pass_fu_180_m_axi_rd_1_ARVALID;
    end else begin
        rd_1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        rd_1_RREADY = grp_pass_fu_180_m_axi_rd_1_RREADY;
    end else begin
        rd_1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_AWVALID = grp_pass_fu_180_m_axi_wr_0_AWVALID;
    end else begin
        wr_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_BREADY = grp_pass_fu_180_m_axi_wr_0_BREADY;
    end else begin
        wr_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_WVALID = grp_pass_fu_180_m_axi_wr_0_WVALID;
    end else begin
        wr_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        wr_1_AWVALID = grp_pass_fu_180_m_axi_wr_1_AWVALID;
    end else begin
        wr_1_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        wr_1_BREADY = grp_pass_fu_180_m_axi_wr_1_BREADY;
    end else begin
        wr_1_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        wr_1_WVALID = grp_pass_fu_180_m_axi_wr_1_WVALID;
    end else begin
        wr_1_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((regslice_both_golden_fifo_1_U_apdone_blk == 1'b1) | (regslice_both_golden_fifo_0_U_apdone_blk == 1'b1) | (regslice_both_ingress_1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ingress_0_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_pass_fu_180_ap_ready & ap_sync_grp_pass_fu_180_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state4 = ((regslice_both_golden_fifo_1_U_apdone_blk == 1'b1) | (regslice_both_golden_fifo_0_U_apdone_blk == 1'b1) | (regslice_both_ingress_1_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ingress_0_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_pass_fu_180_ap_done = (grp_pass_fu_180_ap_done | ap_sync_reg_grp_pass_fu_180_ap_done);

assign ap_sync_grp_pass_fu_180_ap_ready = (grp_pass_fu_180_ap_ready | ap_sync_reg_grp_pass_fu_180_ap_ready);

assign egress_0_TREADY = regslice_both_egress_0_V_data_V_U_ack_in;

assign egress_1_TREADY = regslice_both_egress_1_V_data_V_U_ack_in;

assign golden_fifo_0_TVALID = regslice_both_golden_fifo_0_U_vld_out;

assign golden_fifo_1_TVALID = regslice_both_golden_fifo_1_U_vld_out;

assign grp_pass_fu_180_ap_start = grp_pass_fu_180_ap_start_reg;

assign grp_pass_fu_180_golden_fifo_0_TREADY = (golden_fifo_0_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_pass_fu_180_golden_fifo_1_TREADY = (golden_fifo_1_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_pass_fu_180_ingress_0_TREADY = (ingress_0_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_pass_fu_180_ingress_1_TREADY = (ingress_1_TREADY_int_regslice & ap_CS_fsm_state3);

assign ingress_0_TVALID = regslice_both_ingress_0_V_data_V_U_vld_out;

assign ingress_0_TVALID_int_regslice = grp_pass_fu_180_ingress_0_TVALID;

assign ingress_1_TVALID = regslice_both_ingress_1_V_data_V_U_vld_out;

assign ingress_1_TVALID_int_regslice = grp_pass_fu_180_ingress_1_TVALID;

endmodule //hash_controller
