-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hash_controller_pass is
port (
    m_axi_rd_0_AWVALID : OUT STD_LOGIC;
    m_axi_rd_0_AWREADY : IN STD_LOGIC;
    m_axi_rd_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_WVALID : OUT STD_LOGIC;
    m_axi_rd_0_WREADY : IN STD_LOGIC;
    m_axi_rd_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_rd_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_0_WLAST : OUT STD_LOGIC;
    m_axi_rd_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_ARVALID : OUT STD_LOGIC;
    m_axi_rd_0_ARREADY : IN STD_LOGIC;
    m_axi_rd_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_RVALID : IN STD_LOGIC;
    m_axi_rd_0_RREADY : OUT STD_LOGIC;
    m_axi_rd_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_rd_0_RLAST : IN STD_LOGIC;
    m_axi_rd_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_rd_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_BVALID : IN STD_LOGIC;
    m_axi_rd_0_BREADY : OUT STD_LOGIC;
    m_axi_rd_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rd_01 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_1_AWVALID : OUT STD_LOGIC;
    m_axi_rd_1_AWREADY : IN STD_LOGIC;
    m_axi_rd_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_WVALID : OUT STD_LOGIC;
    m_axi_rd_1_WREADY : IN STD_LOGIC;
    m_axi_rd_1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_rd_1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_1_WLAST : OUT STD_LOGIC;
    m_axi_rd_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_ARVALID : OUT STD_LOGIC;
    m_axi_rd_1_ARREADY : IN STD_LOGIC;
    m_axi_rd_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_RVALID : IN STD_LOGIC;
    m_axi_rd_1_RREADY : OUT STD_LOGIC;
    m_axi_rd_1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_rd_1_RLAST : IN STD_LOGIC;
    m_axi_rd_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_rd_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_BVALID : IN STD_LOGIC;
    m_axi_rd_1_BREADY : OUT STD_LOGIC;
    m_axi_rd_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rd_12 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_0_AWVALID : OUT STD_LOGIC;
    m_axi_wr_0_AWREADY : IN STD_LOGIC;
    m_axi_wr_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_WVALID : OUT STD_LOGIC;
    m_axi_wr_0_WREADY : IN STD_LOGIC;
    m_axi_wr_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_wr_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_0_WLAST : OUT STD_LOGIC;
    m_axi_wr_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_ARVALID : OUT STD_LOGIC;
    m_axi_wr_0_ARREADY : IN STD_LOGIC;
    m_axi_wr_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_RVALID : IN STD_LOGIC;
    m_axi_wr_0_RREADY : OUT STD_LOGIC;
    m_axi_wr_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_wr_0_RLAST : IN STD_LOGIC;
    m_axi_wr_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_wr_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_BVALID : IN STD_LOGIC;
    m_axi_wr_0_BREADY : OUT STD_LOGIC;
    m_axi_wr_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    wr_03 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_1_AWVALID : OUT STD_LOGIC;
    m_axi_wr_1_AWREADY : IN STD_LOGIC;
    m_axi_wr_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_WVALID : OUT STD_LOGIC;
    m_axi_wr_1_WREADY : IN STD_LOGIC;
    m_axi_wr_1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_wr_1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_1_WLAST : OUT STD_LOGIC;
    m_axi_wr_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_ARVALID : OUT STD_LOGIC;
    m_axi_wr_1_ARREADY : IN STD_LOGIC;
    m_axi_wr_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_RVALID : IN STD_LOGIC;
    m_axi_wr_1_RREADY : OUT STD_LOGIC;
    m_axi_wr_1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_wr_1_RLAST : IN STD_LOGIC;
    m_axi_wr_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_wr_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_BVALID : IN STD_LOGIC;
    m_axi_wr_1_BREADY : OUT STD_LOGIC;
    m_axi_wr_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    wr_14 : IN STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    ingress_0_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_0_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_1_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    ingress_1_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_1_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_1_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    egress_0_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    egress_0_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_1_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    egress_1_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_1_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    golden_fifo_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    golden_fifo_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    first : IN STD_LOGIC_VECTOR (0 downto 0);
    last : IN STD_LOGIC_VECTOR (0 downto 0);
    block_header : IN STD_LOGIC_VECTOR (511 downto 0);
    target : IN STD_LOGIC_VECTOR (511 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ingress_0_TVALID : OUT STD_LOGIC;
    ingress_0_TREADY : IN STD_LOGIC;
    rd_01_ap_vld : IN STD_LOGIC;
    first_ap_vld : IN STD_LOGIC;
    block_header_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ingress_1_TVALID : OUT STD_LOGIC;
    ingress_1_TREADY : IN STD_LOGIC;
    rd_12_ap_vld : IN STD_LOGIC;
    wr_03_ap_vld : IN STD_LOGIC;
    egress_0_TVALID : IN STD_LOGIC;
    egress_0_TREADY : OUT STD_LOGIC;
    last_ap_vld : IN STD_LOGIC;
    target_ap_vld : IN STD_LOGIC;
    golden_fifo_0_TVALID : OUT STD_LOGIC;
    golden_fifo_0_TREADY : IN STD_LOGIC;
    wr_14_ap_vld : IN STD_LOGIC;
    egress_1_TVALID : IN STD_LOGIC;
    egress_1_TREADY : OUT STD_LOGIC;
    golden_fifo_1_TVALID : OUT STD_LOGIC;
    golden_fifo_1_TREADY : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of hash_controller_pass is 
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ingress_U0_ap_start : STD_LOGIC;
    signal ingress_U0_ap_done : STD_LOGIC;
    signal ingress_U0_ap_continue : STD_LOGIC;
    signal ingress_U0_ap_idle : STD_LOGIC;
    signal ingress_U0_ap_ready : STD_LOGIC;
    signal ingress_U0_m_axi_rd_0_AWVALID : STD_LOGIC;
    signal ingress_U0_m_axi_rd_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_U0_m_axi_rd_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_m_axi_rd_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ingress_U0_m_axi_rd_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_U0_m_axi_rd_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_U0_m_axi_rd_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_U0_m_axi_rd_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_U0_m_axi_rd_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_U0_m_axi_rd_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_U0_m_axi_rd_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_U0_m_axi_rd_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_m_axi_rd_0_WVALID : STD_LOGIC;
    signal ingress_U0_m_axi_rd_0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal ingress_U0_m_axi_rd_0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal ingress_U0_m_axi_rd_0_WLAST : STD_LOGIC;
    signal ingress_U0_m_axi_rd_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_m_axi_rd_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_m_axi_rd_0_ARVALID : STD_LOGIC;
    signal ingress_U0_m_axi_rd_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_U0_m_axi_rd_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_m_axi_rd_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ingress_U0_m_axi_rd_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_U0_m_axi_rd_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_U0_m_axi_rd_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_U0_m_axi_rd_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_U0_m_axi_rd_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_U0_m_axi_rd_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_U0_m_axi_rd_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_U0_m_axi_rd_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_m_axi_rd_0_RREADY : STD_LOGIC;
    signal ingress_U0_m_axi_rd_0_BREADY : STD_LOGIC;
    signal ingress_U0_ingress_0_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal ingress_U0_ingress_0_TVALID : STD_LOGIC;
    signal ingress_U0_ingress_0_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_U0_ingress_0_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_U0_ingress_0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_ingress_0_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_U0_first : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ingress_1_U0_ap_start : STD_LOGIC;
    signal ingress_1_U0_ap_done : STD_LOGIC;
    signal ingress_1_U0_ap_continue : STD_LOGIC;
    signal ingress_1_U0_ap_idle : STD_LOGIC;
    signal ingress_1_U0_ap_ready : STD_LOGIC;
    signal ingress_1_U0_m_axi_rd_1_AWVALID : STD_LOGIC;
    signal ingress_1_U0_m_axi_rd_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_1_U0_m_axi_rd_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_m_axi_rd_1_WVALID : STD_LOGIC;
    signal ingress_1_U0_m_axi_rd_1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal ingress_1_U0_m_axi_rd_1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal ingress_1_U0_m_axi_rd_1_WLAST : STD_LOGIC;
    signal ingress_1_U0_m_axi_rd_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_m_axi_rd_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARVALID : STD_LOGIC;
    signal ingress_1_U0_m_axi_rd_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ingress_1_U0_m_axi_rd_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_m_axi_rd_1_RREADY : STD_LOGIC;
    signal ingress_1_U0_m_axi_rd_1_BREADY : STD_LOGIC;
    signal ingress_1_U0_ingress_1_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal ingress_1_U0_ingress_1_TVALID : STD_LOGIC;
    signal ingress_1_U0_ingress_1_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_1_U0_ingress_1_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal ingress_1_U0_ingress_1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ingress_1_U0_ingress_1_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_ap_start : STD_LOGIC;
    signal egress_U0_ap_done : STD_LOGIC;
    signal egress_U0_ap_continue : STD_LOGIC;
    signal egress_U0_ap_idle : STD_LOGIC;
    signal egress_U0_ap_ready : STD_LOGIC;
    signal egress_U0_m_axi_wr_0_AWVALID : STD_LOGIC;
    signal egress_U0_m_axi_wr_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal egress_U0_m_axi_wr_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_m_axi_wr_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_U0_m_axi_wr_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_U0_m_axi_wr_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_U0_m_axi_wr_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_U0_m_axi_wr_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_U0_m_axi_wr_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_U0_m_axi_wr_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_U0_m_axi_wr_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_U0_m_axi_wr_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_m_axi_wr_0_WVALID : STD_LOGIC;
    signal egress_U0_m_axi_wr_0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal egress_U0_m_axi_wr_0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_U0_m_axi_wr_0_WLAST : STD_LOGIC;
    signal egress_U0_m_axi_wr_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_m_axi_wr_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_m_axi_wr_0_ARVALID : STD_LOGIC;
    signal egress_U0_m_axi_wr_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal egress_U0_m_axi_wr_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_m_axi_wr_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_U0_m_axi_wr_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_U0_m_axi_wr_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_U0_m_axi_wr_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_U0_m_axi_wr_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_U0_m_axi_wr_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_U0_m_axi_wr_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_U0_m_axi_wr_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_U0_m_axi_wr_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_U0_m_axi_wr_0_RREADY : STD_LOGIC;
    signal egress_U0_m_axi_wr_0_BREADY : STD_LOGIC;
    signal egress_U0_egress_0_TREADY : STD_LOGIC;
    signal egress_U0_golden_fifo_0_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_U0_golden_fifo_0_TVALID : STD_LOGIC;
    signal egress_1_U0_ap_start : STD_LOGIC;
    signal egress_1_U0_ap_done : STD_LOGIC;
    signal egress_1_U0_ap_continue : STD_LOGIC;
    signal egress_1_U0_ap_idle : STD_LOGIC;
    signal egress_1_U0_ap_ready : STD_LOGIC;
    signal egress_1_U0_m_axi_wr_1_AWVALID : STD_LOGIC;
    signal egress_1_U0_m_axi_wr_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_1_U0_m_axi_wr_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_1_U0_m_axi_wr_1_WVALID : STD_LOGIC;
    signal egress_1_U0_m_axi_wr_1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal egress_1_U0_m_axi_wr_1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_1_U0_m_axi_wr_1_WLAST : STD_LOGIC;
    signal egress_1_U0_m_axi_wr_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_1_U0_m_axi_wr_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARVALID : STD_LOGIC;
    signal egress_1_U0_m_axi_wr_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal egress_1_U0_m_axi_wr_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal egress_1_U0_m_axi_wr_1_RREADY : STD_LOGIC;
    signal egress_1_U0_m_axi_wr_1_BREADY : STD_LOGIC;
    signal egress_1_U0_egress_1_TREADY : STD_LOGIC;
    signal egress_1_U0_golden_fifo_1_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal egress_1_U0_golden_fifo_1_TVALID : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_ingress_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ingress_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_ingress_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ingress_1_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_egress_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_egress_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_egress_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_egress_1_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hash_controller_ingress IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_rd_0_AWVALID : OUT STD_LOGIC;
        m_axi_rd_0_AWREADY : IN STD_LOGIC;
        m_axi_rd_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_WVALID : OUT STD_LOGIC;
        m_axi_rd_0_WREADY : IN STD_LOGIC;
        m_axi_rd_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_0_WLAST : OUT STD_LOGIC;
        m_axi_rd_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_ARVALID : OUT STD_LOGIC;
        m_axi_rd_0_ARREADY : IN STD_LOGIC;
        m_axi_rd_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_RVALID : IN STD_LOGIC;
        m_axi_rd_0_RREADY : OUT STD_LOGIC;
        m_axi_rd_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_0_RLAST : IN STD_LOGIC;
        m_axi_rd_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_rd_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_BVALID : IN STD_LOGIC;
        m_axi_rd_0_BREADY : OUT STD_LOGIC;
        m_axi_rd_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ingress_0_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        ingress_0_TVALID : OUT STD_LOGIC;
        ingress_0_TREADY : IN STD_LOGIC;
        ingress_0_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_0_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ingress_0_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        gmem : IN STD_LOGIC_VECTOR (63 downto 0);
        first : IN STD_LOGIC;
        block_header : IN STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component hash_controller_ingress_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_rd_1_AWVALID : OUT STD_LOGIC;
        m_axi_rd_1_AWREADY : IN STD_LOGIC;
        m_axi_rd_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_WVALID : OUT STD_LOGIC;
        m_axi_rd_1_WREADY : IN STD_LOGIC;
        m_axi_rd_1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_1_WLAST : OUT STD_LOGIC;
        m_axi_rd_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_ARVALID : OUT STD_LOGIC;
        m_axi_rd_1_ARREADY : IN STD_LOGIC;
        m_axi_rd_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_RVALID : IN STD_LOGIC;
        m_axi_rd_1_RREADY : OUT STD_LOGIC;
        m_axi_rd_1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_1_RLAST : IN STD_LOGIC;
        m_axi_rd_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_rd_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_BVALID : IN STD_LOGIC;
        m_axi_rd_1_BREADY : OUT STD_LOGIC;
        m_axi_rd_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ingress_1_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        ingress_1_TVALID : OUT STD_LOGIC;
        ingress_1_TREADY : IN STD_LOGIC;
        ingress_1_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_1_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ingress_1_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        gmem : IN STD_LOGIC_VECTOR (63 downto 0);
        first : IN STD_LOGIC_VECTOR (0 downto 0);
        block_header : IN STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component hash_controller_egress IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        egress_0_TVALID : IN STD_LOGIC;
        m_axi_wr_0_AWVALID : OUT STD_LOGIC;
        m_axi_wr_0_AWREADY : IN STD_LOGIC;
        m_axi_wr_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_WVALID : OUT STD_LOGIC;
        m_axi_wr_0_WREADY : IN STD_LOGIC;
        m_axi_wr_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_0_WLAST : OUT STD_LOGIC;
        m_axi_wr_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_ARVALID : OUT STD_LOGIC;
        m_axi_wr_0_ARREADY : IN STD_LOGIC;
        m_axi_wr_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_RVALID : IN STD_LOGIC;
        m_axi_wr_0_RREADY : OUT STD_LOGIC;
        m_axi_wr_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_0_RLAST : IN STD_LOGIC;
        m_axi_wr_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_wr_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_BVALID : IN STD_LOGIC;
        m_axi_wr_0_BREADY : OUT STD_LOGIC;
        m_axi_wr_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        golden_fifo_0_TREADY : IN STD_LOGIC;
        gmem : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_0_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        egress_0_TREADY : OUT STD_LOGIC;
        egress_0_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_0_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        egress_0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        last : IN STD_LOGIC_VECTOR (0 downto 0);
        target : IN STD_LOGIC_VECTOR (511 downto 0);
        golden_fifo_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        golden_fifo_0_TVALID : OUT STD_LOGIC );
    end component;


    component hash_controller_egress_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        egress_1_TVALID : IN STD_LOGIC;
        m_axi_wr_1_AWVALID : OUT STD_LOGIC;
        m_axi_wr_1_AWREADY : IN STD_LOGIC;
        m_axi_wr_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_WVALID : OUT STD_LOGIC;
        m_axi_wr_1_WREADY : IN STD_LOGIC;
        m_axi_wr_1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_1_WLAST : OUT STD_LOGIC;
        m_axi_wr_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_ARVALID : OUT STD_LOGIC;
        m_axi_wr_1_ARREADY : IN STD_LOGIC;
        m_axi_wr_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_RVALID : IN STD_LOGIC;
        m_axi_wr_1_RREADY : OUT STD_LOGIC;
        m_axi_wr_1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_1_RLAST : IN STD_LOGIC;
        m_axi_wr_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_wr_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_BVALID : IN STD_LOGIC;
        m_axi_wr_1_BREADY : OUT STD_LOGIC;
        m_axi_wr_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        golden_fifo_1_TREADY : IN STD_LOGIC;
        gmem : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_1_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        egress_1_TREADY : OUT STD_LOGIC;
        egress_1_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_1_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        egress_1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        last : IN STD_LOGIC_VECTOR (0 downto 0);
        target : IN STD_LOGIC_VECTOR (511 downto 0);
        golden_fifo_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        golden_fifo_1_TVALID : OUT STD_LOGIC );
    end component;



begin
    ingress_U0 : component hash_controller_ingress
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ingress_U0_ap_start,
        ap_done => ingress_U0_ap_done,
        ap_continue => ingress_U0_ap_continue,
        ap_idle => ingress_U0_ap_idle,
        ap_ready => ingress_U0_ap_ready,
        m_axi_rd_0_AWVALID => ingress_U0_m_axi_rd_0_AWVALID,
        m_axi_rd_0_AWREADY => ap_const_logic_0,
        m_axi_rd_0_AWADDR => ingress_U0_m_axi_rd_0_AWADDR,
        m_axi_rd_0_AWID => ingress_U0_m_axi_rd_0_AWID,
        m_axi_rd_0_AWLEN => ingress_U0_m_axi_rd_0_AWLEN,
        m_axi_rd_0_AWSIZE => ingress_U0_m_axi_rd_0_AWSIZE,
        m_axi_rd_0_AWBURST => ingress_U0_m_axi_rd_0_AWBURST,
        m_axi_rd_0_AWLOCK => ingress_U0_m_axi_rd_0_AWLOCK,
        m_axi_rd_0_AWCACHE => ingress_U0_m_axi_rd_0_AWCACHE,
        m_axi_rd_0_AWPROT => ingress_U0_m_axi_rd_0_AWPROT,
        m_axi_rd_0_AWQOS => ingress_U0_m_axi_rd_0_AWQOS,
        m_axi_rd_0_AWREGION => ingress_U0_m_axi_rd_0_AWREGION,
        m_axi_rd_0_AWUSER => ingress_U0_m_axi_rd_0_AWUSER,
        m_axi_rd_0_WVALID => ingress_U0_m_axi_rd_0_WVALID,
        m_axi_rd_0_WREADY => ap_const_logic_0,
        m_axi_rd_0_WDATA => ingress_U0_m_axi_rd_0_WDATA,
        m_axi_rd_0_WSTRB => ingress_U0_m_axi_rd_0_WSTRB,
        m_axi_rd_0_WLAST => ingress_U0_m_axi_rd_0_WLAST,
        m_axi_rd_0_WID => ingress_U0_m_axi_rd_0_WID,
        m_axi_rd_0_WUSER => ingress_U0_m_axi_rd_0_WUSER,
        m_axi_rd_0_ARVALID => ingress_U0_m_axi_rd_0_ARVALID,
        m_axi_rd_0_ARREADY => m_axi_rd_0_ARREADY,
        m_axi_rd_0_ARADDR => ingress_U0_m_axi_rd_0_ARADDR,
        m_axi_rd_0_ARID => ingress_U0_m_axi_rd_0_ARID,
        m_axi_rd_0_ARLEN => ingress_U0_m_axi_rd_0_ARLEN,
        m_axi_rd_0_ARSIZE => ingress_U0_m_axi_rd_0_ARSIZE,
        m_axi_rd_0_ARBURST => ingress_U0_m_axi_rd_0_ARBURST,
        m_axi_rd_0_ARLOCK => ingress_U0_m_axi_rd_0_ARLOCK,
        m_axi_rd_0_ARCACHE => ingress_U0_m_axi_rd_0_ARCACHE,
        m_axi_rd_0_ARPROT => ingress_U0_m_axi_rd_0_ARPROT,
        m_axi_rd_0_ARQOS => ingress_U0_m_axi_rd_0_ARQOS,
        m_axi_rd_0_ARREGION => ingress_U0_m_axi_rd_0_ARREGION,
        m_axi_rd_0_ARUSER => ingress_U0_m_axi_rd_0_ARUSER,
        m_axi_rd_0_RVALID => m_axi_rd_0_RVALID,
        m_axi_rd_0_RREADY => ingress_U0_m_axi_rd_0_RREADY,
        m_axi_rd_0_RDATA => m_axi_rd_0_RDATA,
        m_axi_rd_0_RLAST => m_axi_rd_0_RLAST,
        m_axi_rd_0_RID => m_axi_rd_0_RID,
        m_axi_rd_0_RFIFONUM => m_axi_rd_0_RFIFONUM,
        m_axi_rd_0_RUSER => m_axi_rd_0_RUSER,
        m_axi_rd_0_RRESP => m_axi_rd_0_RRESP,
        m_axi_rd_0_BVALID => ap_const_logic_0,
        m_axi_rd_0_BREADY => ingress_U0_m_axi_rd_0_BREADY,
        m_axi_rd_0_BRESP => ap_const_lv2_0,
        m_axi_rd_0_BID => ap_const_lv1_0,
        m_axi_rd_0_BUSER => ap_const_lv1_0,
        ingress_0_TDATA => ingress_U0_ingress_0_TDATA,
        ingress_0_TVALID => ingress_U0_ingress_0_TVALID,
        ingress_0_TREADY => ingress_0_TREADY,
        ingress_0_TKEEP => ingress_U0_ingress_0_TKEEP,
        ingress_0_TSTRB => ingress_U0_ingress_0_TSTRB,
        ingress_0_TLAST => ingress_U0_ingress_0_TLAST,
        ingress_0_TDEST => ingress_U0_ingress_0_TDEST,
        gmem => rd_01,
        first => ingress_U0_first,
        block_header => block_header);

    ingress_1_U0 : component hash_controller_ingress_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ingress_1_U0_ap_start,
        ap_done => ingress_1_U0_ap_done,
        ap_continue => ingress_1_U0_ap_continue,
        ap_idle => ingress_1_U0_ap_idle,
        ap_ready => ingress_1_U0_ap_ready,
        m_axi_rd_1_AWVALID => ingress_1_U0_m_axi_rd_1_AWVALID,
        m_axi_rd_1_AWREADY => ap_const_logic_0,
        m_axi_rd_1_AWADDR => ingress_1_U0_m_axi_rd_1_AWADDR,
        m_axi_rd_1_AWID => ingress_1_U0_m_axi_rd_1_AWID,
        m_axi_rd_1_AWLEN => ingress_1_U0_m_axi_rd_1_AWLEN,
        m_axi_rd_1_AWSIZE => ingress_1_U0_m_axi_rd_1_AWSIZE,
        m_axi_rd_1_AWBURST => ingress_1_U0_m_axi_rd_1_AWBURST,
        m_axi_rd_1_AWLOCK => ingress_1_U0_m_axi_rd_1_AWLOCK,
        m_axi_rd_1_AWCACHE => ingress_1_U0_m_axi_rd_1_AWCACHE,
        m_axi_rd_1_AWPROT => ingress_1_U0_m_axi_rd_1_AWPROT,
        m_axi_rd_1_AWQOS => ingress_1_U0_m_axi_rd_1_AWQOS,
        m_axi_rd_1_AWREGION => ingress_1_U0_m_axi_rd_1_AWREGION,
        m_axi_rd_1_AWUSER => ingress_1_U0_m_axi_rd_1_AWUSER,
        m_axi_rd_1_WVALID => ingress_1_U0_m_axi_rd_1_WVALID,
        m_axi_rd_1_WREADY => ap_const_logic_0,
        m_axi_rd_1_WDATA => ingress_1_U0_m_axi_rd_1_WDATA,
        m_axi_rd_1_WSTRB => ingress_1_U0_m_axi_rd_1_WSTRB,
        m_axi_rd_1_WLAST => ingress_1_U0_m_axi_rd_1_WLAST,
        m_axi_rd_1_WID => ingress_1_U0_m_axi_rd_1_WID,
        m_axi_rd_1_WUSER => ingress_1_U0_m_axi_rd_1_WUSER,
        m_axi_rd_1_ARVALID => ingress_1_U0_m_axi_rd_1_ARVALID,
        m_axi_rd_1_ARREADY => m_axi_rd_1_ARREADY,
        m_axi_rd_1_ARADDR => ingress_1_U0_m_axi_rd_1_ARADDR,
        m_axi_rd_1_ARID => ingress_1_U0_m_axi_rd_1_ARID,
        m_axi_rd_1_ARLEN => ingress_1_U0_m_axi_rd_1_ARLEN,
        m_axi_rd_1_ARSIZE => ingress_1_U0_m_axi_rd_1_ARSIZE,
        m_axi_rd_1_ARBURST => ingress_1_U0_m_axi_rd_1_ARBURST,
        m_axi_rd_1_ARLOCK => ingress_1_U0_m_axi_rd_1_ARLOCK,
        m_axi_rd_1_ARCACHE => ingress_1_U0_m_axi_rd_1_ARCACHE,
        m_axi_rd_1_ARPROT => ingress_1_U0_m_axi_rd_1_ARPROT,
        m_axi_rd_1_ARQOS => ingress_1_U0_m_axi_rd_1_ARQOS,
        m_axi_rd_1_ARREGION => ingress_1_U0_m_axi_rd_1_ARREGION,
        m_axi_rd_1_ARUSER => ingress_1_U0_m_axi_rd_1_ARUSER,
        m_axi_rd_1_RVALID => m_axi_rd_1_RVALID,
        m_axi_rd_1_RREADY => ingress_1_U0_m_axi_rd_1_RREADY,
        m_axi_rd_1_RDATA => m_axi_rd_1_RDATA,
        m_axi_rd_1_RLAST => m_axi_rd_1_RLAST,
        m_axi_rd_1_RID => m_axi_rd_1_RID,
        m_axi_rd_1_RFIFONUM => m_axi_rd_1_RFIFONUM,
        m_axi_rd_1_RUSER => m_axi_rd_1_RUSER,
        m_axi_rd_1_RRESP => m_axi_rd_1_RRESP,
        m_axi_rd_1_BVALID => ap_const_logic_0,
        m_axi_rd_1_BREADY => ingress_1_U0_m_axi_rd_1_BREADY,
        m_axi_rd_1_BRESP => ap_const_lv2_0,
        m_axi_rd_1_BID => ap_const_lv1_0,
        m_axi_rd_1_BUSER => ap_const_lv1_0,
        ingress_1_TDATA => ingress_1_U0_ingress_1_TDATA,
        ingress_1_TVALID => ingress_1_U0_ingress_1_TVALID,
        ingress_1_TREADY => ingress_1_TREADY,
        ingress_1_TKEEP => ingress_1_U0_ingress_1_TKEEP,
        ingress_1_TSTRB => ingress_1_U0_ingress_1_TSTRB,
        ingress_1_TLAST => ingress_1_U0_ingress_1_TLAST,
        ingress_1_TDEST => ingress_1_U0_ingress_1_TDEST,
        gmem => rd_12,
        first => first,
        block_header => block_header);

    egress_U0 : component hash_controller_egress
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => egress_U0_ap_start,
        ap_done => egress_U0_ap_done,
        ap_continue => egress_U0_ap_continue,
        ap_idle => egress_U0_ap_idle,
        ap_ready => egress_U0_ap_ready,
        egress_0_TVALID => egress_0_TVALID,
        m_axi_wr_0_AWVALID => egress_U0_m_axi_wr_0_AWVALID,
        m_axi_wr_0_AWREADY => m_axi_wr_0_AWREADY,
        m_axi_wr_0_AWADDR => egress_U0_m_axi_wr_0_AWADDR,
        m_axi_wr_0_AWID => egress_U0_m_axi_wr_0_AWID,
        m_axi_wr_0_AWLEN => egress_U0_m_axi_wr_0_AWLEN,
        m_axi_wr_0_AWSIZE => egress_U0_m_axi_wr_0_AWSIZE,
        m_axi_wr_0_AWBURST => egress_U0_m_axi_wr_0_AWBURST,
        m_axi_wr_0_AWLOCK => egress_U0_m_axi_wr_0_AWLOCK,
        m_axi_wr_0_AWCACHE => egress_U0_m_axi_wr_0_AWCACHE,
        m_axi_wr_0_AWPROT => egress_U0_m_axi_wr_0_AWPROT,
        m_axi_wr_0_AWQOS => egress_U0_m_axi_wr_0_AWQOS,
        m_axi_wr_0_AWREGION => egress_U0_m_axi_wr_0_AWREGION,
        m_axi_wr_0_AWUSER => egress_U0_m_axi_wr_0_AWUSER,
        m_axi_wr_0_WVALID => egress_U0_m_axi_wr_0_WVALID,
        m_axi_wr_0_WREADY => m_axi_wr_0_WREADY,
        m_axi_wr_0_WDATA => egress_U0_m_axi_wr_0_WDATA,
        m_axi_wr_0_WSTRB => egress_U0_m_axi_wr_0_WSTRB,
        m_axi_wr_0_WLAST => egress_U0_m_axi_wr_0_WLAST,
        m_axi_wr_0_WID => egress_U0_m_axi_wr_0_WID,
        m_axi_wr_0_WUSER => egress_U0_m_axi_wr_0_WUSER,
        m_axi_wr_0_ARVALID => egress_U0_m_axi_wr_0_ARVALID,
        m_axi_wr_0_ARREADY => ap_const_logic_0,
        m_axi_wr_0_ARADDR => egress_U0_m_axi_wr_0_ARADDR,
        m_axi_wr_0_ARID => egress_U0_m_axi_wr_0_ARID,
        m_axi_wr_0_ARLEN => egress_U0_m_axi_wr_0_ARLEN,
        m_axi_wr_0_ARSIZE => egress_U0_m_axi_wr_0_ARSIZE,
        m_axi_wr_0_ARBURST => egress_U0_m_axi_wr_0_ARBURST,
        m_axi_wr_0_ARLOCK => egress_U0_m_axi_wr_0_ARLOCK,
        m_axi_wr_0_ARCACHE => egress_U0_m_axi_wr_0_ARCACHE,
        m_axi_wr_0_ARPROT => egress_U0_m_axi_wr_0_ARPROT,
        m_axi_wr_0_ARQOS => egress_U0_m_axi_wr_0_ARQOS,
        m_axi_wr_0_ARREGION => egress_U0_m_axi_wr_0_ARREGION,
        m_axi_wr_0_ARUSER => egress_U0_m_axi_wr_0_ARUSER,
        m_axi_wr_0_RVALID => ap_const_logic_0,
        m_axi_wr_0_RREADY => egress_U0_m_axi_wr_0_RREADY,
        m_axi_wr_0_RDATA => ap_const_lv256_lc_1,
        m_axi_wr_0_RLAST => ap_const_logic_0,
        m_axi_wr_0_RID => ap_const_lv1_0,
        m_axi_wr_0_RFIFONUM => ap_const_lv9_0,
        m_axi_wr_0_RUSER => ap_const_lv1_0,
        m_axi_wr_0_RRESP => ap_const_lv2_0,
        m_axi_wr_0_BVALID => m_axi_wr_0_BVALID,
        m_axi_wr_0_BREADY => egress_U0_m_axi_wr_0_BREADY,
        m_axi_wr_0_BRESP => m_axi_wr_0_BRESP,
        m_axi_wr_0_BID => m_axi_wr_0_BID,
        m_axi_wr_0_BUSER => m_axi_wr_0_BUSER,
        golden_fifo_0_TREADY => golden_fifo_0_TREADY,
        gmem => wr_03,
        egress_0_TDATA => egress_0_TDATA,
        egress_0_TREADY => egress_U0_egress_0_TREADY,
        egress_0_TKEEP => egress_0_TKEEP,
        egress_0_TSTRB => egress_0_TSTRB,
        egress_0_TLAST => egress_0_TLAST,
        egress_0_TDEST => egress_0_TDEST,
        last => last,
        target => target,
        golden_fifo_0_TDATA => egress_U0_golden_fifo_0_TDATA,
        golden_fifo_0_TVALID => egress_U0_golden_fifo_0_TVALID);

    egress_1_U0 : component hash_controller_egress_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => egress_1_U0_ap_start,
        ap_done => egress_1_U0_ap_done,
        ap_continue => egress_1_U0_ap_continue,
        ap_idle => egress_1_U0_ap_idle,
        ap_ready => egress_1_U0_ap_ready,
        egress_1_TVALID => egress_1_TVALID,
        m_axi_wr_1_AWVALID => egress_1_U0_m_axi_wr_1_AWVALID,
        m_axi_wr_1_AWREADY => m_axi_wr_1_AWREADY,
        m_axi_wr_1_AWADDR => egress_1_U0_m_axi_wr_1_AWADDR,
        m_axi_wr_1_AWID => egress_1_U0_m_axi_wr_1_AWID,
        m_axi_wr_1_AWLEN => egress_1_U0_m_axi_wr_1_AWLEN,
        m_axi_wr_1_AWSIZE => egress_1_U0_m_axi_wr_1_AWSIZE,
        m_axi_wr_1_AWBURST => egress_1_U0_m_axi_wr_1_AWBURST,
        m_axi_wr_1_AWLOCK => egress_1_U0_m_axi_wr_1_AWLOCK,
        m_axi_wr_1_AWCACHE => egress_1_U0_m_axi_wr_1_AWCACHE,
        m_axi_wr_1_AWPROT => egress_1_U0_m_axi_wr_1_AWPROT,
        m_axi_wr_1_AWQOS => egress_1_U0_m_axi_wr_1_AWQOS,
        m_axi_wr_1_AWREGION => egress_1_U0_m_axi_wr_1_AWREGION,
        m_axi_wr_1_AWUSER => egress_1_U0_m_axi_wr_1_AWUSER,
        m_axi_wr_1_WVALID => egress_1_U0_m_axi_wr_1_WVALID,
        m_axi_wr_1_WREADY => m_axi_wr_1_WREADY,
        m_axi_wr_1_WDATA => egress_1_U0_m_axi_wr_1_WDATA,
        m_axi_wr_1_WSTRB => egress_1_U0_m_axi_wr_1_WSTRB,
        m_axi_wr_1_WLAST => egress_1_U0_m_axi_wr_1_WLAST,
        m_axi_wr_1_WID => egress_1_U0_m_axi_wr_1_WID,
        m_axi_wr_1_WUSER => egress_1_U0_m_axi_wr_1_WUSER,
        m_axi_wr_1_ARVALID => egress_1_U0_m_axi_wr_1_ARVALID,
        m_axi_wr_1_ARREADY => ap_const_logic_0,
        m_axi_wr_1_ARADDR => egress_1_U0_m_axi_wr_1_ARADDR,
        m_axi_wr_1_ARID => egress_1_U0_m_axi_wr_1_ARID,
        m_axi_wr_1_ARLEN => egress_1_U0_m_axi_wr_1_ARLEN,
        m_axi_wr_1_ARSIZE => egress_1_U0_m_axi_wr_1_ARSIZE,
        m_axi_wr_1_ARBURST => egress_1_U0_m_axi_wr_1_ARBURST,
        m_axi_wr_1_ARLOCK => egress_1_U0_m_axi_wr_1_ARLOCK,
        m_axi_wr_1_ARCACHE => egress_1_U0_m_axi_wr_1_ARCACHE,
        m_axi_wr_1_ARPROT => egress_1_U0_m_axi_wr_1_ARPROT,
        m_axi_wr_1_ARQOS => egress_1_U0_m_axi_wr_1_ARQOS,
        m_axi_wr_1_ARREGION => egress_1_U0_m_axi_wr_1_ARREGION,
        m_axi_wr_1_ARUSER => egress_1_U0_m_axi_wr_1_ARUSER,
        m_axi_wr_1_RVALID => ap_const_logic_0,
        m_axi_wr_1_RREADY => egress_1_U0_m_axi_wr_1_RREADY,
        m_axi_wr_1_RDATA => ap_const_lv256_lc_1,
        m_axi_wr_1_RLAST => ap_const_logic_0,
        m_axi_wr_1_RID => ap_const_lv1_0,
        m_axi_wr_1_RFIFONUM => ap_const_lv9_0,
        m_axi_wr_1_RUSER => ap_const_lv1_0,
        m_axi_wr_1_RRESP => ap_const_lv2_0,
        m_axi_wr_1_BVALID => m_axi_wr_1_BVALID,
        m_axi_wr_1_BREADY => egress_1_U0_m_axi_wr_1_BREADY,
        m_axi_wr_1_BRESP => m_axi_wr_1_BRESP,
        m_axi_wr_1_BID => m_axi_wr_1_BID,
        m_axi_wr_1_BUSER => m_axi_wr_1_BUSER,
        golden_fifo_1_TREADY => golden_fifo_1_TREADY,
        gmem => wr_14,
        egress_1_TDATA => egress_1_TDATA,
        egress_1_TREADY => egress_1_U0_egress_1_TREADY,
        egress_1_TKEEP => egress_1_TKEEP,
        egress_1_TSTRB => egress_1_TSTRB,
        egress_1_TLAST => egress_1_TLAST,
        egress_1_TDEST => egress_1_TDEST,
        last => last,
        target => target,
        golden_fifo_1_TDATA => egress_1_U0_golden_fifo_1_TDATA,
        golden_fifo_1_TVALID => egress_1_U0_golden_fifo_1_TVALID);





    ap_sync_reg_egress_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_egress_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_egress_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_egress_1_U0_ap_ready <= ap_sync_egress_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_egress_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_egress_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_egress_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_egress_U0_ap_ready <= ap_sync_egress_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ingress_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ingress_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ingress_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ingress_1_U0_ap_ready <= ap_sync_ingress_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ingress_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ingress_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ingress_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ingress_U0_ap_ready <= ap_sync_ingress_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (ingress_U0_ap_idle and ingress_1_U0_ap_idle and egress_U0_ap_idle and egress_1_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (ingress_U0_ap_done and ingress_1_U0_ap_done and egress_U0_ap_done and egress_1_U0_ap_done);
    ap_sync_egress_1_U0_ap_ready <= (egress_1_U0_ap_ready or ap_sync_reg_egress_1_U0_ap_ready);
    ap_sync_egress_U0_ap_ready <= (egress_U0_ap_ready or ap_sync_reg_egress_U0_ap_ready);
    ap_sync_ingress_1_U0_ap_ready <= (ingress_1_U0_ap_ready or ap_sync_reg_ingress_1_U0_ap_ready);
    ap_sync_ingress_U0_ap_ready <= (ingress_U0_ap_ready or ap_sync_reg_ingress_U0_ap_ready);
    ap_sync_ready <= (ap_sync_ingress_U0_ap_ready and ap_sync_ingress_1_U0_ap_ready and ap_sync_egress_U0_ap_ready and ap_sync_egress_1_U0_ap_ready);
    egress_0_TREADY <= egress_U0_egress_0_TREADY;
    egress_1_TREADY <= egress_1_U0_egress_1_TREADY;
    egress_1_U0_ap_continue <= ap_sync_continue;
    egress_1_U0_ap_start <= ((ap_sync_reg_egress_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    egress_U0_ap_continue <= ap_sync_continue;
    egress_U0_ap_start <= ((ap_sync_reg_egress_U0_ap_ready xor ap_const_logic_1) and ap_start);
    golden_fifo_0_TDATA <= egress_U0_golden_fifo_0_TDATA;
    golden_fifo_0_TVALID <= egress_U0_golden_fifo_0_TVALID;
    golden_fifo_1_TDATA <= egress_1_U0_golden_fifo_1_TDATA;
    golden_fifo_1_TVALID <= egress_1_U0_golden_fifo_1_TVALID;
    ingress_0_TDATA <= ingress_U0_ingress_0_TDATA;
    ingress_0_TDEST <= ingress_U0_ingress_0_TDEST;
    ingress_0_TKEEP <= ingress_U0_ingress_0_TKEEP;
    ingress_0_TLAST <= ingress_U0_ingress_0_TLAST;
    ingress_0_TSTRB <= ingress_U0_ingress_0_TSTRB;
    ingress_0_TVALID <= ingress_U0_ingress_0_TVALID;
    ingress_1_TDATA <= ingress_1_U0_ingress_1_TDATA;
    ingress_1_TDEST <= ingress_1_U0_ingress_1_TDEST;
    ingress_1_TKEEP <= ingress_1_U0_ingress_1_TKEEP;
    ingress_1_TLAST <= ingress_1_U0_ingress_1_TLAST;
    ingress_1_TSTRB <= ingress_1_U0_ingress_1_TSTRB;
    ingress_1_TVALID <= ingress_1_U0_ingress_1_TVALID;
    ingress_1_U0_ap_continue <= ap_sync_continue;
    ingress_1_U0_ap_start <= ((ap_sync_reg_ingress_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ingress_U0_ap_continue <= ap_sync_continue;
    ingress_U0_ap_start <= ((ap_sync_reg_ingress_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ingress_U0_first <= first(0);
    m_axi_rd_0_ARADDR <= ingress_U0_m_axi_rd_0_ARADDR;
    m_axi_rd_0_ARBURST <= ingress_U0_m_axi_rd_0_ARBURST;
    m_axi_rd_0_ARCACHE <= ingress_U0_m_axi_rd_0_ARCACHE;
    m_axi_rd_0_ARID <= ingress_U0_m_axi_rd_0_ARID;
    m_axi_rd_0_ARLEN <= ingress_U0_m_axi_rd_0_ARLEN;
    m_axi_rd_0_ARLOCK <= ingress_U0_m_axi_rd_0_ARLOCK;
    m_axi_rd_0_ARPROT <= ingress_U0_m_axi_rd_0_ARPROT;
    m_axi_rd_0_ARQOS <= ingress_U0_m_axi_rd_0_ARQOS;
    m_axi_rd_0_ARREGION <= ingress_U0_m_axi_rd_0_ARREGION;
    m_axi_rd_0_ARSIZE <= ingress_U0_m_axi_rd_0_ARSIZE;
    m_axi_rd_0_ARUSER <= ingress_U0_m_axi_rd_0_ARUSER;
    m_axi_rd_0_ARVALID <= ingress_U0_m_axi_rd_0_ARVALID;
    m_axi_rd_0_AWADDR <= ap_const_lv64_0;
    m_axi_rd_0_AWBURST <= ap_const_lv2_0;
    m_axi_rd_0_AWCACHE <= ap_const_lv4_0;
    m_axi_rd_0_AWID <= ap_const_lv1_0;
    m_axi_rd_0_AWLEN <= ap_const_lv32_0;
    m_axi_rd_0_AWLOCK <= ap_const_lv2_0;
    m_axi_rd_0_AWPROT <= ap_const_lv3_0;
    m_axi_rd_0_AWQOS <= ap_const_lv4_0;
    m_axi_rd_0_AWREGION <= ap_const_lv4_0;
    m_axi_rd_0_AWSIZE <= ap_const_lv3_0;
    m_axi_rd_0_AWUSER <= ap_const_lv1_0;
    m_axi_rd_0_AWVALID <= ap_const_logic_0;
    m_axi_rd_0_BREADY <= ap_const_logic_0;
    m_axi_rd_0_RREADY <= ingress_U0_m_axi_rd_0_RREADY;
    m_axi_rd_0_WDATA <= ap_const_lv256_lc_1;
    m_axi_rd_0_WID <= ap_const_lv1_0;
    m_axi_rd_0_WLAST <= ap_const_logic_0;
    m_axi_rd_0_WSTRB <= ap_const_lv32_0;
    m_axi_rd_0_WUSER <= ap_const_lv1_0;
    m_axi_rd_0_WVALID <= ap_const_logic_0;
    m_axi_rd_1_ARADDR <= ingress_1_U0_m_axi_rd_1_ARADDR;
    m_axi_rd_1_ARBURST <= ingress_1_U0_m_axi_rd_1_ARBURST;
    m_axi_rd_1_ARCACHE <= ingress_1_U0_m_axi_rd_1_ARCACHE;
    m_axi_rd_1_ARID <= ingress_1_U0_m_axi_rd_1_ARID;
    m_axi_rd_1_ARLEN <= ingress_1_U0_m_axi_rd_1_ARLEN;
    m_axi_rd_1_ARLOCK <= ingress_1_U0_m_axi_rd_1_ARLOCK;
    m_axi_rd_1_ARPROT <= ingress_1_U0_m_axi_rd_1_ARPROT;
    m_axi_rd_1_ARQOS <= ingress_1_U0_m_axi_rd_1_ARQOS;
    m_axi_rd_1_ARREGION <= ingress_1_U0_m_axi_rd_1_ARREGION;
    m_axi_rd_1_ARSIZE <= ingress_1_U0_m_axi_rd_1_ARSIZE;
    m_axi_rd_1_ARUSER <= ingress_1_U0_m_axi_rd_1_ARUSER;
    m_axi_rd_1_ARVALID <= ingress_1_U0_m_axi_rd_1_ARVALID;
    m_axi_rd_1_AWADDR <= ap_const_lv64_0;
    m_axi_rd_1_AWBURST <= ap_const_lv2_0;
    m_axi_rd_1_AWCACHE <= ap_const_lv4_0;
    m_axi_rd_1_AWID <= ap_const_lv1_0;
    m_axi_rd_1_AWLEN <= ap_const_lv32_0;
    m_axi_rd_1_AWLOCK <= ap_const_lv2_0;
    m_axi_rd_1_AWPROT <= ap_const_lv3_0;
    m_axi_rd_1_AWQOS <= ap_const_lv4_0;
    m_axi_rd_1_AWREGION <= ap_const_lv4_0;
    m_axi_rd_1_AWSIZE <= ap_const_lv3_0;
    m_axi_rd_1_AWUSER <= ap_const_lv1_0;
    m_axi_rd_1_AWVALID <= ap_const_logic_0;
    m_axi_rd_1_BREADY <= ap_const_logic_0;
    m_axi_rd_1_RREADY <= ingress_1_U0_m_axi_rd_1_RREADY;
    m_axi_rd_1_WDATA <= ap_const_lv256_lc_1;
    m_axi_rd_1_WID <= ap_const_lv1_0;
    m_axi_rd_1_WLAST <= ap_const_logic_0;
    m_axi_rd_1_WSTRB <= ap_const_lv32_0;
    m_axi_rd_1_WUSER <= ap_const_lv1_0;
    m_axi_rd_1_WVALID <= ap_const_logic_0;
    m_axi_wr_0_ARADDR <= ap_const_lv64_0;
    m_axi_wr_0_ARBURST <= ap_const_lv2_0;
    m_axi_wr_0_ARCACHE <= ap_const_lv4_0;
    m_axi_wr_0_ARID <= ap_const_lv1_0;
    m_axi_wr_0_ARLEN <= ap_const_lv32_0;
    m_axi_wr_0_ARLOCK <= ap_const_lv2_0;
    m_axi_wr_0_ARPROT <= ap_const_lv3_0;
    m_axi_wr_0_ARQOS <= ap_const_lv4_0;
    m_axi_wr_0_ARREGION <= ap_const_lv4_0;
    m_axi_wr_0_ARSIZE <= ap_const_lv3_0;
    m_axi_wr_0_ARUSER <= ap_const_lv1_0;
    m_axi_wr_0_ARVALID <= ap_const_logic_0;
    m_axi_wr_0_AWADDR <= egress_U0_m_axi_wr_0_AWADDR;
    m_axi_wr_0_AWBURST <= egress_U0_m_axi_wr_0_AWBURST;
    m_axi_wr_0_AWCACHE <= egress_U0_m_axi_wr_0_AWCACHE;
    m_axi_wr_0_AWID <= egress_U0_m_axi_wr_0_AWID;
    m_axi_wr_0_AWLEN <= egress_U0_m_axi_wr_0_AWLEN;
    m_axi_wr_0_AWLOCK <= egress_U0_m_axi_wr_0_AWLOCK;
    m_axi_wr_0_AWPROT <= egress_U0_m_axi_wr_0_AWPROT;
    m_axi_wr_0_AWQOS <= egress_U0_m_axi_wr_0_AWQOS;
    m_axi_wr_0_AWREGION <= egress_U0_m_axi_wr_0_AWREGION;
    m_axi_wr_0_AWSIZE <= egress_U0_m_axi_wr_0_AWSIZE;
    m_axi_wr_0_AWUSER <= egress_U0_m_axi_wr_0_AWUSER;
    m_axi_wr_0_AWVALID <= egress_U0_m_axi_wr_0_AWVALID;
    m_axi_wr_0_BREADY <= egress_U0_m_axi_wr_0_BREADY;
    m_axi_wr_0_RREADY <= ap_const_logic_0;
    m_axi_wr_0_WDATA <= egress_U0_m_axi_wr_0_WDATA;
    m_axi_wr_0_WID <= egress_U0_m_axi_wr_0_WID;
    m_axi_wr_0_WLAST <= egress_U0_m_axi_wr_0_WLAST;
    m_axi_wr_0_WSTRB <= egress_U0_m_axi_wr_0_WSTRB;
    m_axi_wr_0_WUSER <= egress_U0_m_axi_wr_0_WUSER;
    m_axi_wr_0_WVALID <= egress_U0_m_axi_wr_0_WVALID;
    m_axi_wr_1_ARADDR <= ap_const_lv64_0;
    m_axi_wr_1_ARBURST <= ap_const_lv2_0;
    m_axi_wr_1_ARCACHE <= ap_const_lv4_0;
    m_axi_wr_1_ARID <= ap_const_lv1_0;
    m_axi_wr_1_ARLEN <= ap_const_lv32_0;
    m_axi_wr_1_ARLOCK <= ap_const_lv2_0;
    m_axi_wr_1_ARPROT <= ap_const_lv3_0;
    m_axi_wr_1_ARQOS <= ap_const_lv4_0;
    m_axi_wr_1_ARREGION <= ap_const_lv4_0;
    m_axi_wr_1_ARSIZE <= ap_const_lv3_0;
    m_axi_wr_1_ARUSER <= ap_const_lv1_0;
    m_axi_wr_1_ARVALID <= ap_const_logic_0;
    m_axi_wr_1_AWADDR <= egress_1_U0_m_axi_wr_1_AWADDR;
    m_axi_wr_1_AWBURST <= egress_1_U0_m_axi_wr_1_AWBURST;
    m_axi_wr_1_AWCACHE <= egress_1_U0_m_axi_wr_1_AWCACHE;
    m_axi_wr_1_AWID <= egress_1_U0_m_axi_wr_1_AWID;
    m_axi_wr_1_AWLEN <= egress_1_U0_m_axi_wr_1_AWLEN;
    m_axi_wr_1_AWLOCK <= egress_1_U0_m_axi_wr_1_AWLOCK;
    m_axi_wr_1_AWPROT <= egress_1_U0_m_axi_wr_1_AWPROT;
    m_axi_wr_1_AWQOS <= egress_1_U0_m_axi_wr_1_AWQOS;
    m_axi_wr_1_AWREGION <= egress_1_U0_m_axi_wr_1_AWREGION;
    m_axi_wr_1_AWSIZE <= egress_1_U0_m_axi_wr_1_AWSIZE;
    m_axi_wr_1_AWUSER <= egress_1_U0_m_axi_wr_1_AWUSER;
    m_axi_wr_1_AWVALID <= egress_1_U0_m_axi_wr_1_AWVALID;
    m_axi_wr_1_BREADY <= egress_1_U0_m_axi_wr_1_BREADY;
    m_axi_wr_1_RREADY <= ap_const_logic_0;
    m_axi_wr_1_WDATA <= egress_1_U0_m_axi_wr_1_WDATA;
    m_axi_wr_1_WID <= egress_1_U0_m_axi_wr_1_WID;
    m_axi_wr_1_WLAST <= egress_1_U0_m_axi_wr_1_WLAST;
    m_axi_wr_1_WSTRB <= egress_1_U0_m_axi_wr_1_WSTRB;
    m_axi_wr_1_WUSER <= egress_1_U0_m_axi_wr_1_WUSER;
    m_axi_wr_1_WVALID <= egress_1_U0_m_axi_wr_1_WVALID;
end behav;
