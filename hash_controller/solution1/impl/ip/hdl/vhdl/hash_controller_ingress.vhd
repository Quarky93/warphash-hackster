-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hash_controller_ingress is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_rd_0_AWVALID : OUT STD_LOGIC;
    m_axi_rd_0_AWREADY : IN STD_LOGIC;
    m_axi_rd_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_WVALID : OUT STD_LOGIC;
    m_axi_rd_0_WREADY : IN STD_LOGIC;
    m_axi_rd_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_rd_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_0_WLAST : OUT STD_LOGIC;
    m_axi_rd_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_ARVALID : OUT STD_LOGIC;
    m_axi_rd_0_ARREADY : IN STD_LOGIC;
    m_axi_rd_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_rd_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rd_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_RVALID : IN STD_LOGIC;
    m_axi_rd_0_RREADY : OUT STD_LOGIC;
    m_axi_rd_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_rd_0_RLAST : IN STD_LOGIC;
    m_axi_rd_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_rd_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_BVALID : IN STD_LOGIC;
    m_axi_rd_0_BREADY : OUT STD_LOGIC;
    m_axi_rd_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rd_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ingress_0_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    ingress_0_TVALID : OUT STD_LOGIC;
    ingress_0_TREADY : IN STD_LOGIC;
    ingress_0_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_0_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    gmem : IN STD_LOGIC_VECTOR (63 downto 0);
    first : IN STD_LOGIC;
    block_header : IN STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of hash_controller_ingress is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv26_2000000 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal icmp_ln13_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_read_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op38_readreq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal icmp_ln13_reg_281_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_read_reg_277_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op46_read_state10 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ingress_0_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal rd_0_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal rd_0_blk_n_R : STD_LOGIC;
    signal icmp_ln13_reg_281_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_read_reg_277_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal block_header_read_reg_271 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op45_read_state9 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal block_header_read_reg_271_pp0_iter1_reg : STD_LOGIC_VECTOR (511 downto 0);
    signal block_header_read_reg_271_pp0_iter2_reg : STD_LOGIC_VECTOR (511 downto 0);
    signal block_header_read_reg_271_pp0_iter3_reg : STD_LOGIC_VECTOR (511 downto 0);
    signal block_header_read_reg_271_pp0_iter4_reg : STD_LOGIC_VECTOR (511 downto 0);
    signal first_read_read_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_read_reg_277_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_read_reg_277_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_281_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_281_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln16_fu_181_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln16_reg_285 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln16_reg_285_pp0_iter1_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln16_reg_285_pp0_iter2_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln16_reg_285_pp0_iter3_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln16_reg_285_pp0_iter4_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln232_1_reg_290 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal rd_0_addr_read_reg_301 : STD_LOGIC_VECTOR (255 downto 0);
    signal rd_0_addr_read_1_reg_306 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_4_fu_249_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_tmp_data_V_phi_fu_154_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_257_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter5_tmp_data_V_reg_151 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_data_V_reg_151 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_data_V_reg_151 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_data_V_reg_151 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_data_V_reg_151 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_data_V_reg_151 : STD_LOGIC_VECTOR (511 downto 0);
    signal sext_ln232_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_94 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln13_fu_175_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_185_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln16_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln16_fu_197_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln232_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_32_fu_228_p4 : STD_LOGIC_VECTOR (479 downto 0);
    signal add_ln232_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_254 : BOOLEAN;
    signal ap_condition_305 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hash_controller_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component hash_controller_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter5_tmp_data_V_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_254)) then
                if (((first_read_reg_277_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln13_reg_281_pp0_iter4_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_tmp_data_V_reg_151 <= p_Result_4_fu_249_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter4_tmp_data_V_reg_151;
                end if;
            end if; 
        end if;
    end process;

    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_305)) then
                if ((icmp_ln13_fu_169_p2 = ap_const_lv1_0)) then 
                    i_fu_94 <= add_ln13_fu_175_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_94 <= ap_const_lv26_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_phi_reg_pp0_iter1_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_phi_reg_pp0_iter2_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter1_tmp_data_V_reg_151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_phi_reg_pp0_iter3_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter2_tmp_data_V_reg_151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_phi_reg_pp0_iter4_tmp_data_V_reg_151 <= ap_phi_reg_pp0_iter3_tmp_data_V_reg_151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                block_header_read_reg_271 <= block_header;
                block_header_read_reg_271_pp0_iter1_reg <= block_header_read_reg_271;
                block_header_read_reg_271_pp0_iter2_reg <= block_header_read_reg_271_pp0_iter1_reg;
                block_header_read_reg_271_pp0_iter3_reg <= block_header_read_reg_271_pp0_iter2_reg;
                block_header_read_reg_271_pp0_iter4_reg <= block_header_read_reg_271_pp0_iter3_reg;
                first_read_reg_277 <= (0=>first, others=>'-');
                first_read_reg_277_pp0_iter1_reg <= first_read_reg_277;
                first_read_reg_277_pp0_iter2_reg <= first_read_reg_277_pp0_iter1_reg;
                first_read_reg_277_pp0_iter3_reg <= first_read_reg_277_pp0_iter2_reg;
                first_read_reg_277_pp0_iter4_reg <= first_read_reg_277_pp0_iter3_reg;
                icmp_ln13_reg_281 <= icmp_ln13_fu_169_p2;
                icmp_ln13_reg_281_pp0_iter1_reg <= icmp_ln13_reg_281;
                icmp_ln13_reg_281_pp0_iter2_reg <= icmp_ln13_reg_281_pp0_iter1_reg;
                icmp_ln13_reg_281_pp0_iter3_reg <= icmp_ln13_reg_281_pp0_iter2_reg;
                icmp_ln13_reg_281_pp0_iter4_reg <= icmp_ln13_reg_281_pp0_iter3_reg;
                trunc_ln16_reg_285_pp0_iter1_reg <= trunc_ln16_reg_285;
                trunc_ln16_reg_285_pp0_iter2_reg <= trunc_ln16_reg_285_pp0_iter1_reg;
                trunc_ln16_reg_285_pp0_iter3_reg <= trunc_ln16_reg_285_pp0_iter2_reg;
                trunc_ln16_reg_285_pp0_iter4_reg <= trunc_ln16_reg_285_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op46_read_state10 = ap_const_boolean_1))) then
                rd_0_addr_read_1_reg_306 <= m_axi_rd_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op45_read_state9 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                rd_0_addr_read_reg_301 <= m_axi_rd_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln16_reg_285 <= trunc_ln16_fu_181_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_169_p2 = ap_const_lv1_0) and (first_read_read_fu_104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln232_1_reg_290 <= add_ln16_fu_197_p2(63 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter4_stage0, ap_idle_pp0_0to3, ap_idle_pp0_1to5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln13_fu_175_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv26_1));
    add_ln16_fu_197_p2 <= std_logic_vector(unsigned(zext_ln16_fu_193_p1) + unsigned(gmem));
    add_ln232_fu_243_p2 <= std_logic_vector(unsigned(trunc_ln674_fu_237_p1) + unsigned(zext_ln232_fu_240_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, m_axi_rd_0_RVALID, ap_done_reg, ingress_0_TREADY, ap_predicate_op45_read_state9)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ingress_0_TREADY = ap_const_logic_0)) or ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op45_read_state9 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, m_axi_rd_0_RVALID, ap_done_reg, ingress_0_TREADY, ap_predicate_op45_read_state9)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ingress_0_TREADY = ap_const_logic_0)) or ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op45_read_state9 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, m_axi_rd_0_RVALID, ap_done_reg, ingress_0_TREADY, ap_predicate_op45_read_state9)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ingress_0_TREADY = ap_const_logic_0)) or ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op45_read_state9 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, m_axi_rd_0_RVALID, ap_block_state2_io, ap_predicate_op46_read_state10, ap_done_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_done_reg = ap_const_logic_1) or ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op46_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, m_axi_rd_0_RVALID, ap_block_state2_io, ap_predicate_op46_read_state10, ap_done_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_done_reg = ap_const_logic_1) or ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_op46_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state10_pp0_stage1_iter4_assign_proc : process(m_axi_rd_0_RVALID, ap_predicate_op46_read_state10)
    begin
                ap_block_state10_pp0_stage1_iter4 <= ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_predicate_op46_read_state10 = ap_const_boolean_1));
    end process;


    ap_block_state11_pp0_stage0_iter5_assign_proc : process(ingress_0_TREADY)
    begin
                ap_block_state11_pp0_stage0_iter5 <= (ingress_0_TREADY = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_io_assign_proc : process(m_axi_rd_0_ARREADY, ap_predicate_op38_readreq_state2)
    begin
                ap_block_state2_io <= ((m_axi_rd_0_ARREADY = ap_const_logic_0) and (ap_predicate_op38_readreq_state2 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter4_assign_proc : process(m_axi_rd_0_RVALID, ap_predicate_op45_read_state9)
    begin
                ap_block_state9_pp0_stage0_iter4 <= ((m_axi_rd_0_RVALID = ap_const_logic_0) and (ap_predicate_op45_read_state9 = ap_const_boolean_1));
    end process;


    ap_condition_254_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_254 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_305_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_305 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln13_reg_281, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln13_reg_281 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln13_reg_281_pp0_iter3_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln13_reg_281_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_tmp_data_V_phi_fu_154_p4_assign_proc : process(icmp_ln13_reg_281_pp0_iter4_reg, first_read_reg_277_pp0_iter4_reg, p_Result_s_fu_257_p3, ap_phi_reg_pp0_iter5_tmp_data_V_reg_151)
    begin
        if (((first_read_reg_277_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln13_reg_281_pp0_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_data_V_phi_fu_154_p4 <= p_Result_s_fu_257_p3;
        else 
            ap_phi_mux_tmp_data_V_phi_fu_154_p4 <= ap_phi_reg_pp0_iter5_tmp_data_V_reg_151;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_data_V_reg_151 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op38_readreq_state2_assign_proc : process(icmp_ln13_reg_281, first_read_reg_277)
    begin
                ap_predicate_op38_readreq_state2 <= ((first_read_reg_277 = ap_const_lv1_0) and (icmp_ln13_reg_281 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_read_state9_assign_proc : process(icmp_ln13_reg_281_pp0_iter3_reg, first_read_reg_277_pp0_iter3_reg)
    begin
                ap_predicate_op45_read_state9 <= ((first_read_reg_277_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln13_reg_281_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op46_read_state10_assign_proc : process(icmp_ln13_reg_281_pp0_iter4_reg, first_read_reg_277_pp0_iter4_reg)
    begin
                ap_predicate_op46_read_state10 <= ((first_read_reg_277_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln13_reg_281_pp0_iter4_reg = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, i_fu_94, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv26_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_94;
        end if; 
    end process;

    first_read_read_fu_104_p2 <= (0=>first, others=>'-');
    icmp_ln13_fu_169_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv26_2000000) else "0";
    ingress_0_TDATA <= ap_phi_mux_tmp_data_V_phi_fu_154_p4;

    ingress_0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ingress_0_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ingress_0_TDATA_blk_n <= ingress_0_TREADY;
        else 
            ingress_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ingress_0_TDEST <= ap_const_lv1_0;
    ingress_0_TKEEP <= ap_const_lv64_0;
    ingress_0_TLAST <= ap_const_lv1_0;
    ingress_0_TSTRB <= ap_const_lv64_0;

    ingress_0_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ingress_0_TVALID <= ap_const_logic_1;
        else 
            ingress_0_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rd_0_ARADDR <= sext_ln232_fu_218_p1;
    m_axi_rd_0_ARBURST <= ap_const_lv2_0;
    m_axi_rd_0_ARCACHE <= ap_const_lv4_0;
    m_axi_rd_0_ARID <= ap_const_lv1_0;
    m_axi_rd_0_ARLEN <= ap_const_lv32_2;
    m_axi_rd_0_ARLOCK <= ap_const_lv2_0;
    m_axi_rd_0_ARPROT <= ap_const_lv3_0;
    m_axi_rd_0_ARQOS <= ap_const_lv4_0;
    m_axi_rd_0_ARREGION <= ap_const_lv4_0;
    m_axi_rd_0_ARSIZE <= ap_const_lv3_0;
    m_axi_rd_0_ARUSER <= ap_const_lv1_0;

    m_axi_rd_0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op38_readreq_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op38_readreq_state2 = ap_const_boolean_1))) then 
            m_axi_rd_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_rd_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rd_0_AWADDR <= ap_const_lv64_0;
    m_axi_rd_0_AWBURST <= ap_const_lv2_0;
    m_axi_rd_0_AWCACHE <= ap_const_lv4_0;
    m_axi_rd_0_AWID <= ap_const_lv1_0;
    m_axi_rd_0_AWLEN <= ap_const_lv32_0;
    m_axi_rd_0_AWLOCK <= ap_const_lv2_0;
    m_axi_rd_0_AWPROT <= ap_const_lv3_0;
    m_axi_rd_0_AWQOS <= ap_const_lv4_0;
    m_axi_rd_0_AWREGION <= ap_const_lv4_0;
    m_axi_rd_0_AWSIZE <= ap_const_lv3_0;
    m_axi_rd_0_AWUSER <= ap_const_lv1_0;
    m_axi_rd_0_AWVALID <= ap_const_logic_0;
    m_axi_rd_0_BREADY <= ap_const_logic_0;

    m_axi_rd_0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_predicate_op46_read_state10, ap_predicate_op45_read_state9, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op46_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op45_read_state9 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_rd_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_rd_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rd_0_WDATA <= ap_const_lv256_lc_1;
    m_axi_rd_0_WID <= ap_const_lv1_0;
    m_axi_rd_0_WLAST <= ap_const_logic_0;
    m_axi_rd_0_WSTRB <= ap_const_lv32_0;
    m_axi_rd_0_WUSER <= ap_const_lv1_0;
    m_axi_rd_0_WVALID <= ap_const_logic_0;
    p_Result_4_fu_249_p3 <= (p_Result_s_32_fu_228_p4 & add_ln232_fu_243_p2);
    p_Result_s_32_fu_228_p4 <= block_header_read_reg_271_pp0_iter4_reg(511 downto 32);
    p_Result_s_fu_257_p3 <= (rd_0_addr_read_1_reg_306 & rd_0_addr_read_reg_301);

    rd_0_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, m_axi_rd_0_ARREADY, ap_predicate_op38_readreq_state2, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op38_readreq_state2 = ap_const_boolean_1))) then 
            rd_0_blk_n_AR <= m_axi_rd_0_ARREADY;
        else 
            rd_0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    rd_0_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, m_axi_rd_0_RVALID, ap_predicate_op46_read_state10, ap_block_pp0_stage0, ap_block_pp0_stage1, icmp_ln13_reg_281_pp0_iter3_reg, first_read_reg_277_pp0_iter3_reg)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op46_read_state10 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (first_read_reg_277_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln13_reg_281_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            rd_0_blk_n_R <= m_axi_rd_0_RVALID;
        else 
            rd_0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

        sext_ln232_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln232_1_reg_290),64));

    shl_ln_fu_185_p3 <= (trunc_ln16_fu_181_p1 & ap_const_lv6_0);
    trunc_ln16_fu_181_p1 <= ap_sig_allocacmp_i_2(25 - 1 downto 0);
    trunc_ln674_fu_237_p1 <= block_header_read_reg_271_pp0_iter4_reg(32 - 1 downto 0);
    zext_ln16_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_185_p3),64));
    zext_ln232_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln16_reg_285_pp0_iter4_reg),32));
end behav;
