-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hash_controller is
generic (
    C_M_AXI_RD_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_RD_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RD_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_0_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_RD_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_RD_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RD_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_1_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_RD_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RD_1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_WR_0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WR_0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_0_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_WR_0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_WR_1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WR_1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_1_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_WR_1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WR_1_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RD_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_RD_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RD_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_RD_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_RD_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RD_1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WR_0_USER_VALUE : INTEGER := 0;
    C_M_AXI_WR_0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WR_0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WR_1_USER_VALUE : INTEGER := 0;
    C_M_AXI_WR_1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WR_1_CACHE_VALUE : INTEGER := 3 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_rd_0_AWVALID : OUT STD_LOGIC;
    m_axi_rd_0_AWREADY : IN STD_LOGIC;
    m_axi_rd_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_ADDR_WIDTH-1 downto 0);
    m_axi_rd_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_ID_WIDTH-1 downto 0);
    m_axi_rd_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_rd_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_AWUSER_WIDTH-1 downto 0);
    m_axi_rd_0_WVALID : OUT STD_LOGIC;
    m_axi_rd_0_WREADY : IN STD_LOGIC;
    m_axi_rd_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_DATA_WIDTH-1 downto 0);
    m_axi_rd_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_DATA_WIDTH/8-1 downto 0);
    m_axi_rd_0_WLAST : OUT STD_LOGIC;
    m_axi_rd_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_ID_WIDTH-1 downto 0);
    m_axi_rd_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_WUSER_WIDTH-1 downto 0);
    m_axi_rd_0_ARVALID : OUT STD_LOGIC;
    m_axi_rd_0_ARREADY : IN STD_LOGIC;
    m_axi_rd_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_ADDR_WIDTH-1 downto 0);
    m_axi_rd_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_ID_WIDTH-1 downto 0);
    m_axi_rd_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_rd_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_0_ARUSER_WIDTH-1 downto 0);
    m_axi_rd_0_RVALID : IN STD_LOGIC;
    m_axi_rd_0_RREADY : OUT STD_LOGIC;
    m_axi_rd_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RD_0_DATA_WIDTH-1 downto 0);
    m_axi_rd_0_RLAST : IN STD_LOGIC;
    m_axi_rd_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RD_0_ID_WIDTH-1 downto 0);
    m_axi_rd_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RD_0_RUSER_WIDTH-1 downto 0);
    m_axi_rd_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_BVALID : IN STD_LOGIC;
    m_axi_rd_0_BREADY : OUT STD_LOGIC;
    m_axi_rd_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RD_0_ID_WIDTH-1 downto 0);
    m_axi_rd_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RD_0_BUSER_WIDTH-1 downto 0);
    m_axi_rd_1_AWVALID : OUT STD_LOGIC;
    m_axi_rd_1_AWREADY : IN STD_LOGIC;
    m_axi_rd_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_ADDR_WIDTH-1 downto 0);
    m_axi_rd_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_ID_WIDTH-1 downto 0);
    m_axi_rd_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_rd_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_AWUSER_WIDTH-1 downto 0);
    m_axi_rd_1_WVALID : OUT STD_LOGIC;
    m_axi_rd_1_WREADY : IN STD_LOGIC;
    m_axi_rd_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_DATA_WIDTH-1 downto 0);
    m_axi_rd_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_DATA_WIDTH/8-1 downto 0);
    m_axi_rd_1_WLAST : OUT STD_LOGIC;
    m_axi_rd_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_ID_WIDTH-1 downto 0);
    m_axi_rd_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_WUSER_WIDTH-1 downto 0);
    m_axi_rd_1_ARVALID : OUT STD_LOGIC;
    m_axi_rd_1_ARREADY : IN STD_LOGIC;
    m_axi_rd_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_ADDR_WIDTH-1 downto 0);
    m_axi_rd_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_ID_WIDTH-1 downto 0);
    m_axi_rd_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_rd_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rd_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rd_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RD_1_ARUSER_WIDTH-1 downto 0);
    m_axi_rd_1_RVALID : IN STD_LOGIC;
    m_axi_rd_1_RREADY : OUT STD_LOGIC;
    m_axi_rd_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RD_1_DATA_WIDTH-1 downto 0);
    m_axi_rd_1_RLAST : IN STD_LOGIC;
    m_axi_rd_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RD_1_ID_WIDTH-1 downto 0);
    m_axi_rd_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RD_1_RUSER_WIDTH-1 downto 0);
    m_axi_rd_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_BVALID : IN STD_LOGIC;
    m_axi_rd_1_BREADY : OUT STD_LOGIC;
    m_axi_rd_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rd_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RD_1_ID_WIDTH-1 downto 0);
    m_axi_rd_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RD_1_BUSER_WIDTH-1 downto 0);
    m_axi_wr_0_AWVALID : OUT STD_LOGIC;
    m_axi_wr_0_AWREADY : IN STD_LOGIC;
    m_axi_wr_0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_ADDR_WIDTH-1 downto 0);
    m_axi_wr_0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_ID_WIDTH-1 downto 0);
    m_axi_wr_0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_wr_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_AWUSER_WIDTH-1 downto 0);
    m_axi_wr_0_WVALID : OUT STD_LOGIC;
    m_axi_wr_0_WREADY : IN STD_LOGIC;
    m_axi_wr_0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_DATA_WIDTH-1 downto 0);
    m_axi_wr_0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_DATA_WIDTH/8-1 downto 0);
    m_axi_wr_0_WLAST : OUT STD_LOGIC;
    m_axi_wr_0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_ID_WIDTH-1 downto 0);
    m_axi_wr_0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_WUSER_WIDTH-1 downto 0);
    m_axi_wr_0_ARVALID : OUT STD_LOGIC;
    m_axi_wr_0_ARREADY : IN STD_LOGIC;
    m_axi_wr_0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_ADDR_WIDTH-1 downto 0);
    m_axi_wr_0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_ID_WIDTH-1 downto 0);
    m_axi_wr_0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_wr_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_0_ARUSER_WIDTH-1 downto 0);
    m_axi_wr_0_RVALID : IN STD_LOGIC;
    m_axi_wr_0_RREADY : OUT STD_LOGIC;
    m_axi_wr_0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WR_0_DATA_WIDTH-1 downto 0);
    m_axi_wr_0_RLAST : IN STD_LOGIC;
    m_axi_wr_0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WR_0_ID_WIDTH-1 downto 0);
    m_axi_wr_0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WR_0_RUSER_WIDTH-1 downto 0);
    m_axi_wr_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_BVALID : IN STD_LOGIC;
    m_axi_wr_0_BREADY : OUT STD_LOGIC;
    m_axi_wr_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WR_0_ID_WIDTH-1 downto 0);
    m_axi_wr_0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WR_0_BUSER_WIDTH-1 downto 0);
    m_axi_wr_1_AWVALID : OUT STD_LOGIC;
    m_axi_wr_1_AWREADY : IN STD_LOGIC;
    m_axi_wr_1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_ADDR_WIDTH-1 downto 0);
    m_axi_wr_1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_ID_WIDTH-1 downto 0);
    m_axi_wr_1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_wr_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_AWUSER_WIDTH-1 downto 0);
    m_axi_wr_1_WVALID : OUT STD_LOGIC;
    m_axi_wr_1_WREADY : IN STD_LOGIC;
    m_axi_wr_1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_DATA_WIDTH-1 downto 0);
    m_axi_wr_1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_DATA_WIDTH/8-1 downto 0);
    m_axi_wr_1_WLAST : OUT STD_LOGIC;
    m_axi_wr_1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_ID_WIDTH-1 downto 0);
    m_axi_wr_1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_WUSER_WIDTH-1 downto 0);
    m_axi_wr_1_ARVALID : OUT STD_LOGIC;
    m_axi_wr_1_ARREADY : IN STD_LOGIC;
    m_axi_wr_1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_ADDR_WIDTH-1 downto 0);
    m_axi_wr_1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_ID_WIDTH-1 downto 0);
    m_axi_wr_1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_wr_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WR_1_ARUSER_WIDTH-1 downto 0);
    m_axi_wr_1_RVALID : IN STD_LOGIC;
    m_axi_wr_1_RREADY : OUT STD_LOGIC;
    m_axi_wr_1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WR_1_DATA_WIDTH-1 downto 0);
    m_axi_wr_1_RLAST : IN STD_LOGIC;
    m_axi_wr_1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WR_1_ID_WIDTH-1 downto 0);
    m_axi_wr_1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WR_1_RUSER_WIDTH-1 downto 0);
    m_axi_wr_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_BVALID : IN STD_LOGIC;
    m_axi_wr_1_BREADY : OUT STD_LOGIC;
    m_axi_wr_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WR_1_ID_WIDTH-1 downto 0);
    m_axi_wr_1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WR_1_BUSER_WIDTH-1 downto 0);
    ingress_0_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    ingress_0_TVALID : OUT STD_LOGIC;
    ingress_0_TREADY : IN STD_LOGIC;
    ingress_0_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_0_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_1_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    ingress_1_TVALID : OUT STD_LOGIC;
    ingress_1_TREADY : IN STD_LOGIC;
    ingress_1_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_1_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    ingress_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ingress_1_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    egress_0_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    egress_0_TVALID : IN STD_LOGIC;
    egress_0_TREADY : OUT STD_LOGIC;
    egress_0_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_1_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    egress_1_TVALID : IN STD_LOGIC;
    egress_1_TREADY : OUT STD_LOGIC;
    egress_1_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_1_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    golden_fifo_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    golden_fifo_0_TVALID : OUT STD_LOGIC;
    golden_fifo_0_TREADY : IN STD_LOGIC;
    golden_fifo_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    golden_fifo_1_TVALID : OUT STD_LOGIC;
    golden_fifo_1_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of hash_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hash_controller_hash_controller,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2892-2L-e,HLS_INPUT_CLOCK=2.220000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.620600,HLS_SYN_LAT=67108877,HLS_SYN_TPT=none,HLS_SYN_MEM=64,HLS_SYN_DSP=0,HLS_SYN_FF=17440,HLS_SYN_LUT=9168,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal rd_0_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal rd_1_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal wr_0_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal wr_1_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal first : STD_LOGIC;
    signal last : STD_LOGIC;
    signal block_header : STD_LOGIC_VECTOR (511 downto 0);
    signal target : STD_LOGIC_VECTOR (511 downto 0);
    signal target_read_reg_244 : STD_LOGIC_VECTOR (511 downto 0);
    signal block_header_read_reg_249 : STD_LOGIC_VECTOR (511 downto 0);
    signal last_read_reg_254 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_read_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_1_offset_read_reg_264 : STD_LOGIC_VECTOR (63 downto 0);
    signal wr_0_offset_read_reg_269 : STD_LOGIC_VECTOR (63 downto 0);
    signal rd_1_offset_read_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal rd_0_offset_read_reg_279 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_WVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_WLAST : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_0_RREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_0_BREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_1_AWVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_WVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_WLAST : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_rd_1_RREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_rd_1_BREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_0_AWVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_WVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_WLAST : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_0_RREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_0_BREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_1_AWVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_WVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_WLAST : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARVALID : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_m_axi_wr_1_RREADY : STD_LOGIC;
    signal grp_pass_fu_180_m_axi_wr_1_BREADY : STD_LOGIC;
    signal grp_pass_fu_180_ingress_0_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_pass_fu_180_ingress_0_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_ingress_0_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_ingress_0_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_ingress_0_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_ingress_1_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_pass_fu_180_ingress_1_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_ingress_1_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pass_fu_180_ingress_1_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_ingress_1_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_golden_fifo_0_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_golden_fifo_1_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pass_fu_180_ingress_0_TVALID : STD_LOGIC;
    signal grp_pass_fu_180_ingress_0_TREADY : STD_LOGIC;
    signal grp_pass_fu_180_ap_start : STD_LOGIC;
    signal grp_pass_fu_180_ap_done : STD_LOGIC;
    signal grp_pass_fu_180_ingress_1_TVALID : STD_LOGIC;
    signal grp_pass_fu_180_ingress_1_TREADY : STD_LOGIC;
    signal grp_pass_fu_180_egress_0_TREADY : STD_LOGIC;
    signal grp_pass_fu_180_golden_fifo_0_TVALID : STD_LOGIC;
    signal grp_pass_fu_180_golden_fifo_0_TREADY : STD_LOGIC;
    signal grp_pass_fu_180_egress_1_TREADY : STD_LOGIC;
    signal grp_pass_fu_180_golden_fifo_1_TVALID : STD_LOGIC;
    signal grp_pass_fu_180_golden_fifo_1_TREADY : STD_LOGIC;
    signal grp_pass_fu_180_ap_ready : STD_LOGIC;
    signal grp_pass_fu_180_ap_idle : STD_LOGIC;
    signal grp_pass_fu_180_ap_continue : STD_LOGIC;
    signal rd_0_AWREADY : STD_LOGIC;
    signal rd_0_WREADY : STD_LOGIC;
    signal rd_0_ARVALID : STD_LOGIC;
    signal rd_0_ARREADY : STD_LOGIC;
    signal rd_0_RVALID : STD_LOGIC;
    signal rd_0_RREADY : STD_LOGIC;
    signal rd_0_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal rd_0_RLAST : STD_LOGIC;
    signal rd_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal rd_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_0_BVALID : STD_LOGIC;
    signal rd_0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_1_AWREADY : STD_LOGIC;
    signal rd_1_WREADY : STD_LOGIC;
    signal rd_1_ARVALID : STD_LOGIC;
    signal rd_1_ARREADY : STD_LOGIC;
    signal rd_1_RVALID : STD_LOGIC;
    signal rd_1_RREADY : STD_LOGIC;
    signal rd_1_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal rd_1_RLAST : STD_LOGIC;
    signal rd_1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal rd_1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_1_BVALID : STD_LOGIC;
    signal rd_1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal rd_1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal rd_1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_0_AWVALID : STD_LOGIC;
    signal wr_0_AWREADY : STD_LOGIC;
    signal wr_0_WVALID : STD_LOGIC;
    signal wr_0_WREADY : STD_LOGIC;
    signal wr_0_ARREADY : STD_LOGIC;
    signal wr_0_RVALID : STD_LOGIC;
    signal wr_0_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal wr_0_RLAST : STD_LOGIC;
    signal wr_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal wr_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_0_BVALID : STD_LOGIC;
    signal wr_0_BREADY : STD_LOGIC;
    signal wr_0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_1_AWVALID : STD_LOGIC;
    signal wr_1_AWREADY : STD_LOGIC;
    signal wr_1_WVALID : STD_LOGIC;
    signal wr_1_WREADY : STD_LOGIC;
    signal wr_1_ARREADY : STD_LOGIC;
    signal wr_1_RVALID : STD_LOGIC;
    signal wr_1_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal wr_1_RLAST : STD_LOGIC;
    signal wr_1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal wr_1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_1_BVALID : STD_LOGIC;
    signal wr_1_BREADY : STD_LOGIC;
    signal wr_1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pass_fu_180_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_pass_fu_180_ap_ready : STD_LOGIC;
    signal ap_sync_grp_pass_fu_180_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_pass_fu_180_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_pass_fu_180_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_ingress_0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_golden_fifo_0_U_apdone_blk : STD_LOGIC;
    signal regslice_both_golden_fifo_1_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ingress_0_TVALID_int_regslice : STD_LOGIC;
    signal ingress_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_ingress_0_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_0_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_0_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_0_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_0_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_0_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_0_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_0_V_dest_V_U_vld_out : STD_LOGIC;
    signal ingress_1_TVALID_int_regslice : STD_LOGIC;
    signal ingress_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_ingress_1_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_1_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_1_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_1_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ingress_1_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ingress_1_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ingress_1_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_0_V_data_V_U_apdone_blk : STD_LOGIC;
    signal egress_0_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal egress_0_TVALID_int_regslice : STD_LOGIC;
    signal egress_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_egress_0_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_0_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal egress_0_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_egress_0_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_0_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_0_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal egress_0_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_egress_0_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_0_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_0_V_last_V_U_apdone_blk : STD_LOGIC;
    signal egress_0_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_egress_0_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_0_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_0_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal egress_0_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_egress_0_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_0_V_dest_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal egress_1_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal egress_1_TVALID_int_regslice : STD_LOGIC;
    signal egress_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_egress_1_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal egress_1_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_egress_1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_1_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal egress_1_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_egress_1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_1_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal egress_1_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_egress_1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_1_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_egress_1_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal egress_1_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_egress_1_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_egress_1_V_dest_V_U_ack_in : STD_LOGIC;
    signal golden_fifo_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_golden_fifo_0_U_vld_out : STD_LOGIC;
    signal golden_fifo_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_golden_fifo_1_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hash_controller_pass IS
    port (
        m_axi_rd_0_AWVALID : OUT STD_LOGIC;
        m_axi_rd_0_AWREADY : IN STD_LOGIC;
        m_axi_rd_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_WVALID : OUT STD_LOGIC;
        m_axi_rd_0_WREADY : IN STD_LOGIC;
        m_axi_rd_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_0_WLAST : OUT STD_LOGIC;
        m_axi_rd_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_ARVALID : OUT STD_LOGIC;
        m_axi_rd_0_ARREADY : IN STD_LOGIC;
        m_axi_rd_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_RVALID : IN STD_LOGIC;
        m_axi_rd_0_RREADY : OUT STD_LOGIC;
        m_axi_rd_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_0_RLAST : IN STD_LOGIC;
        m_axi_rd_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_rd_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_BVALID : IN STD_LOGIC;
        m_axi_rd_0_BREADY : OUT STD_LOGIC;
        m_axi_rd_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rd_01 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_1_AWVALID : OUT STD_LOGIC;
        m_axi_rd_1_AWREADY : IN STD_LOGIC;
        m_axi_rd_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_WVALID : OUT STD_LOGIC;
        m_axi_rd_1_WREADY : IN STD_LOGIC;
        m_axi_rd_1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_1_WLAST : OUT STD_LOGIC;
        m_axi_rd_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_ARVALID : OUT STD_LOGIC;
        m_axi_rd_1_ARREADY : IN STD_LOGIC;
        m_axi_rd_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_rd_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rd_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rd_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rd_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_RVALID : IN STD_LOGIC;
        m_axi_rd_1_RREADY : OUT STD_LOGIC;
        m_axi_rd_1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_rd_1_RLAST : IN STD_LOGIC;
        m_axi_rd_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_rd_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_BVALID : IN STD_LOGIC;
        m_axi_rd_1_BREADY : OUT STD_LOGIC;
        m_axi_rd_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rd_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rd_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rd_12 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_0_AWVALID : OUT STD_LOGIC;
        m_axi_wr_0_AWREADY : IN STD_LOGIC;
        m_axi_wr_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_WVALID : OUT STD_LOGIC;
        m_axi_wr_0_WREADY : IN STD_LOGIC;
        m_axi_wr_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_0_WLAST : OUT STD_LOGIC;
        m_axi_wr_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_ARVALID : OUT STD_LOGIC;
        m_axi_wr_0_ARREADY : IN STD_LOGIC;
        m_axi_wr_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_RVALID : IN STD_LOGIC;
        m_axi_wr_0_RREADY : OUT STD_LOGIC;
        m_axi_wr_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_0_RLAST : IN STD_LOGIC;
        m_axi_wr_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_wr_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_BVALID : IN STD_LOGIC;
        m_axi_wr_0_BREADY : OUT STD_LOGIC;
        m_axi_wr_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        wr_03 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_1_AWVALID : OUT STD_LOGIC;
        m_axi_wr_1_AWREADY : IN STD_LOGIC;
        m_axi_wr_1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_WVALID : OUT STD_LOGIC;
        m_axi_wr_1_WREADY : IN STD_LOGIC;
        m_axi_wr_1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_1_WLAST : OUT STD_LOGIC;
        m_axi_wr_1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_ARVALID : OUT STD_LOGIC;
        m_axi_wr_1_ARREADY : IN STD_LOGIC;
        m_axi_wr_1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_wr_1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_wr_1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_wr_1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_wr_1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_RVALID : IN STD_LOGIC;
        m_axi_wr_1_RREADY : OUT STD_LOGIC;
        m_axi_wr_1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_wr_1_RLAST : IN STD_LOGIC;
        m_axi_wr_1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_wr_1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_BVALID : IN STD_LOGIC;
        m_axi_wr_1_BREADY : OUT STD_LOGIC;
        m_axi_wr_1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_wr_1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_wr_1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        wr_14 : IN STD_LOGIC_VECTOR (63 downto 0);
        ingress_0_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        ingress_0_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_0_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_0_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ingress_0_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ingress_1_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        ingress_1_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_1_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ingress_1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ingress_1_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        egress_0_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        egress_0_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_0_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        egress_0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        egress_1_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        egress_1_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_1_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        egress_1_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        egress_1_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        golden_fifo_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        golden_fifo_1_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        first : IN STD_LOGIC_VECTOR (0 downto 0);
        last : IN STD_LOGIC_VECTOR (0 downto 0);
        block_header : IN STD_LOGIC_VECTOR (511 downto 0);
        target : IN STD_LOGIC_VECTOR (511 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ingress_0_TVALID : OUT STD_LOGIC;
        ingress_0_TREADY : IN STD_LOGIC;
        rd_01_ap_vld : IN STD_LOGIC;
        first_ap_vld : IN STD_LOGIC;
        block_header_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ingress_1_TVALID : OUT STD_LOGIC;
        ingress_1_TREADY : IN STD_LOGIC;
        rd_12_ap_vld : IN STD_LOGIC;
        wr_03_ap_vld : IN STD_LOGIC;
        egress_0_TVALID : IN STD_LOGIC;
        egress_0_TREADY : OUT STD_LOGIC;
        last_ap_vld : IN STD_LOGIC;
        target_ap_vld : IN STD_LOGIC;
        golden_fifo_0_TVALID : OUT STD_LOGIC;
        golden_fifo_0_TREADY : IN STD_LOGIC;
        wr_14_ap_vld : IN STD_LOGIC;
        egress_1_TVALID : IN STD_LOGIC;
        egress_1_TREADY : OUT STD_LOGIC;
        golden_fifo_1_TVALID : OUT STD_LOGIC;
        golden_fifo_1_TREADY : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component hash_controller_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rd_0_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        rd_1_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        wr_0_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        wr_1_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        first : OUT STD_LOGIC;
        last : OUT STD_LOGIC;
        block_header : OUT STD_LOGIC_VECTOR (511 downto 0);
        target : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hash_controller_rd_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hash_controller_rd_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hash_controller_wr_0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hash_controller_wr_1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hash_controller_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_pass_fu_180 : component hash_controller_pass
    port map (
        m_axi_rd_0_AWVALID => grp_pass_fu_180_m_axi_rd_0_AWVALID,
        m_axi_rd_0_AWREADY => ap_const_logic_0,
        m_axi_rd_0_AWADDR => grp_pass_fu_180_m_axi_rd_0_AWADDR,
        m_axi_rd_0_AWID => grp_pass_fu_180_m_axi_rd_0_AWID,
        m_axi_rd_0_AWLEN => grp_pass_fu_180_m_axi_rd_0_AWLEN,
        m_axi_rd_0_AWSIZE => grp_pass_fu_180_m_axi_rd_0_AWSIZE,
        m_axi_rd_0_AWBURST => grp_pass_fu_180_m_axi_rd_0_AWBURST,
        m_axi_rd_0_AWLOCK => grp_pass_fu_180_m_axi_rd_0_AWLOCK,
        m_axi_rd_0_AWCACHE => grp_pass_fu_180_m_axi_rd_0_AWCACHE,
        m_axi_rd_0_AWPROT => grp_pass_fu_180_m_axi_rd_0_AWPROT,
        m_axi_rd_0_AWQOS => grp_pass_fu_180_m_axi_rd_0_AWQOS,
        m_axi_rd_0_AWREGION => grp_pass_fu_180_m_axi_rd_0_AWREGION,
        m_axi_rd_0_AWUSER => grp_pass_fu_180_m_axi_rd_0_AWUSER,
        m_axi_rd_0_WVALID => grp_pass_fu_180_m_axi_rd_0_WVALID,
        m_axi_rd_0_WREADY => ap_const_logic_0,
        m_axi_rd_0_WDATA => grp_pass_fu_180_m_axi_rd_0_WDATA,
        m_axi_rd_0_WSTRB => grp_pass_fu_180_m_axi_rd_0_WSTRB,
        m_axi_rd_0_WLAST => grp_pass_fu_180_m_axi_rd_0_WLAST,
        m_axi_rd_0_WID => grp_pass_fu_180_m_axi_rd_0_WID,
        m_axi_rd_0_WUSER => grp_pass_fu_180_m_axi_rd_0_WUSER,
        m_axi_rd_0_ARVALID => grp_pass_fu_180_m_axi_rd_0_ARVALID,
        m_axi_rd_0_ARREADY => rd_0_ARREADY,
        m_axi_rd_0_ARADDR => grp_pass_fu_180_m_axi_rd_0_ARADDR,
        m_axi_rd_0_ARID => grp_pass_fu_180_m_axi_rd_0_ARID,
        m_axi_rd_0_ARLEN => grp_pass_fu_180_m_axi_rd_0_ARLEN,
        m_axi_rd_0_ARSIZE => grp_pass_fu_180_m_axi_rd_0_ARSIZE,
        m_axi_rd_0_ARBURST => grp_pass_fu_180_m_axi_rd_0_ARBURST,
        m_axi_rd_0_ARLOCK => grp_pass_fu_180_m_axi_rd_0_ARLOCK,
        m_axi_rd_0_ARCACHE => grp_pass_fu_180_m_axi_rd_0_ARCACHE,
        m_axi_rd_0_ARPROT => grp_pass_fu_180_m_axi_rd_0_ARPROT,
        m_axi_rd_0_ARQOS => grp_pass_fu_180_m_axi_rd_0_ARQOS,
        m_axi_rd_0_ARREGION => grp_pass_fu_180_m_axi_rd_0_ARREGION,
        m_axi_rd_0_ARUSER => grp_pass_fu_180_m_axi_rd_0_ARUSER,
        m_axi_rd_0_RVALID => rd_0_RVALID,
        m_axi_rd_0_RREADY => grp_pass_fu_180_m_axi_rd_0_RREADY,
        m_axi_rd_0_RDATA => rd_0_RDATA,
        m_axi_rd_0_RLAST => rd_0_RLAST,
        m_axi_rd_0_RID => rd_0_RID,
        m_axi_rd_0_RFIFONUM => rd_0_RFIFONUM,
        m_axi_rd_0_RUSER => rd_0_RUSER,
        m_axi_rd_0_RRESP => rd_0_RRESP,
        m_axi_rd_0_BVALID => ap_const_logic_0,
        m_axi_rd_0_BREADY => grp_pass_fu_180_m_axi_rd_0_BREADY,
        m_axi_rd_0_BRESP => ap_const_lv2_0,
        m_axi_rd_0_BID => ap_const_lv1_0,
        m_axi_rd_0_BUSER => ap_const_lv1_0,
        rd_01 => rd_0_offset_read_reg_279,
        m_axi_rd_1_AWVALID => grp_pass_fu_180_m_axi_rd_1_AWVALID,
        m_axi_rd_1_AWREADY => ap_const_logic_0,
        m_axi_rd_1_AWADDR => grp_pass_fu_180_m_axi_rd_1_AWADDR,
        m_axi_rd_1_AWID => grp_pass_fu_180_m_axi_rd_1_AWID,
        m_axi_rd_1_AWLEN => grp_pass_fu_180_m_axi_rd_1_AWLEN,
        m_axi_rd_1_AWSIZE => grp_pass_fu_180_m_axi_rd_1_AWSIZE,
        m_axi_rd_1_AWBURST => grp_pass_fu_180_m_axi_rd_1_AWBURST,
        m_axi_rd_1_AWLOCK => grp_pass_fu_180_m_axi_rd_1_AWLOCK,
        m_axi_rd_1_AWCACHE => grp_pass_fu_180_m_axi_rd_1_AWCACHE,
        m_axi_rd_1_AWPROT => grp_pass_fu_180_m_axi_rd_1_AWPROT,
        m_axi_rd_1_AWQOS => grp_pass_fu_180_m_axi_rd_1_AWQOS,
        m_axi_rd_1_AWREGION => grp_pass_fu_180_m_axi_rd_1_AWREGION,
        m_axi_rd_1_AWUSER => grp_pass_fu_180_m_axi_rd_1_AWUSER,
        m_axi_rd_1_WVALID => grp_pass_fu_180_m_axi_rd_1_WVALID,
        m_axi_rd_1_WREADY => ap_const_logic_0,
        m_axi_rd_1_WDATA => grp_pass_fu_180_m_axi_rd_1_WDATA,
        m_axi_rd_1_WSTRB => grp_pass_fu_180_m_axi_rd_1_WSTRB,
        m_axi_rd_1_WLAST => grp_pass_fu_180_m_axi_rd_1_WLAST,
        m_axi_rd_1_WID => grp_pass_fu_180_m_axi_rd_1_WID,
        m_axi_rd_1_WUSER => grp_pass_fu_180_m_axi_rd_1_WUSER,
        m_axi_rd_1_ARVALID => grp_pass_fu_180_m_axi_rd_1_ARVALID,
        m_axi_rd_1_ARREADY => rd_1_ARREADY,
        m_axi_rd_1_ARADDR => grp_pass_fu_180_m_axi_rd_1_ARADDR,
        m_axi_rd_1_ARID => grp_pass_fu_180_m_axi_rd_1_ARID,
        m_axi_rd_1_ARLEN => grp_pass_fu_180_m_axi_rd_1_ARLEN,
        m_axi_rd_1_ARSIZE => grp_pass_fu_180_m_axi_rd_1_ARSIZE,
        m_axi_rd_1_ARBURST => grp_pass_fu_180_m_axi_rd_1_ARBURST,
        m_axi_rd_1_ARLOCK => grp_pass_fu_180_m_axi_rd_1_ARLOCK,
        m_axi_rd_1_ARCACHE => grp_pass_fu_180_m_axi_rd_1_ARCACHE,
        m_axi_rd_1_ARPROT => grp_pass_fu_180_m_axi_rd_1_ARPROT,
        m_axi_rd_1_ARQOS => grp_pass_fu_180_m_axi_rd_1_ARQOS,
        m_axi_rd_1_ARREGION => grp_pass_fu_180_m_axi_rd_1_ARREGION,
        m_axi_rd_1_ARUSER => grp_pass_fu_180_m_axi_rd_1_ARUSER,
        m_axi_rd_1_RVALID => rd_1_RVALID,
        m_axi_rd_1_RREADY => grp_pass_fu_180_m_axi_rd_1_RREADY,
        m_axi_rd_1_RDATA => rd_1_RDATA,
        m_axi_rd_1_RLAST => rd_1_RLAST,
        m_axi_rd_1_RID => rd_1_RID,
        m_axi_rd_1_RFIFONUM => rd_1_RFIFONUM,
        m_axi_rd_1_RUSER => rd_1_RUSER,
        m_axi_rd_1_RRESP => rd_1_RRESP,
        m_axi_rd_1_BVALID => ap_const_logic_0,
        m_axi_rd_1_BREADY => grp_pass_fu_180_m_axi_rd_1_BREADY,
        m_axi_rd_1_BRESP => ap_const_lv2_0,
        m_axi_rd_1_BID => ap_const_lv1_0,
        m_axi_rd_1_BUSER => ap_const_lv1_0,
        rd_12 => rd_1_offset_read_reg_274,
        m_axi_wr_0_AWVALID => grp_pass_fu_180_m_axi_wr_0_AWVALID,
        m_axi_wr_0_AWREADY => wr_0_AWREADY,
        m_axi_wr_0_AWADDR => grp_pass_fu_180_m_axi_wr_0_AWADDR,
        m_axi_wr_0_AWID => grp_pass_fu_180_m_axi_wr_0_AWID,
        m_axi_wr_0_AWLEN => grp_pass_fu_180_m_axi_wr_0_AWLEN,
        m_axi_wr_0_AWSIZE => grp_pass_fu_180_m_axi_wr_0_AWSIZE,
        m_axi_wr_0_AWBURST => grp_pass_fu_180_m_axi_wr_0_AWBURST,
        m_axi_wr_0_AWLOCK => grp_pass_fu_180_m_axi_wr_0_AWLOCK,
        m_axi_wr_0_AWCACHE => grp_pass_fu_180_m_axi_wr_0_AWCACHE,
        m_axi_wr_0_AWPROT => grp_pass_fu_180_m_axi_wr_0_AWPROT,
        m_axi_wr_0_AWQOS => grp_pass_fu_180_m_axi_wr_0_AWQOS,
        m_axi_wr_0_AWREGION => grp_pass_fu_180_m_axi_wr_0_AWREGION,
        m_axi_wr_0_AWUSER => grp_pass_fu_180_m_axi_wr_0_AWUSER,
        m_axi_wr_0_WVALID => grp_pass_fu_180_m_axi_wr_0_WVALID,
        m_axi_wr_0_WREADY => wr_0_WREADY,
        m_axi_wr_0_WDATA => grp_pass_fu_180_m_axi_wr_0_WDATA,
        m_axi_wr_0_WSTRB => grp_pass_fu_180_m_axi_wr_0_WSTRB,
        m_axi_wr_0_WLAST => grp_pass_fu_180_m_axi_wr_0_WLAST,
        m_axi_wr_0_WID => grp_pass_fu_180_m_axi_wr_0_WID,
        m_axi_wr_0_WUSER => grp_pass_fu_180_m_axi_wr_0_WUSER,
        m_axi_wr_0_ARVALID => grp_pass_fu_180_m_axi_wr_0_ARVALID,
        m_axi_wr_0_ARREADY => ap_const_logic_0,
        m_axi_wr_0_ARADDR => grp_pass_fu_180_m_axi_wr_0_ARADDR,
        m_axi_wr_0_ARID => grp_pass_fu_180_m_axi_wr_0_ARID,
        m_axi_wr_0_ARLEN => grp_pass_fu_180_m_axi_wr_0_ARLEN,
        m_axi_wr_0_ARSIZE => grp_pass_fu_180_m_axi_wr_0_ARSIZE,
        m_axi_wr_0_ARBURST => grp_pass_fu_180_m_axi_wr_0_ARBURST,
        m_axi_wr_0_ARLOCK => grp_pass_fu_180_m_axi_wr_0_ARLOCK,
        m_axi_wr_0_ARCACHE => grp_pass_fu_180_m_axi_wr_0_ARCACHE,
        m_axi_wr_0_ARPROT => grp_pass_fu_180_m_axi_wr_0_ARPROT,
        m_axi_wr_0_ARQOS => grp_pass_fu_180_m_axi_wr_0_ARQOS,
        m_axi_wr_0_ARREGION => grp_pass_fu_180_m_axi_wr_0_ARREGION,
        m_axi_wr_0_ARUSER => grp_pass_fu_180_m_axi_wr_0_ARUSER,
        m_axi_wr_0_RVALID => ap_const_logic_0,
        m_axi_wr_0_RREADY => grp_pass_fu_180_m_axi_wr_0_RREADY,
        m_axi_wr_0_RDATA => ap_const_lv256_lc_1,
        m_axi_wr_0_RLAST => ap_const_logic_0,
        m_axi_wr_0_RID => ap_const_lv1_0,
        m_axi_wr_0_RFIFONUM => ap_const_lv9_0,
        m_axi_wr_0_RUSER => ap_const_lv1_0,
        m_axi_wr_0_RRESP => ap_const_lv2_0,
        m_axi_wr_0_BVALID => wr_0_BVALID,
        m_axi_wr_0_BREADY => grp_pass_fu_180_m_axi_wr_0_BREADY,
        m_axi_wr_0_BRESP => wr_0_BRESP,
        m_axi_wr_0_BID => wr_0_BID,
        m_axi_wr_0_BUSER => wr_0_BUSER,
        wr_03 => wr_0_offset_read_reg_269,
        m_axi_wr_1_AWVALID => grp_pass_fu_180_m_axi_wr_1_AWVALID,
        m_axi_wr_1_AWREADY => wr_1_AWREADY,
        m_axi_wr_1_AWADDR => grp_pass_fu_180_m_axi_wr_1_AWADDR,
        m_axi_wr_1_AWID => grp_pass_fu_180_m_axi_wr_1_AWID,
        m_axi_wr_1_AWLEN => grp_pass_fu_180_m_axi_wr_1_AWLEN,
        m_axi_wr_1_AWSIZE => grp_pass_fu_180_m_axi_wr_1_AWSIZE,
        m_axi_wr_1_AWBURST => grp_pass_fu_180_m_axi_wr_1_AWBURST,
        m_axi_wr_1_AWLOCK => grp_pass_fu_180_m_axi_wr_1_AWLOCK,
        m_axi_wr_1_AWCACHE => grp_pass_fu_180_m_axi_wr_1_AWCACHE,
        m_axi_wr_1_AWPROT => grp_pass_fu_180_m_axi_wr_1_AWPROT,
        m_axi_wr_1_AWQOS => grp_pass_fu_180_m_axi_wr_1_AWQOS,
        m_axi_wr_1_AWREGION => grp_pass_fu_180_m_axi_wr_1_AWREGION,
        m_axi_wr_1_AWUSER => grp_pass_fu_180_m_axi_wr_1_AWUSER,
        m_axi_wr_1_WVALID => grp_pass_fu_180_m_axi_wr_1_WVALID,
        m_axi_wr_1_WREADY => wr_1_WREADY,
        m_axi_wr_1_WDATA => grp_pass_fu_180_m_axi_wr_1_WDATA,
        m_axi_wr_1_WSTRB => grp_pass_fu_180_m_axi_wr_1_WSTRB,
        m_axi_wr_1_WLAST => grp_pass_fu_180_m_axi_wr_1_WLAST,
        m_axi_wr_1_WID => grp_pass_fu_180_m_axi_wr_1_WID,
        m_axi_wr_1_WUSER => grp_pass_fu_180_m_axi_wr_1_WUSER,
        m_axi_wr_1_ARVALID => grp_pass_fu_180_m_axi_wr_1_ARVALID,
        m_axi_wr_1_ARREADY => ap_const_logic_0,
        m_axi_wr_1_ARADDR => grp_pass_fu_180_m_axi_wr_1_ARADDR,
        m_axi_wr_1_ARID => grp_pass_fu_180_m_axi_wr_1_ARID,
        m_axi_wr_1_ARLEN => grp_pass_fu_180_m_axi_wr_1_ARLEN,
        m_axi_wr_1_ARSIZE => grp_pass_fu_180_m_axi_wr_1_ARSIZE,
        m_axi_wr_1_ARBURST => grp_pass_fu_180_m_axi_wr_1_ARBURST,
        m_axi_wr_1_ARLOCK => grp_pass_fu_180_m_axi_wr_1_ARLOCK,
        m_axi_wr_1_ARCACHE => grp_pass_fu_180_m_axi_wr_1_ARCACHE,
        m_axi_wr_1_ARPROT => grp_pass_fu_180_m_axi_wr_1_ARPROT,
        m_axi_wr_1_ARQOS => grp_pass_fu_180_m_axi_wr_1_ARQOS,
        m_axi_wr_1_ARREGION => grp_pass_fu_180_m_axi_wr_1_ARREGION,
        m_axi_wr_1_ARUSER => grp_pass_fu_180_m_axi_wr_1_ARUSER,
        m_axi_wr_1_RVALID => ap_const_logic_0,
        m_axi_wr_1_RREADY => grp_pass_fu_180_m_axi_wr_1_RREADY,
        m_axi_wr_1_RDATA => ap_const_lv256_lc_1,
        m_axi_wr_1_RLAST => ap_const_logic_0,
        m_axi_wr_1_RID => ap_const_lv1_0,
        m_axi_wr_1_RFIFONUM => ap_const_lv9_0,
        m_axi_wr_1_RUSER => ap_const_lv1_0,
        m_axi_wr_1_RRESP => ap_const_lv2_0,
        m_axi_wr_1_BVALID => wr_1_BVALID,
        m_axi_wr_1_BREADY => grp_pass_fu_180_m_axi_wr_1_BREADY,
        m_axi_wr_1_BRESP => wr_1_BRESP,
        m_axi_wr_1_BID => wr_1_BID,
        m_axi_wr_1_BUSER => wr_1_BUSER,
        wr_14 => wr_1_offset_read_reg_264,
        ingress_0_TDATA => grp_pass_fu_180_ingress_0_TDATA,
        ingress_0_TKEEP => grp_pass_fu_180_ingress_0_TKEEP,
        ingress_0_TSTRB => grp_pass_fu_180_ingress_0_TSTRB,
        ingress_0_TLAST => grp_pass_fu_180_ingress_0_TLAST,
        ingress_0_TDEST => grp_pass_fu_180_ingress_0_TDEST,
        ingress_1_TDATA => grp_pass_fu_180_ingress_1_TDATA,
        ingress_1_TKEEP => grp_pass_fu_180_ingress_1_TKEEP,
        ingress_1_TSTRB => grp_pass_fu_180_ingress_1_TSTRB,
        ingress_1_TLAST => grp_pass_fu_180_ingress_1_TLAST,
        ingress_1_TDEST => grp_pass_fu_180_ingress_1_TDEST,
        egress_0_TDATA => egress_0_TDATA_int_regslice,
        egress_0_TKEEP => egress_0_TKEEP_int_regslice,
        egress_0_TSTRB => egress_0_TSTRB_int_regslice,
        egress_0_TLAST => egress_0_TLAST_int_regslice,
        egress_0_TDEST => egress_0_TDEST_int_regslice,
        egress_1_TDATA => egress_1_TDATA_int_regslice,
        egress_1_TKEEP => egress_1_TKEEP_int_regslice,
        egress_1_TSTRB => egress_1_TSTRB_int_regslice,
        egress_1_TLAST => egress_1_TLAST_int_regslice,
        egress_1_TDEST => egress_1_TDEST_int_regslice,
        golden_fifo_0_TDATA => grp_pass_fu_180_golden_fifo_0_TDATA,
        golden_fifo_1_TDATA => grp_pass_fu_180_golden_fifo_1_TDATA,
        first => first_read_reg_259,
        last => last_read_reg_254,
        block_header => block_header_read_reg_249,
        target => target_read_reg_244,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ingress_0_TVALID => grp_pass_fu_180_ingress_0_TVALID,
        ingress_0_TREADY => grp_pass_fu_180_ingress_0_TREADY,
        rd_01_ap_vld => ap_const_logic_1,
        first_ap_vld => ap_const_logic_1,
        block_header_ap_vld => ap_const_logic_1,
        ap_start => grp_pass_fu_180_ap_start,
        ap_done => grp_pass_fu_180_ap_done,
        ingress_1_TVALID => grp_pass_fu_180_ingress_1_TVALID,
        ingress_1_TREADY => grp_pass_fu_180_ingress_1_TREADY,
        rd_12_ap_vld => ap_const_logic_1,
        wr_03_ap_vld => ap_const_logic_1,
        egress_0_TVALID => egress_0_TVALID_int_regslice,
        egress_0_TREADY => grp_pass_fu_180_egress_0_TREADY,
        last_ap_vld => ap_const_logic_1,
        target_ap_vld => ap_const_logic_1,
        golden_fifo_0_TVALID => grp_pass_fu_180_golden_fifo_0_TVALID,
        golden_fifo_0_TREADY => grp_pass_fu_180_golden_fifo_0_TREADY,
        wr_14_ap_vld => ap_const_logic_1,
        egress_1_TVALID => egress_1_TVALID_int_regslice,
        egress_1_TREADY => grp_pass_fu_180_egress_1_TREADY,
        golden_fifo_1_TVALID => grp_pass_fu_180_golden_fifo_1_TVALID,
        golden_fifo_1_TREADY => grp_pass_fu_180_golden_fifo_1_TREADY,
        ap_ready => grp_pass_fu_180_ap_ready,
        ap_idle => grp_pass_fu_180_ap_idle,
        ap_continue => grp_pass_fu_180_ap_continue);

    control_s_axi_U : component hash_controller_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rd_0_offset => rd_0_offset,
        rd_1_offset => rd_1_offset,
        wr_0_offset => wr_0_offset,
        wr_1_offset => wr_1_offset,
        first => first,
        last => last,
        block_header => block_header,
        target => target,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    rd_0_m_axi_U : component hash_controller_rd_0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_RD_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RD_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RD_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RD_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RD_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RD_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RD_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RD_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RD_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RD_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RD_0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_rd_0_AWVALID,
        AWREADY => m_axi_rd_0_AWREADY,
        AWADDR => m_axi_rd_0_AWADDR,
        AWID => m_axi_rd_0_AWID,
        AWLEN => m_axi_rd_0_AWLEN,
        AWSIZE => m_axi_rd_0_AWSIZE,
        AWBURST => m_axi_rd_0_AWBURST,
        AWLOCK => m_axi_rd_0_AWLOCK,
        AWCACHE => m_axi_rd_0_AWCACHE,
        AWPROT => m_axi_rd_0_AWPROT,
        AWQOS => m_axi_rd_0_AWQOS,
        AWREGION => m_axi_rd_0_AWREGION,
        AWUSER => m_axi_rd_0_AWUSER,
        WVALID => m_axi_rd_0_WVALID,
        WREADY => m_axi_rd_0_WREADY,
        WDATA => m_axi_rd_0_WDATA,
        WSTRB => m_axi_rd_0_WSTRB,
        WLAST => m_axi_rd_0_WLAST,
        WID => m_axi_rd_0_WID,
        WUSER => m_axi_rd_0_WUSER,
        ARVALID => m_axi_rd_0_ARVALID,
        ARREADY => m_axi_rd_0_ARREADY,
        ARADDR => m_axi_rd_0_ARADDR,
        ARID => m_axi_rd_0_ARID,
        ARLEN => m_axi_rd_0_ARLEN,
        ARSIZE => m_axi_rd_0_ARSIZE,
        ARBURST => m_axi_rd_0_ARBURST,
        ARLOCK => m_axi_rd_0_ARLOCK,
        ARCACHE => m_axi_rd_0_ARCACHE,
        ARPROT => m_axi_rd_0_ARPROT,
        ARQOS => m_axi_rd_0_ARQOS,
        ARREGION => m_axi_rd_0_ARREGION,
        ARUSER => m_axi_rd_0_ARUSER,
        RVALID => m_axi_rd_0_RVALID,
        RREADY => m_axi_rd_0_RREADY,
        RDATA => m_axi_rd_0_RDATA,
        RLAST => m_axi_rd_0_RLAST,
        RID => m_axi_rd_0_RID,
        RUSER => m_axi_rd_0_RUSER,
        RRESP => m_axi_rd_0_RRESP,
        BVALID => m_axi_rd_0_BVALID,
        BREADY => m_axi_rd_0_BREADY,
        BRESP => m_axi_rd_0_BRESP,
        BID => m_axi_rd_0_BID,
        BUSER => m_axi_rd_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => rd_0_ARVALID,
        I_ARREADY => rd_0_ARREADY,
        I_ARADDR => grp_pass_fu_180_m_axi_rd_0_ARADDR,
        I_ARID => grp_pass_fu_180_m_axi_rd_0_ARID,
        I_ARLEN => grp_pass_fu_180_m_axi_rd_0_ARLEN,
        I_ARSIZE => grp_pass_fu_180_m_axi_rd_0_ARSIZE,
        I_ARLOCK => grp_pass_fu_180_m_axi_rd_0_ARLOCK,
        I_ARCACHE => grp_pass_fu_180_m_axi_rd_0_ARCACHE,
        I_ARQOS => grp_pass_fu_180_m_axi_rd_0_ARQOS,
        I_ARPROT => grp_pass_fu_180_m_axi_rd_0_ARPROT,
        I_ARUSER => grp_pass_fu_180_m_axi_rd_0_ARUSER,
        I_ARBURST => grp_pass_fu_180_m_axi_rd_0_ARBURST,
        I_ARREGION => grp_pass_fu_180_m_axi_rd_0_ARREGION,
        I_RVALID => rd_0_RVALID,
        I_RREADY => rd_0_RREADY,
        I_RDATA => rd_0_RDATA,
        I_RFIFONUM => rd_0_RFIFONUM,
        I_RID => rd_0_RID,
        I_RUSER => rd_0_RUSER,
        I_RRESP => rd_0_RRESP,
        I_RLAST => rd_0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => rd_0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => rd_0_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => rd_0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => rd_0_BRESP,
        I_BID => rd_0_BID,
        I_BUSER => rd_0_BUSER);

    rd_1_m_axi_U : component hash_controller_rd_1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_RD_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RD_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RD_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RD_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RD_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RD_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RD_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RD_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RD_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RD_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RD_1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_rd_1_AWVALID,
        AWREADY => m_axi_rd_1_AWREADY,
        AWADDR => m_axi_rd_1_AWADDR,
        AWID => m_axi_rd_1_AWID,
        AWLEN => m_axi_rd_1_AWLEN,
        AWSIZE => m_axi_rd_1_AWSIZE,
        AWBURST => m_axi_rd_1_AWBURST,
        AWLOCK => m_axi_rd_1_AWLOCK,
        AWCACHE => m_axi_rd_1_AWCACHE,
        AWPROT => m_axi_rd_1_AWPROT,
        AWQOS => m_axi_rd_1_AWQOS,
        AWREGION => m_axi_rd_1_AWREGION,
        AWUSER => m_axi_rd_1_AWUSER,
        WVALID => m_axi_rd_1_WVALID,
        WREADY => m_axi_rd_1_WREADY,
        WDATA => m_axi_rd_1_WDATA,
        WSTRB => m_axi_rd_1_WSTRB,
        WLAST => m_axi_rd_1_WLAST,
        WID => m_axi_rd_1_WID,
        WUSER => m_axi_rd_1_WUSER,
        ARVALID => m_axi_rd_1_ARVALID,
        ARREADY => m_axi_rd_1_ARREADY,
        ARADDR => m_axi_rd_1_ARADDR,
        ARID => m_axi_rd_1_ARID,
        ARLEN => m_axi_rd_1_ARLEN,
        ARSIZE => m_axi_rd_1_ARSIZE,
        ARBURST => m_axi_rd_1_ARBURST,
        ARLOCK => m_axi_rd_1_ARLOCK,
        ARCACHE => m_axi_rd_1_ARCACHE,
        ARPROT => m_axi_rd_1_ARPROT,
        ARQOS => m_axi_rd_1_ARQOS,
        ARREGION => m_axi_rd_1_ARREGION,
        ARUSER => m_axi_rd_1_ARUSER,
        RVALID => m_axi_rd_1_RVALID,
        RREADY => m_axi_rd_1_RREADY,
        RDATA => m_axi_rd_1_RDATA,
        RLAST => m_axi_rd_1_RLAST,
        RID => m_axi_rd_1_RID,
        RUSER => m_axi_rd_1_RUSER,
        RRESP => m_axi_rd_1_RRESP,
        BVALID => m_axi_rd_1_BVALID,
        BREADY => m_axi_rd_1_BREADY,
        BRESP => m_axi_rd_1_BRESP,
        BID => m_axi_rd_1_BID,
        BUSER => m_axi_rd_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => rd_1_ARVALID,
        I_ARREADY => rd_1_ARREADY,
        I_ARADDR => grp_pass_fu_180_m_axi_rd_1_ARADDR,
        I_ARID => grp_pass_fu_180_m_axi_rd_1_ARID,
        I_ARLEN => grp_pass_fu_180_m_axi_rd_1_ARLEN,
        I_ARSIZE => grp_pass_fu_180_m_axi_rd_1_ARSIZE,
        I_ARLOCK => grp_pass_fu_180_m_axi_rd_1_ARLOCK,
        I_ARCACHE => grp_pass_fu_180_m_axi_rd_1_ARCACHE,
        I_ARQOS => grp_pass_fu_180_m_axi_rd_1_ARQOS,
        I_ARPROT => grp_pass_fu_180_m_axi_rd_1_ARPROT,
        I_ARUSER => grp_pass_fu_180_m_axi_rd_1_ARUSER,
        I_ARBURST => grp_pass_fu_180_m_axi_rd_1_ARBURST,
        I_ARREGION => grp_pass_fu_180_m_axi_rd_1_ARREGION,
        I_RVALID => rd_1_RVALID,
        I_RREADY => rd_1_RREADY,
        I_RDATA => rd_1_RDATA,
        I_RFIFONUM => rd_1_RFIFONUM,
        I_RID => rd_1_RID,
        I_RUSER => rd_1_RUSER,
        I_RRESP => rd_1_RRESP,
        I_RLAST => rd_1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => rd_1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => rd_1_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => rd_1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => rd_1_BRESP,
        I_BID => rd_1_BID,
        I_BUSER => rd_1_BUSER);

    wr_0_m_axi_U : component hash_controller_wr_0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_WR_0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WR_0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WR_0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WR_0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WR_0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WR_0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WR_0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WR_0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_WR_0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WR_0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WR_0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_wr_0_AWVALID,
        AWREADY => m_axi_wr_0_AWREADY,
        AWADDR => m_axi_wr_0_AWADDR,
        AWID => m_axi_wr_0_AWID,
        AWLEN => m_axi_wr_0_AWLEN,
        AWSIZE => m_axi_wr_0_AWSIZE,
        AWBURST => m_axi_wr_0_AWBURST,
        AWLOCK => m_axi_wr_0_AWLOCK,
        AWCACHE => m_axi_wr_0_AWCACHE,
        AWPROT => m_axi_wr_0_AWPROT,
        AWQOS => m_axi_wr_0_AWQOS,
        AWREGION => m_axi_wr_0_AWREGION,
        AWUSER => m_axi_wr_0_AWUSER,
        WVALID => m_axi_wr_0_WVALID,
        WREADY => m_axi_wr_0_WREADY,
        WDATA => m_axi_wr_0_WDATA,
        WSTRB => m_axi_wr_0_WSTRB,
        WLAST => m_axi_wr_0_WLAST,
        WID => m_axi_wr_0_WID,
        WUSER => m_axi_wr_0_WUSER,
        ARVALID => m_axi_wr_0_ARVALID,
        ARREADY => m_axi_wr_0_ARREADY,
        ARADDR => m_axi_wr_0_ARADDR,
        ARID => m_axi_wr_0_ARID,
        ARLEN => m_axi_wr_0_ARLEN,
        ARSIZE => m_axi_wr_0_ARSIZE,
        ARBURST => m_axi_wr_0_ARBURST,
        ARLOCK => m_axi_wr_0_ARLOCK,
        ARCACHE => m_axi_wr_0_ARCACHE,
        ARPROT => m_axi_wr_0_ARPROT,
        ARQOS => m_axi_wr_0_ARQOS,
        ARREGION => m_axi_wr_0_ARREGION,
        ARUSER => m_axi_wr_0_ARUSER,
        RVALID => m_axi_wr_0_RVALID,
        RREADY => m_axi_wr_0_RREADY,
        RDATA => m_axi_wr_0_RDATA,
        RLAST => m_axi_wr_0_RLAST,
        RID => m_axi_wr_0_RID,
        RUSER => m_axi_wr_0_RUSER,
        RRESP => m_axi_wr_0_RRESP,
        BVALID => m_axi_wr_0_BVALID,
        BREADY => m_axi_wr_0_BREADY,
        BRESP => m_axi_wr_0_BRESP,
        BID => m_axi_wr_0_BID,
        BUSER => m_axi_wr_0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => wr_0_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => wr_0_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => wr_0_RDATA,
        I_RFIFONUM => wr_0_RFIFONUM,
        I_RID => wr_0_RID,
        I_RUSER => wr_0_RUSER,
        I_RRESP => wr_0_RRESP,
        I_RLAST => wr_0_RLAST,
        I_AWVALID => wr_0_AWVALID,
        I_AWREADY => wr_0_AWREADY,
        I_AWADDR => grp_pass_fu_180_m_axi_wr_0_AWADDR,
        I_AWID => grp_pass_fu_180_m_axi_wr_0_AWID,
        I_AWLEN => grp_pass_fu_180_m_axi_wr_0_AWLEN,
        I_AWSIZE => grp_pass_fu_180_m_axi_wr_0_AWSIZE,
        I_AWLOCK => grp_pass_fu_180_m_axi_wr_0_AWLOCK,
        I_AWCACHE => grp_pass_fu_180_m_axi_wr_0_AWCACHE,
        I_AWQOS => grp_pass_fu_180_m_axi_wr_0_AWQOS,
        I_AWPROT => grp_pass_fu_180_m_axi_wr_0_AWPROT,
        I_AWUSER => grp_pass_fu_180_m_axi_wr_0_AWUSER,
        I_AWBURST => grp_pass_fu_180_m_axi_wr_0_AWBURST,
        I_AWREGION => grp_pass_fu_180_m_axi_wr_0_AWREGION,
        I_WVALID => wr_0_WVALID,
        I_WREADY => wr_0_WREADY,
        I_WDATA => grp_pass_fu_180_m_axi_wr_0_WDATA,
        I_WID => grp_pass_fu_180_m_axi_wr_0_WID,
        I_WUSER => grp_pass_fu_180_m_axi_wr_0_WUSER,
        I_WLAST => grp_pass_fu_180_m_axi_wr_0_WLAST,
        I_WSTRB => grp_pass_fu_180_m_axi_wr_0_WSTRB,
        I_BVALID => wr_0_BVALID,
        I_BREADY => wr_0_BREADY,
        I_BRESP => wr_0_BRESP,
        I_BID => wr_0_BID,
        I_BUSER => wr_0_BUSER);

    wr_1_m_axi_U : component hash_controller_wr_1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 256,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 9,
        C_M_AXI_ID_WIDTH => C_M_AXI_WR_1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WR_1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WR_1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WR_1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WR_1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WR_1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WR_1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WR_1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_WR_1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WR_1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WR_1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_wr_1_AWVALID,
        AWREADY => m_axi_wr_1_AWREADY,
        AWADDR => m_axi_wr_1_AWADDR,
        AWID => m_axi_wr_1_AWID,
        AWLEN => m_axi_wr_1_AWLEN,
        AWSIZE => m_axi_wr_1_AWSIZE,
        AWBURST => m_axi_wr_1_AWBURST,
        AWLOCK => m_axi_wr_1_AWLOCK,
        AWCACHE => m_axi_wr_1_AWCACHE,
        AWPROT => m_axi_wr_1_AWPROT,
        AWQOS => m_axi_wr_1_AWQOS,
        AWREGION => m_axi_wr_1_AWREGION,
        AWUSER => m_axi_wr_1_AWUSER,
        WVALID => m_axi_wr_1_WVALID,
        WREADY => m_axi_wr_1_WREADY,
        WDATA => m_axi_wr_1_WDATA,
        WSTRB => m_axi_wr_1_WSTRB,
        WLAST => m_axi_wr_1_WLAST,
        WID => m_axi_wr_1_WID,
        WUSER => m_axi_wr_1_WUSER,
        ARVALID => m_axi_wr_1_ARVALID,
        ARREADY => m_axi_wr_1_ARREADY,
        ARADDR => m_axi_wr_1_ARADDR,
        ARID => m_axi_wr_1_ARID,
        ARLEN => m_axi_wr_1_ARLEN,
        ARSIZE => m_axi_wr_1_ARSIZE,
        ARBURST => m_axi_wr_1_ARBURST,
        ARLOCK => m_axi_wr_1_ARLOCK,
        ARCACHE => m_axi_wr_1_ARCACHE,
        ARPROT => m_axi_wr_1_ARPROT,
        ARQOS => m_axi_wr_1_ARQOS,
        ARREGION => m_axi_wr_1_ARREGION,
        ARUSER => m_axi_wr_1_ARUSER,
        RVALID => m_axi_wr_1_RVALID,
        RREADY => m_axi_wr_1_RREADY,
        RDATA => m_axi_wr_1_RDATA,
        RLAST => m_axi_wr_1_RLAST,
        RID => m_axi_wr_1_RID,
        RUSER => m_axi_wr_1_RUSER,
        RRESP => m_axi_wr_1_RRESP,
        BVALID => m_axi_wr_1_BVALID,
        BREADY => m_axi_wr_1_BREADY,
        BRESP => m_axi_wr_1_BRESP,
        BID => m_axi_wr_1_BID,
        BUSER => m_axi_wr_1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => wr_1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => wr_1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => wr_1_RDATA,
        I_RFIFONUM => wr_1_RFIFONUM,
        I_RID => wr_1_RID,
        I_RUSER => wr_1_RUSER,
        I_RRESP => wr_1_RRESP,
        I_RLAST => wr_1_RLAST,
        I_AWVALID => wr_1_AWVALID,
        I_AWREADY => wr_1_AWREADY,
        I_AWADDR => grp_pass_fu_180_m_axi_wr_1_AWADDR,
        I_AWID => grp_pass_fu_180_m_axi_wr_1_AWID,
        I_AWLEN => grp_pass_fu_180_m_axi_wr_1_AWLEN,
        I_AWSIZE => grp_pass_fu_180_m_axi_wr_1_AWSIZE,
        I_AWLOCK => grp_pass_fu_180_m_axi_wr_1_AWLOCK,
        I_AWCACHE => grp_pass_fu_180_m_axi_wr_1_AWCACHE,
        I_AWQOS => grp_pass_fu_180_m_axi_wr_1_AWQOS,
        I_AWPROT => grp_pass_fu_180_m_axi_wr_1_AWPROT,
        I_AWUSER => grp_pass_fu_180_m_axi_wr_1_AWUSER,
        I_AWBURST => grp_pass_fu_180_m_axi_wr_1_AWBURST,
        I_AWREGION => grp_pass_fu_180_m_axi_wr_1_AWREGION,
        I_WVALID => wr_1_WVALID,
        I_WREADY => wr_1_WREADY,
        I_WDATA => grp_pass_fu_180_m_axi_wr_1_WDATA,
        I_WID => grp_pass_fu_180_m_axi_wr_1_WID,
        I_WUSER => grp_pass_fu_180_m_axi_wr_1_WUSER,
        I_WLAST => grp_pass_fu_180_m_axi_wr_1_WLAST,
        I_WSTRB => grp_pass_fu_180_m_axi_wr_1_WSTRB,
        I_BVALID => wr_1_BVALID,
        I_BREADY => wr_1_BREADY,
        I_BRESP => wr_1_BRESP,
        I_BID => wr_1_BID,
        I_BUSER => wr_1_BUSER);

    regslice_both_ingress_0_V_data_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_0_TDATA,
        vld_in => grp_pass_fu_180_ingress_0_TVALID,
        ack_in => ingress_0_TREADY_int_regslice,
        data_out => ingress_0_TDATA,
        vld_out => regslice_both_ingress_0_V_data_V_U_vld_out,
        ack_out => ingress_0_TREADY,
        apdone_blk => regslice_both_ingress_0_V_data_V_U_apdone_blk);

    regslice_both_ingress_0_V_keep_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_0_TKEEP,
        vld_in => grp_pass_fu_180_ingress_0_TVALID,
        ack_in => regslice_both_ingress_0_V_keep_V_U_ack_in_dummy,
        data_out => ingress_0_TKEEP,
        vld_out => regslice_both_ingress_0_V_keep_V_U_vld_out,
        ack_out => ingress_0_TREADY,
        apdone_blk => regslice_both_ingress_0_V_keep_V_U_apdone_blk);

    regslice_both_ingress_0_V_strb_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_0_TSTRB,
        vld_in => grp_pass_fu_180_ingress_0_TVALID,
        ack_in => regslice_both_ingress_0_V_strb_V_U_ack_in_dummy,
        data_out => ingress_0_TSTRB,
        vld_out => regslice_both_ingress_0_V_strb_V_U_vld_out,
        ack_out => ingress_0_TREADY,
        apdone_blk => regslice_both_ingress_0_V_strb_V_U_apdone_blk);

    regslice_both_ingress_0_V_last_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_0_TLAST,
        vld_in => grp_pass_fu_180_ingress_0_TVALID,
        ack_in => regslice_both_ingress_0_V_last_V_U_ack_in_dummy,
        data_out => ingress_0_TLAST,
        vld_out => regslice_both_ingress_0_V_last_V_U_vld_out,
        ack_out => ingress_0_TREADY,
        apdone_blk => regslice_both_ingress_0_V_last_V_U_apdone_blk);

    regslice_both_ingress_0_V_dest_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_0_TDEST,
        vld_in => grp_pass_fu_180_ingress_0_TVALID,
        ack_in => regslice_both_ingress_0_V_dest_V_U_ack_in_dummy,
        data_out => ingress_0_TDEST,
        vld_out => regslice_both_ingress_0_V_dest_V_U_vld_out,
        ack_out => ingress_0_TREADY,
        apdone_blk => regslice_both_ingress_0_V_dest_V_U_apdone_blk);

    regslice_both_ingress_1_V_data_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_1_TDATA,
        vld_in => grp_pass_fu_180_ingress_1_TVALID,
        ack_in => ingress_1_TREADY_int_regslice,
        data_out => ingress_1_TDATA,
        vld_out => regslice_both_ingress_1_V_data_V_U_vld_out,
        ack_out => ingress_1_TREADY,
        apdone_blk => regslice_both_ingress_1_V_data_V_U_apdone_blk);

    regslice_both_ingress_1_V_keep_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_1_TKEEP,
        vld_in => grp_pass_fu_180_ingress_1_TVALID,
        ack_in => regslice_both_ingress_1_V_keep_V_U_ack_in_dummy,
        data_out => ingress_1_TKEEP,
        vld_out => regslice_both_ingress_1_V_keep_V_U_vld_out,
        ack_out => ingress_1_TREADY,
        apdone_blk => regslice_both_ingress_1_V_keep_V_U_apdone_blk);

    regslice_both_ingress_1_V_strb_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_1_TSTRB,
        vld_in => grp_pass_fu_180_ingress_1_TVALID,
        ack_in => regslice_both_ingress_1_V_strb_V_U_ack_in_dummy,
        data_out => ingress_1_TSTRB,
        vld_out => regslice_both_ingress_1_V_strb_V_U_vld_out,
        ack_out => ingress_1_TREADY,
        apdone_blk => regslice_both_ingress_1_V_strb_V_U_apdone_blk);

    regslice_both_ingress_1_V_last_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_1_TLAST,
        vld_in => grp_pass_fu_180_ingress_1_TVALID,
        ack_in => regslice_both_ingress_1_V_last_V_U_ack_in_dummy,
        data_out => ingress_1_TLAST,
        vld_out => regslice_both_ingress_1_V_last_V_U_vld_out,
        ack_out => ingress_1_TREADY,
        apdone_blk => regslice_both_ingress_1_V_last_V_U_apdone_blk);

    regslice_both_ingress_1_V_dest_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_ingress_1_TDEST,
        vld_in => grp_pass_fu_180_ingress_1_TVALID,
        ack_in => regslice_both_ingress_1_V_dest_V_U_ack_in_dummy,
        data_out => ingress_1_TDEST,
        vld_out => regslice_both_ingress_1_V_dest_V_U_vld_out,
        ack_out => ingress_1_TREADY,
        apdone_blk => regslice_both_ingress_1_V_dest_V_U_apdone_blk);

    regslice_both_egress_0_V_data_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_0_TDATA,
        vld_in => egress_0_TVALID,
        ack_in => regslice_both_egress_0_V_data_V_U_ack_in,
        data_out => egress_0_TDATA_int_regslice,
        vld_out => egress_0_TVALID_int_regslice,
        ack_out => egress_0_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_0_V_data_V_U_apdone_blk);

    regslice_both_egress_0_V_keep_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_0_TKEEP,
        vld_in => egress_0_TVALID,
        ack_in => regslice_both_egress_0_V_keep_V_U_ack_in,
        data_out => egress_0_TKEEP_int_regslice,
        vld_out => regslice_both_egress_0_V_keep_V_U_vld_out,
        ack_out => egress_0_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_0_V_keep_V_U_apdone_blk);

    regslice_both_egress_0_V_strb_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_0_TSTRB,
        vld_in => egress_0_TVALID,
        ack_in => regslice_both_egress_0_V_strb_V_U_ack_in,
        data_out => egress_0_TSTRB_int_regslice,
        vld_out => regslice_both_egress_0_V_strb_V_U_vld_out,
        ack_out => egress_0_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_0_V_strb_V_U_apdone_blk);

    regslice_both_egress_0_V_last_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_0_TLAST,
        vld_in => egress_0_TVALID,
        ack_in => regslice_both_egress_0_V_last_V_U_ack_in,
        data_out => egress_0_TLAST_int_regslice,
        vld_out => regslice_both_egress_0_V_last_V_U_vld_out,
        ack_out => egress_0_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_0_V_last_V_U_apdone_blk);

    regslice_both_egress_0_V_dest_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_0_TDEST,
        vld_in => egress_0_TVALID,
        ack_in => regslice_both_egress_0_V_dest_V_U_ack_in,
        data_out => egress_0_TDEST_int_regslice,
        vld_out => regslice_both_egress_0_V_dest_V_U_vld_out,
        ack_out => egress_0_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_0_V_dest_V_U_apdone_blk);

    regslice_both_egress_1_V_data_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_1_TDATA,
        vld_in => egress_1_TVALID,
        ack_in => regslice_both_egress_1_V_data_V_U_ack_in,
        data_out => egress_1_TDATA_int_regslice,
        vld_out => egress_1_TVALID_int_regslice,
        ack_out => egress_1_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_1_V_data_V_U_apdone_blk);

    regslice_both_egress_1_V_keep_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_1_TKEEP,
        vld_in => egress_1_TVALID,
        ack_in => regslice_both_egress_1_V_keep_V_U_ack_in,
        data_out => egress_1_TKEEP_int_regslice,
        vld_out => regslice_both_egress_1_V_keep_V_U_vld_out,
        ack_out => egress_1_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_1_V_keep_V_U_apdone_blk);

    regslice_both_egress_1_V_strb_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_1_TSTRB,
        vld_in => egress_1_TVALID,
        ack_in => regslice_both_egress_1_V_strb_V_U_ack_in,
        data_out => egress_1_TSTRB_int_regslice,
        vld_out => regslice_both_egress_1_V_strb_V_U_vld_out,
        ack_out => egress_1_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_1_V_strb_V_U_apdone_blk);

    regslice_both_egress_1_V_last_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_1_TLAST,
        vld_in => egress_1_TVALID,
        ack_in => regslice_both_egress_1_V_last_V_U_ack_in,
        data_out => egress_1_TLAST_int_regslice,
        vld_out => regslice_both_egress_1_V_last_V_U_vld_out,
        ack_out => egress_1_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_1_V_last_V_U_apdone_blk);

    regslice_both_egress_1_V_dest_V_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => egress_1_TDEST,
        vld_in => egress_1_TVALID,
        ack_in => regslice_both_egress_1_V_dest_V_U_ack_in,
        data_out => egress_1_TDEST_int_regslice,
        vld_out => regslice_both_egress_1_V_dest_V_U_vld_out,
        ack_out => egress_1_TREADY_int_regslice,
        apdone_blk => regslice_both_egress_1_V_dest_V_U_apdone_blk);

    regslice_both_golden_fifo_0_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_golden_fifo_0_TDATA,
        vld_in => grp_pass_fu_180_golden_fifo_0_TVALID,
        ack_in => golden_fifo_0_TREADY_int_regslice,
        data_out => golden_fifo_0_TDATA,
        vld_out => regslice_both_golden_fifo_0_U_vld_out,
        ack_out => golden_fifo_0_TREADY,
        apdone_blk => regslice_both_golden_fifo_0_U_apdone_blk);

    regslice_both_golden_fifo_1_U : component hash_controller_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_pass_fu_180_golden_fifo_1_TDATA,
        vld_in => grp_pass_fu_180_golden_fifo_1_TVALID,
        ack_in => golden_fifo_1_TREADY_int_regslice,
        data_out => golden_fifo_1_TDATA,
        vld_out => regslice_both_golden_fifo_1_U_vld_out,
        ack_out => golden_fifo_1_TREADY,
        apdone_blk => regslice_both_golden_fifo_1_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pass_fu_180_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pass_fu_180_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_pass_fu_180_ap_done <= ap_const_logic_0;
                elsif ((grp_pass_fu_180_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pass_fu_180_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_pass_fu_180_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_pass_fu_180_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_pass_fu_180_ap_ready <= ap_const_logic_0;
                elsif ((grp_pass_fu_180_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_pass_fu_180_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pass_fu_180_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pass_fu_180_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_pass_fu_180_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_pass_fu_180_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pass_fu_180_ap_ready = ap_const_logic_1)) then 
                    grp_pass_fu_180_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                block_header_read_reg_249 <= block_header;
                first_read_reg_259 <= (0=>first, others=>'-');
                last_read_reg_254 <= (0=>last, others=>'-');
                rd_0_offset_read_reg_279 <= rd_0_offset;
                rd_1_offset_read_reg_274 <= rd_1_offset;
                target_read_reg_244 <= target;
                wr_0_offset_read_reg_269 <= wr_0_offset;
                wr_1_offset_read_reg_264 <= wr_1_offset;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, ap_CS_fsm_state4, regslice_both_ingress_0_V_data_V_U_apdone_blk, regslice_both_ingress_1_V_data_V_U_apdone_blk, regslice_both_golden_fifo_0_U_apdone_blk, regslice_both_golden_fifo_1_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((regslice_both_golden_fifo_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_golden_fifo_0_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_1_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_0_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(regslice_both_ingress_0_V_data_V_U_apdone_blk, regslice_both_ingress_1_V_data_V_U_apdone_blk, regslice_both_golden_fifo_0_U_apdone_blk, regslice_both_golden_fifo_1_U_apdone_blk)
    begin
        if (((regslice_both_golden_fifo_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_golden_fifo_0_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_1_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_0_V_data_V_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_pass_fu_180_ap_ready, ap_sync_grp_pass_fu_180_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_pass_fu_180_ap_ready and ap_sync_grp_pass_fu_180_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state4_assign_proc : process(regslice_both_ingress_0_V_data_V_U_apdone_blk, regslice_both_ingress_1_V_data_V_U_apdone_blk, regslice_both_golden_fifo_0_U_apdone_blk, regslice_both_golden_fifo_1_U_apdone_blk)
    begin
                ap_block_state4 <= ((regslice_both_golden_fifo_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_golden_fifo_0_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_1_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_0_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, regslice_both_ingress_0_V_data_V_U_apdone_blk, regslice_both_ingress_1_V_data_V_U_apdone_blk, regslice_both_golden_fifo_0_U_apdone_blk, regslice_both_golden_fifo_1_U_apdone_blk)
    begin
        if ((not(((regslice_both_golden_fifo_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_golden_fifo_0_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_1_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_0_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_ingress_0_V_data_V_U_apdone_blk, regslice_both_ingress_1_V_data_V_U_apdone_blk, regslice_both_golden_fifo_0_U_apdone_blk, regslice_both_golden_fifo_1_U_apdone_blk)
    begin
        if ((not(((regslice_both_golden_fifo_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_golden_fifo_0_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_1_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_ingress_0_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_pass_fu_180_ap_done <= (grp_pass_fu_180_ap_done or ap_sync_reg_grp_pass_fu_180_ap_done);
    ap_sync_grp_pass_fu_180_ap_ready <= (grp_pass_fu_180_ap_ready or ap_sync_reg_grp_pass_fu_180_ap_ready);
    egress_0_TREADY <= regslice_both_egress_0_V_data_V_U_ack_in;

    egress_0_TREADY_int_regslice_assign_proc : process(grp_pass_fu_180_egress_0_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            egress_0_TREADY_int_regslice <= grp_pass_fu_180_egress_0_TREADY;
        else 
            egress_0_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    egress_1_TREADY <= regslice_both_egress_1_V_data_V_U_ack_in;

    egress_1_TREADY_int_regslice_assign_proc : process(grp_pass_fu_180_egress_1_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            egress_1_TREADY_int_regslice <= grp_pass_fu_180_egress_1_TREADY;
        else 
            egress_1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    golden_fifo_0_TVALID <= regslice_both_golden_fifo_0_U_vld_out;
    golden_fifo_1_TVALID <= regslice_both_golden_fifo_1_U_vld_out;

    grp_pass_fu_180_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_pass_fu_180_ap_continue <= ap_const_logic_1;
        else 
            grp_pass_fu_180_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_pass_fu_180_ap_start <= grp_pass_fu_180_ap_start_reg;
    grp_pass_fu_180_golden_fifo_0_TREADY <= (golden_fifo_0_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_pass_fu_180_golden_fifo_1_TREADY <= (golden_fifo_1_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_pass_fu_180_ingress_0_TREADY <= (ingress_0_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_pass_fu_180_ingress_1_TREADY <= (ingress_1_TREADY_int_regslice and ap_CS_fsm_state3);
    ingress_0_TVALID <= regslice_both_ingress_0_V_data_V_U_vld_out;
    ingress_0_TVALID_int_regslice <= grp_pass_fu_180_ingress_0_TVALID;
    ingress_1_TVALID <= regslice_both_ingress_1_V_data_V_U_vld_out;
    ingress_1_TVALID_int_regslice <= grp_pass_fu_180_ingress_1_TVALID;

    rd_0_ARVALID_assign_proc : process(grp_pass_fu_180_m_axi_rd_0_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rd_0_ARVALID <= grp_pass_fu_180_m_axi_rd_0_ARVALID;
        else 
            rd_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    rd_0_RREADY_assign_proc : process(grp_pass_fu_180_m_axi_rd_0_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rd_0_RREADY <= grp_pass_fu_180_m_axi_rd_0_RREADY;
        else 
            rd_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    rd_1_ARVALID_assign_proc : process(grp_pass_fu_180_m_axi_rd_1_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rd_1_ARVALID <= grp_pass_fu_180_m_axi_rd_1_ARVALID;
        else 
            rd_1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    rd_1_RREADY_assign_proc : process(grp_pass_fu_180_m_axi_rd_1_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            rd_1_RREADY <= grp_pass_fu_180_m_axi_rd_1_RREADY;
        else 
            rd_1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    wr_0_AWVALID_assign_proc : process(grp_pass_fu_180_m_axi_wr_0_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wr_0_AWVALID <= grp_pass_fu_180_m_axi_wr_0_AWVALID;
        else 
            wr_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    wr_0_BREADY_assign_proc : process(grp_pass_fu_180_m_axi_wr_0_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wr_0_BREADY <= grp_pass_fu_180_m_axi_wr_0_BREADY;
        else 
            wr_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    wr_0_WVALID_assign_proc : process(grp_pass_fu_180_m_axi_wr_0_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wr_0_WVALID <= grp_pass_fu_180_m_axi_wr_0_WVALID;
        else 
            wr_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    wr_1_AWVALID_assign_proc : process(grp_pass_fu_180_m_axi_wr_1_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wr_1_AWVALID <= grp_pass_fu_180_m_axi_wr_1_AWVALID;
        else 
            wr_1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    wr_1_BREADY_assign_proc : process(grp_pass_fu_180_m_axi_wr_1_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wr_1_BREADY <= grp_pass_fu_180_m_axi_wr_1_BREADY;
        else 
            wr_1_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    wr_1_WVALID_assign_proc : process(grp_pass_fu_180_m_axi_wr_1_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            wr_1_WVALID <= grp_pass_fu_180_m_axi_wr_1_WVALID;
        else 
            wr_1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

end behav;
