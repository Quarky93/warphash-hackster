-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hash_controller_egress is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    egress_0_TVALID : IN STD_LOGIC;
    m_axi_wr_0_AWVALID : OUT STD_LOGIC;
    m_axi_wr_0_AWREADY : IN STD_LOGIC;
    m_axi_wr_0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_WVALID : OUT STD_LOGIC;
    m_axi_wr_0_WREADY : IN STD_LOGIC;
    m_axi_wr_0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_wr_0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_0_WLAST : OUT STD_LOGIC;
    m_axi_wr_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_ARVALID : OUT STD_LOGIC;
    m_axi_wr_0_ARREADY : IN STD_LOGIC;
    m_axi_wr_0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_wr_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_wr_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_wr_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_wr_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_RVALID : IN STD_LOGIC;
    m_axi_wr_0_RREADY : OUT STD_LOGIC;
    m_axi_wr_0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_wr_0_RLAST : IN STD_LOGIC;
    m_axi_wr_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_wr_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_BVALID : IN STD_LOGIC;
    m_axi_wr_0_BREADY : OUT STD_LOGIC;
    m_axi_wr_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_wr_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_wr_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    golden_fifo_0_TREADY : IN STD_LOGIC;
    gmem : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    egress_0_TREADY : OUT STD_LOGIC;
    egress_0_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    egress_0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    egress_0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    last : IN STD_LOGIC_VECTOR (0 downto 0);
    target : IN STD_LOGIC_VECTOR (511 downto 0);
    golden_fifo_0_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    golden_fifo_0_TVALID : OUT STD_LOGIC );
end;


architecture behav of hash_controller_egress is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv26_2000000 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln29_reg_268 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal last_read_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op41_writereq_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal last_read_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal last_read_reg_264_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1072_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1072_reg_295_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op53_write_state8 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal wr_0_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal wr_0_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal wr_0_blk_n_B : STD_LOGIC;
    signal egress_0_TDATA_blk_n : STD_LOGIC;
    signal golden_fifo_0_TDATA_blk_n : STD_LOGIC;
    signal target_read_reg_259 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal last_read_read_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_read_reg_264_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_268_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_268_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln293_fu_179_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln293_reg_272 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln293_reg_272_pp0_iter1_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln293_reg_272_pp0_iter2_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln293_reg_272_pp0_iter3_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln_reg_277 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_data_V_reg_282 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1072_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1072_reg_295_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_299 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sext_ln35_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln674_fu_235_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal i_fu_92 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln29_fu_173_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_183_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln293_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln293_fu_195_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_314 : BOOLEAN;
    signal ap_condition_435 : BOOLEAN;
    signal ap_condition_439 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hash_controller_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component hash_controller_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_314)) then
                if ((icmp_ln29_fu_167_p2 = ap_const_lv1_0)) then 
                    i_fu_92 <= add_ln29_fu_173_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv26_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_reg_268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (last_read_reg_264 = ap_const_lv1_1))) then
                icmp_ln1072_reg_295 <= icmp_ln1072_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                icmp_ln1072_reg_295_pp0_iter1_reg <= icmp_ln1072_reg_295;
                icmp_ln1072_reg_295_pp0_iter2_reg <= icmp_ln1072_reg_295_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln29_reg_268 <= icmp_ln29_fu_167_p2;
                icmp_ln29_reg_268_pp0_iter1_reg <= icmp_ln29_reg_268;
                icmp_ln29_reg_268_pp0_iter2_reg <= icmp_ln29_reg_268_pp0_iter1_reg;
                last_read_reg_264 <= last;
                last_read_reg_264_pp0_iter1_reg <= last_read_reg_264;
                last_read_reg_264_pp0_iter2_reg <= last_read_reg_264_pp0_iter1_reg;
                last_read_reg_264_pp0_iter3_reg <= last_read_reg_264_pp0_iter2_reg;
                target_read_reg_259 <= target;
                trunc_ln293_reg_272_pp0_iter1_reg <= trunc_ln293_reg_272;
                trunc_ln293_reg_272_pp0_iter2_reg <= trunc_ln293_reg_272_pp0_iter1_reg;
                trunc_ln293_reg_272_pp0_iter3_reg <= trunc_ln293_reg_272_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (last_read_reg_264 = ap_const_lv1_0))) then
                p_Result_s_reg_299 <= tmp_data_V_reg_282(511 downto 256);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_reg_268 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_data_V_reg_282 <= egress_0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln293_reg_272 <= trunc_ln293_fu_179_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_167_p2 = ap_const_lv1_0) and (last_read_read_fu_102_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln_reg_277 <= add_ln293_fu_195_p2(63 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter3_stage0, ap_idle_pp0_0to2, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln293_fu_195_p2 <= std_logic_vector(unsigned(zext_ln293_fu_191_p1) + unsigned(gmem));
    add_ln29_fu_173_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv26_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, m_axi_wr_0_BVALID, last_read_reg_264_pp0_iter3_reg, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((m_axi_wr_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_wr_0_BVALID, last_read_reg_264_pp0_iter3_reg, ap_done_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_wr_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, m_axi_wr_0_BVALID, last_read_reg_264_pp0_iter3_reg, ap_done_reg, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_wr_0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, egress_0_TVALID, icmp_ln29_reg_268, golden_fifo_0_TREADY, ap_predicate_op53_write_state8, ap_done_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_done_reg = ap_const_logic_1) or ((icmp_ln29_reg_268 = ap_const_lv1_0) and (egress_0_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op53_write_state8 = ap_const_boolean_1) and (golden_fifo_0_TREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, egress_0_TVALID, icmp_ln29_reg_268, ap_block_state2_io, ap_block_state4_io, golden_fifo_0_TREADY, ap_predicate_op53_write_state8, ap_block_state8_io, ap_done_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((ap_predicate_op53_write_state8 = ap_const_boolean_1) and (golden_fifo_0_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln29_reg_268 = ap_const_lv1_0) and (egress_0_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, egress_0_TVALID, icmp_ln29_reg_268, ap_block_state2_io, ap_block_state4_io, golden_fifo_0_TREADY, ap_predicate_op53_write_state8, ap_block_state8_io, ap_done_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((ap_predicate_op53_write_state8 = ap_const_boolean_1) and (golden_fifo_0_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((icmp_ln29_reg_268 = ap_const_lv1_0) and (egress_0_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_io_assign_proc : process(m_axi_wr_0_AWREADY, ap_predicate_op41_writereq_state2)
    begin
                ap_block_state2_io <= ((m_axi_wr_0_AWREADY = ap_const_logic_0) and (ap_predicate_op41_writereq_state2 = ap_const_boolean_1));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(egress_0_TVALID, icmp_ln29_reg_268)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln29_reg_268 = ap_const_lv1_0) and (egress_0_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_wr_0_WREADY, last_read_reg_264)
    begin
                ap_block_state3_io <= ((m_axi_wr_0_WREADY = ap_const_logic_0) and (last_read_reg_264 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_wr_0_WREADY, last_read_reg_264_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((m_axi_wr_0_WREADY = ap_const_logic_0) and (last_read_reg_264_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(golden_fifo_0_TREADY, ap_predicate_op53_write_state8)
    begin
                ap_block_state8_io <= ((ap_predicate_op53_write_state8 = ap_const_boolean_1) and (golden_fifo_0_TREADY = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage1_iter3_assign_proc : process(golden_fifo_0_TREADY, ap_predicate_op53_write_state8)
    begin
                ap_block_state8_pp0_stage1_iter3 <= ((ap_predicate_op53_write_state8 = ap_const_boolean_1) and (golden_fifo_0_TREADY = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage0_iter4_assign_proc : process(m_axi_wr_0_BVALID, last_read_reg_264_pp0_iter3_reg)
    begin
                ap_block_state9_pp0_stage0_iter4 <= ((m_axi_wr_0_BVALID = ap_const_logic_0) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_314_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_314 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_435_assign_proc : process(ap_CS_fsm_pp0_stage0, last_read_reg_264, ap_block_pp0_stage0_01001)
    begin
                ap_condition_435 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (last_read_reg_264 = ap_const_lv1_0));
    end process;


    ap_condition_439_assign_proc : process(ap_CS_fsm_pp0_stage1, last_read_reg_264_pp0_iter1_reg, ap_block_pp0_stage1_01001)
    begin
                ap_condition_439 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (last_read_reg_264_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln29_reg_268, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln29_reg_268 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln29_reg_268_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln29_reg_268_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_predicate_op41_writereq_state2_assign_proc : process(icmp_ln29_reg_268, last_read_reg_264)
    begin
                ap_predicate_op41_writereq_state2 <= ((icmp_ln29_reg_268 = ap_const_lv1_0) and (last_read_reg_264 = ap_const_lv1_0));
    end process;


    ap_predicate_op53_write_state8_assign_proc : process(last_read_reg_264_pp0_iter3_reg, icmp_ln1072_reg_295_pp0_iter2_reg)
    begin
                ap_predicate_op53_write_state8 <= ((icmp_ln1072_reg_295_pp0_iter2_reg = ap_const_lv1_1) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, i_fu_92, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv26_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_92;
        end if; 
    end process;


    egress_0_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, egress_0_TVALID, icmp_ln29_reg_268, ap_block_pp0_stage1)
    begin
        if (((icmp_ln29_reg_268 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            egress_0_TDATA_blk_n <= egress_0_TVALID;
        else 
            egress_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    egress_0_TREADY_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln29_reg_268, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln29_reg_268 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            egress_0_TREADY <= ap_const_logic_1;
        else 
            egress_0_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    golden_fifo_0_TDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln293_reg_272_pp0_iter3_reg),32));

    golden_fifo_0_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, golden_fifo_0_TREADY, ap_predicate_op53_write_state8, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op53_write_state8 = ap_const_boolean_1))) then 
            golden_fifo_0_TDATA_blk_n <= golden_fifo_0_TREADY;
        else 
            golden_fifo_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    golden_fifo_0_TVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_predicate_op53_write_state8, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op53_write_state8 = ap_const_boolean_1))) then 
            golden_fifo_0_TVALID <= ap_const_logic_1;
        else 
            golden_fifo_0_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1072_fu_230_p2 <= "1" when (unsigned(egress_0_TDATA) < unsigned(target_read_reg_259)) else "0";
    icmp_ln29_fu_167_p2 <= "1" when (ap_sig_allocacmp_i_4 = ap_const_lv26_2000000) else "0";
    last_read_read_fu_102_p2 <= last;
    m_axi_wr_0_ARADDR <= ap_const_lv64_0;
    m_axi_wr_0_ARBURST <= ap_const_lv2_0;
    m_axi_wr_0_ARCACHE <= ap_const_lv4_0;
    m_axi_wr_0_ARID <= ap_const_lv1_0;
    m_axi_wr_0_ARLEN <= ap_const_lv32_0;
    m_axi_wr_0_ARLOCK <= ap_const_lv2_0;
    m_axi_wr_0_ARPROT <= ap_const_lv3_0;
    m_axi_wr_0_ARQOS <= ap_const_lv4_0;
    m_axi_wr_0_ARREGION <= ap_const_lv4_0;
    m_axi_wr_0_ARSIZE <= ap_const_lv3_0;
    m_axi_wr_0_ARUSER <= ap_const_lv1_0;
    m_axi_wr_0_ARVALID <= ap_const_logic_0;
    m_axi_wr_0_AWADDR <= sext_ln35_fu_220_p1;
    m_axi_wr_0_AWBURST <= ap_const_lv2_0;
    m_axi_wr_0_AWCACHE <= ap_const_lv4_0;
    m_axi_wr_0_AWID <= ap_const_lv1_0;
    m_axi_wr_0_AWLEN <= ap_const_lv32_2;
    m_axi_wr_0_AWLOCK <= ap_const_lv2_0;
    m_axi_wr_0_AWPROT <= ap_const_lv3_0;
    m_axi_wr_0_AWQOS <= ap_const_lv4_0;
    m_axi_wr_0_AWREGION <= ap_const_lv4_0;
    m_axi_wr_0_AWSIZE <= ap_const_lv3_0;
    m_axi_wr_0_AWUSER <= ap_const_lv1_0;

    m_axi_wr_0_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op41_writereq_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op41_writereq_state2 = ap_const_boolean_1))) then 
            m_axi_wr_0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_wr_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_wr_0_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, last_read_reg_264_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_0))) then 
            m_axi_wr_0_BREADY <= ap_const_logic_1;
        else 
            m_axi_wr_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_wr_0_RREADY <= ap_const_logic_0;

    m_axi_wr_0_WDATA_assign_proc : process(ap_enable_reg_pp0_iter1, p_Result_s_reg_299, trunc_ln674_fu_235_p1, ap_condition_435, ap_condition_439)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_439)) then 
                m_axi_wr_0_WDATA <= p_Result_s_reg_299;
            elsif ((ap_const_boolean_1 = ap_condition_435)) then 
                m_axi_wr_0_WDATA <= trunc_ln674_fu_235_p1;
            else 
                m_axi_wr_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_wr_0_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_wr_0_WID <= ap_const_lv1_0;
    m_axi_wr_0_WLAST <= ap_const_logic_0;
    m_axi_wr_0_WSTRB <= ap_const_lv32_FFFFFFFF;
    m_axi_wr_0_WUSER <= ap_const_lv1_0;

    m_axi_wr_0_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, last_read_reg_264, last_read_reg_264_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (last_read_reg_264_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (last_read_reg_264 = ap_const_lv1_0)))) then 
            m_axi_wr_0_WVALID <= ap_const_logic_1;
        else 
            m_axi_wr_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln35_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_277),64));

    shl_ln_fu_183_p3 <= (trunc_ln293_fu_179_p1 & ap_const_lv6_0);
    trunc_ln293_fu_179_p1 <= ap_sig_allocacmp_i_4(25 - 1 downto 0);
    trunc_ln674_fu_235_p1 <= tmp_data_V_reg_282(256 - 1 downto 0);

    wr_0_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, m_axi_wr_0_AWREADY, ap_predicate_op41_writereq_state2, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op41_writereq_state2 = ap_const_boolean_1))) then 
            wr_0_blk_n_AW <= m_axi_wr_0_AWREADY;
        else 
            wr_0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    wr_0_blk_n_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, m_axi_wr_0_BVALID, last_read_reg_264_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (last_read_reg_264_pp0_iter3_reg = ap_const_lv1_0))) then 
            wr_0_blk_n_B <= m_axi_wr_0_BVALID;
        else 
            wr_0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    wr_0_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_wr_0_WREADY, last_read_reg_264, last_read_reg_264_pp0_iter1_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (last_read_reg_264_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (last_read_reg_264 = ap_const_lv1_0)))) then 
            wr_0_blk_n_W <= m_axi_wr_0_WREADY;
        else 
            wr_0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln293_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_183_p3),64));
end behav;
